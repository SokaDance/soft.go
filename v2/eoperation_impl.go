// Code generated by soft.generator.go. DO NOT EDIT.

package ecore

// eOperationImpl is the implementation of the model object 'EOperation'
type eOperationImpl struct {
	eTypedElementExt
	eExceptions EList[EClassifier]
	eParameters EList[EParameter]
	operationID int
}
type eOperationImplInitializers interface {
	initEExceptions() EList[EClassifier]
	initEParameters() EList[EParameter]
}

// newEOperationImpl is the constructor of a eOperationImpl
func newEOperationImpl() *eOperationImpl {
	eOperation := new(eOperationImpl)
	eOperation.SetInterfaces(eOperation)
	eOperation.Initialize()
	return eOperation
}

func (eOperation *eOperationImpl) Initialize() {
	eOperation.eTypedElementExt.Initialize()
	eOperation.operationID = -1

}

func (eOperation *eOperationImpl) asEOperation() EOperation {
	return eOperation.GetInterfaces().(EOperation)
}

func (eOperation *eOperationImpl) asInitializers() eOperationImplInitializers {
	return eOperation.AsEObject().(eOperationImplInitializers)
}

func (eOperation *eOperationImpl) EStaticClass() EClass {
	return GetPackage().GetEOperation()
}

func (eOperation *eOperationImpl) EStaticFeatureCount() int {
	return EOPERATION_FEATURE_COUNT
}

// IsOverrideOf default implementation
func (eOperation *eOperationImpl) IsOverrideOf(EOperation) bool {
	panic("IsOverrideOf not implemented")
}

// GetEContainingClass get the value of eContainingClass
func (eOperation *eOperationImpl) GetEContainingClass() EClass {
	if eOperation.EContainerFeatureID() == EOPERATION__ECONTAINING_CLASS {
		return eOperation.EContainer().(EClass)
	}
	return nil
}

// GetEExceptions get the value of eExceptions
func (eOperation *eOperationImpl) GetEExceptions() EList[EClassifier] {
	if eOperation.eExceptions == nil {
		eOperation.eExceptions = eOperation.asInitializers().initEExceptions()
	}
	return eOperation.eExceptions
}

// UnsetEExceptions unset the value of eExceptions
func (eOperation *eOperationImpl) UnsetEExceptions() {
	if eOperation.eExceptions != nil {
		eOperation.eExceptions.Clear()
	}
}

// GetEParameters get the value of eParameters
func (eOperation *eOperationImpl) GetEParameters() EList[EParameter] {
	if eOperation.eParameters == nil {
		eOperation.eParameters = eOperation.asInitializers().initEParameters()
	}
	return eOperation.eParameters
}

// GetOperationID get the value of operationID
func (eOperation *eOperationImpl) GetOperationID() int {
	return eOperation.operationID
}

// SetOperationID set the value of operationID
func (eOperation *eOperationImpl) SetOperationID(newOperationID int) {
	oldOperationID := eOperation.operationID
	eOperation.operationID = newOperationID
	if eOperation.ENotificationRequired() {
		eOperation.ENotify(NewNotificationByFeatureID(eOperation.AsEObject(), SET, EOPERATION__OPERATION_ID, oldOperationID, newOperationID, NO_INDEX))
	}
}

func (eOperation *eOperationImpl) initEExceptions() EList[EClassifier] {
	return NewBasicEObjectList[EClassifier](eOperation.AsEObjectInternal(), EOPERATION__EEXCEPTIONS, -1, false, false, false, true, true)
}

func (eOperation *eOperationImpl) initEParameters() EList[EParameter] {
	return NewBasicEObjectList[EParameter](eOperation.AsEObjectInternal(), EOPERATION__EPARAMETERS, EPARAMETER__EOPERATION, true, true, true, false, false)
}

func (eOperation *eOperationImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EOPERATION__ECONTAINING_CLASS:
		return ToAny(eOperation.asEOperation().GetEContainingClass())
	case EOPERATION__EEXCEPTIONS:
		list := eOperation.asEOperation().GetEExceptions().(EObjectList[EClassifier])
		if !resolve {
			list = list.GetUnResolvedList()
		}
		return ToAnyObjectList(list)
	case EOPERATION__EPARAMETERS:
		return ToAnyObjectList(eOperation.asEOperation().GetEParameters().(EObjectList[EParameter]))
	case EOPERATION__OPERATION_ID:
		return ToAny(eOperation.asEOperation().GetOperationID())
	default:
		return eOperation.eTypedElementExt.EGetFromID(featureID, resolve)
	}
}

func (eOperation *eOperationImpl) ESetFromID(featureID int, value any) {
	switch featureID {
	case EOPERATION__EEXCEPTIONS:
		newList := FromAnyList[EClassifier](value.(EList[any]))
		l := eOperation.asEOperation().GetEExceptions()
		l.Clear()
		l.AddAll(newList)
	case EOPERATION__EPARAMETERS:
		newList := FromAnyList[EParameter](value.(EList[any]))
		l := eOperation.asEOperation().GetEParameters()
		l.Clear()
		l.AddAll(newList)
	case EOPERATION__OPERATION_ID:
		newValue := FromAny[int](value)
		eOperation.asEOperation().SetOperationID(newValue)
	default:
		eOperation.eTypedElementExt.ESetFromID(featureID, value)
	}
}

func (eOperation *eOperationImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EOPERATION__EEXCEPTIONS:
		eOperation.asEOperation().UnsetEExceptions()
	case EOPERATION__EPARAMETERS:
		eOperation.asEOperation().GetEParameters().Clear()
	case EOPERATION__OPERATION_ID:
		eOperation.asEOperation().SetOperationID(-1)
	default:
		eOperation.eTypedElementExt.EUnsetFromID(featureID)
	}
}

func (eOperation *eOperationImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EOPERATION__ECONTAINING_CLASS:
		return eOperation.GetEContainingClass() != nil
	case EOPERATION__EEXCEPTIONS:
		return eOperation.eExceptions != nil && eOperation.eExceptions.Size() != 0
	case EOPERATION__EPARAMETERS:
		return eOperation.eParameters != nil && eOperation.eParameters.Size() != 0
	case EOPERATION__OPERATION_ID:
		return eOperation.operationID != -1
	default:
		return eOperation.eTypedElementExt.EIsSetFromID(featureID)
	}
}

func (eOperation *eOperationImpl) EInvokeFromID(operationID int, arguments EList[any]) any {
	switch operationID {
	case EOPERATION__IS_OVERRIDE_OF_EOPERATION:
		return eOperation.asEOperation().IsOverrideOf(arguments.Get(0).(EOperation))
	default:
		return eOperation.eTypedElementExt.EInvokeFromID(operationID, arguments)
	}
}

func (eOperation *eOperationImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EOPERATION__ECONTAINING_CLASS:
		msgs := notifications
		if eOperation.EInternalContainer() != nil {
			msgs = eOperation.EBasicRemoveFromContainer(msgs)
		}
		return eOperation.EBasicSetContainer(otherEnd, EOPERATION__ECONTAINING_CLASS, msgs)
	case EOPERATION__EPARAMETERS:
		list := eOperation.GetEParameters().(ENotifyingList[EParameter])
		end := otherEnd.(EParameter)
		return list.AddWithNotification(end, notifications)
	default:
		return eOperation.eTypedElementExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eOperation *eOperationImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EOPERATION__ECONTAINING_CLASS:
		return eOperation.EBasicSetContainer(nil, EOPERATION__ECONTAINING_CLASS, notifications)
	case EOPERATION__EPARAMETERS:
		list := eOperation.GetEParameters().(ENotifyingList[EParameter])
		end := otherEnd.(EParameter)
		return list.RemoveWithNotification(end, notifications)
	default:
		return eOperation.eTypedElementExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
