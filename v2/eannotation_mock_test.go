// Code generated by soft.generator.go. DO NOT EDIT.

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEAnnotation() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEAnnotationGetContents tests method GetContents
func TestMockEAnnotationGetContents(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEList[EObject]{}
	// return a value
	o.On("GetContents").Once().Return(l)
	o.On("GetContents").Once().Return(func() EList[EObject] {
		return l
	})
	assert.Equal(t, l, o.GetContents())
	assert.Equal(t, l, o.GetContents())
	o.AssertExpectations(t)
}

// TestMockEAnnotationGetDetails tests method GetDetails
func TestMockEAnnotationGetDetails(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEMap[string, string]{}
	// return a value
	o.On("GetDetails").Once().Return(l)
	o.On("GetDetails").Once().Return(func() EMap[string, string] {
		return l
	})
	assert.Equal(t, l, o.GetDetails())
	assert.Equal(t, l, o.GetDetails())
	o.AssertExpectations(t)
}

// TestMockEAnnotationGetEModelElement tests method GetEModelElement
func TestMockEAnnotationGetEModelElement(t *testing.T) {
	o := &MockEAnnotation{}
	r := &MockEModelElement{}
	o.On("GetEModelElement").Once().Return(r)
	o.On("GetEModelElement").Once().Return(func() EModelElement {
		return r
	})
	assert.Equal(t, r, o.GetEModelElement())
	assert.Equal(t, r, o.GetEModelElement())
	o.AssertExpectations(t)
}

// TestMockEAnnotationSetEModelElement tests method SetEModelElement
func TestMockEAnnotationSetEModelElement(t *testing.T) {
	o := &MockEAnnotation{}
	v := &MockEModelElement{}
	o.On("SetEModelElement", v).Once()
	o.SetEModelElement(v)
	o.AssertExpectations(t)
}

// TestMockEAnnotationGetReferences tests method GetReferences
func TestMockEAnnotationGetReferences(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEList[EObject]{}
	// return a value
	o.On("GetReferences").Once().Return(l)
	o.On("GetReferences").Once().Return(func() EList[EObject] {
		return l
	})
	assert.Equal(t, l, o.GetReferences())
	assert.Equal(t, l, o.GetReferences())
	o.AssertExpectations(t)
}

// TestMockEAnnotationGetSource tests method GetSource
func TestMockEAnnotationGetSource(t *testing.T) {
	o := &MockEAnnotation{}
	r := "Test String"
	o.On("GetSource").Once().Return(r)
	o.On("GetSource").Once().Return(func() string {
		return r
	})
	assert.Equal(t, r, o.GetSource())
	assert.Equal(t, r, o.GetSource())
	o.AssertExpectations(t)
}

// TestMockEAnnotationSetSource tests method SetSource
func TestMockEAnnotationSetSource(t *testing.T) {
	o := &MockEAnnotation{}
	v := "Test String"
	o.On("SetSource", v).Once()
	o.SetSource(v)
	o.AssertExpectations(t)
}
