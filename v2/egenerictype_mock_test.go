// Code generated by soft.generator.go. DO NOT EDIT.

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEGenericType() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEGenericTypeGetEClassifier tests method GetEClassifier
func TestMockEGenericTypeGetEClassifier(t *testing.T) {
	o := &MockEGenericType{}
	r := &MockEClassifier{}
	o.On("GetEClassifier").Once().Return(r)
	o.On("GetEClassifier").Once().Return(func() EClassifier {
		return r
	})
	assert.Equal(t, r, o.GetEClassifier())
	assert.Equal(t, r, o.GetEClassifier())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeSetEClassifier tests method SetEClassifier
func TestMockEGenericTypeSetEClassifier(t *testing.T) {
	o := &MockEGenericType{}
	v := &MockEClassifier{}
	o.On("SetEClassifier", v).Once()
	o.SetEClassifier(v)
	o.AssertExpectations(t)
}

// TestMockEGenericTypeGetELowerBound tests method GetELowerBound
func TestMockEGenericTypeGetELowerBound(t *testing.T) {
	o := &MockEGenericType{}
	r := &MockEGenericType{}
	o.On("GetELowerBound").Once().Return(r)
	o.On("GetELowerBound").Once().Return(func() EGenericType {
		return r
	})
	assert.Equal(t, r, o.GetELowerBound())
	assert.Equal(t, r, o.GetELowerBound())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeSetELowerBound tests method SetELowerBound
func TestMockEGenericTypeSetELowerBound(t *testing.T) {
	o := &MockEGenericType{}
	v := &MockEGenericType{}
	o.On("SetELowerBound", v).Once()
	o.SetELowerBound(v)
	o.AssertExpectations(t)
}

// TestMockEGenericTypeGetERawType tests method GetERawType
func TestMockEGenericTypeGetERawType(t *testing.T) {
	o := &MockEGenericType{}
	r := &MockEClassifier{}
	o.On("GetERawType").Once().Return(r)
	o.On("GetERawType").Once().Return(func() EClassifier {
		return r
	})
	assert.Equal(t, r, o.GetERawType())
	assert.Equal(t, r, o.GetERawType())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeGetETypeArguments tests method GetETypeArguments
func TestMockEGenericTypeGetETypeArguments(t *testing.T) {
	o := &MockEGenericType{}
	l := &MockEList[EGenericType]{}
	// return a value
	o.On("GetETypeArguments").Once().Return(l)
	o.On("GetETypeArguments").Once().Return(func() EList[EGenericType] {
		return l
	})
	assert.Equal(t, l, o.GetETypeArguments())
	assert.Equal(t, l, o.GetETypeArguments())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeGetETypeParameter tests method GetETypeParameter
func TestMockEGenericTypeGetETypeParameter(t *testing.T) {
	o := &MockEGenericType{}
	r := &MockETypeParameter{}
	o.On("GetETypeParameter").Once().Return(r)
	o.On("GetETypeParameter").Once().Return(func() ETypeParameter {
		return r
	})
	assert.Equal(t, r, o.GetETypeParameter())
	assert.Equal(t, r, o.GetETypeParameter())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeSetETypeParameter tests method SetETypeParameter
func TestMockEGenericTypeSetETypeParameter(t *testing.T) {
	o := &MockEGenericType{}
	v := &MockETypeParameter{}
	o.On("SetETypeParameter", v).Once()
	o.SetETypeParameter(v)
	o.AssertExpectations(t)
}

// TestMockEGenericTypeGetEUpperBound tests method GetEUpperBound
func TestMockEGenericTypeGetEUpperBound(t *testing.T) {
	o := &MockEGenericType{}
	r := &MockEGenericType{}
	o.On("GetEUpperBound").Once().Return(r)
	o.On("GetEUpperBound").Once().Return(func() EGenericType {
		return r
	})
	assert.Equal(t, r, o.GetEUpperBound())
	assert.Equal(t, r, o.GetEUpperBound())
	o.AssertExpectations(t)
}

// TestMockEGenericTypeSetEUpperBound tests method SetEUpperBound
func TestMockEGenericTypeSetEUpperBound(t *testing.T) {
	o := &MockEGenericType{}
	v := &MockEGenericType{}
	o.On("SetEUpperBound", v).Once()
	o.SetEUpperBound(v)
	o.AssertExpectations(t)
}

// TestMockEGenericTypeIsInstance tests method IsInstance
func TestMockEGenericTypeIsInstance(t *testing.T) {
	o := &MockEGenericType{}
	object := any(nil)
	r := true
	o.On("IsInstance", object).Return(r).Once()
	o.On("IsInstance", object).Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.IsInstance(object))
	assert.Equal(t, r, o.IsInstance(object))
	o.AssertExpectations(t)
}
