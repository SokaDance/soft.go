// Code generated by soft.generator.go. DO NOT EDIT.



package ecore



// eNamedElementImpl is the implementation of the model object 'ENamedElement'
type eNamedElementImpl struct {
    eModelElementExt
    name string
    
}

// newENamedElementImpl is the constructor of a eNamedElementImpl
func newENamedElementImpl() *eNamedElementImpl {
    eNamedElement := new(eNamedElementImpl)
	eNamedElement.SetInterfaces(eNamedElement)
	eNamedElement.Initialize()
    return eNamedElement
}

func (eNamedElement *eNamedElementImpl) Initialize() {
	eNamedElement.eModelElementExt.Initialize()
	eNamedElement.name = ""
	
}

func (eNamedElement *eNamedElementImpl) asENamedElement() ENamedElement {
	return eNamedElement.GetInterfaces().(ENamedElement)
}


func (eNamedElement *eNamedElementImpl) EStaticClass() EClass {
    return GetPackage().GetENamedElement()
}

func (eNamedElement *eNamedElementImpl) EStaticFeatureCount() int {
    return ENAMED_ELEMENT_FEATURE_COUNT
}


// GetName get the value of name
func (eNamedElement *eNamedElementImpl) GetName() string {
    return eNamedElement.name
}

// SetName set the value of name
func (eNamedElement *eNamedElementImpl) SetName( newName string ) {
    oldName := eNamedElement.name
    eNamedElement.name = newName
    if eNamedElement.ENotificationRequired() {
        eNamedElement.ENotify(NewNotificationByFeatureID(eNamedElement.AsEObject(), SET, ENAMED_ELEMENT__NAME, oldName, newName, NO_INDEX))
    }
}




func (eNamedElement *eNamedElementImpl) EGetFromID(featureID int, resolve bool) any {
    switch featureID {
    case ENAMED_ELEMENT__NAME:
        return ToAny(eNamedElement.asENamedElement().GetName())
    default:
        return eNamedElement.eModelElementExt.EGetFromID(featureID, resolve)
    }
}


func (eNamedElement *eNamedElementImpl) ESetFromID(featureID int, value any) {
    switch featureID {
    case ENAMED_ELEMENT__NAME:
		newValue := FromAny[string](value)
        eNamedElement.asENamedElement().SetName(newValue)
    default:
        eNamedElement.eModelElementExt.ESetFromID(featureID, value)
    }
}


func (eNamedElement *eNamedElementImpl) EUnsetFromID(featureID int) {
    switch featureID {
    case ENAMED_ELEMENT__NAME:
        eNamedElement.asENamedElement().SetName("")
    default:
        eNamedElement.eModelElementExt.EUnsetFromID(featureID)
    }
}

func (eNamedElement *eNamedElementImpl) EIsSetFromID(featureID int) bool {
    switch featureID {
    case ENAMED_ELEMENT__NAME:
        return eNamedElement.name != ""
    default:
        return eNamedElement.eModelElementExt.EIsSetFromID(featureID)
    }
}


