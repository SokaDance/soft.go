// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEFactory() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEFactoryRun struct {
	mock.Mock
}

func (m *mockEFactoryRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEFactoryRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEFactoryRun creates a new instance of mockEFactoryRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEFactoryRun(t mockConstructorTestingTmockEFactoryRun, args ...any) *mockEFactoryRun {
	mock := &mockEFactoryRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEFactoryGetEPackage tests method GetEPackage
func TestMockEFactoryGetEPackage(t *testing.T) {
	o := NewMockEFactory(t)
	r := new(MockEPackage)
	m := newMockEFactoryRun(t)
	o.EXPECT().GetEPackage().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEPackage().Once().Return(func() EPackage { return r })
	assert.Equal(t, r, o.GetEPackage())
	assert.Equal(t, r, o.GetEPackage())
}

// TestMockEFactorySetEPackage tests method SetEPackage
func TestMockEFactorySetEPackage(t *testing.T) {
	o := NewMockEFactory(t)
	v := new(MockEPackage)
	m := newMockEFactoryRun(t, v)
	o.EXPECT().SetEPackage(v).Run(func(_p0 EPackage) { m.Run(_p0) }).Once()
	o.SetEPackage(v)
}

// TestMockEFactoryConvertToString tests method ConvertToString
func TestMockEFactoryConvertToString(t *testing.T) {
	o := &MockEFactory{}
	eDataType := new(MockEDataType)
	instanceValue := any(nil)
	m := newMockEFactoryRun(t, eDataType, instanceValue)
	r := string("Test String")
	o.EXPECT().ConvertToString(eDataType, instanceValue).Run(func(eDataType EDataType, instanceValue any) { m.Run(eDataType, instanceValue) }).Return(r).Once()
	o.EXPECT().ConvertToString(eDataType, instanceValue).Once().Return(func() string {
		return r
	})
	assert.Equal(t, r, o.ConvertToString(eDataType, instanceValue))
	assert.Equal(t, r, o.ConvertToString(eDataType, instanceValue))
	o.AssertExpectations(t)
}

// TestMockEFactoryCreate tests method Create
func TestMockEFactoryCreate(t *testing.T) {
	o := &MockEFactory{}
	eClass := new(MockEClass)
	m := newMockEFactoryRun(t, eClass)
	r := new(MockEObjectInternal)
	o.EXPECT().Create(eClass).Run(func(eClass EClass) { m.Run(eClass) }).Return(r).Once()
	o.EXPECT().Create(eClass).Once().Return(func() EObject {
		return r
	})
	assert.Equal(t, r, o.Create(eClass))
	assert.Equal(t, r, o.Create(eClass))
	o.AssertExpectations(t)
}

// TestMockEFactoryCreateFromString tests method CreateFromString
func TestMockEFactoryCreateFromString(t *testing.T) {
	o := &MockEFactory{}
	eDataType := new(MockEDataType)
	literalValue := string("Test String")
	m := newMockEFactoryRun(t, eDataType, literalValue)
	r := any(nil)
	o.EXPECT().CreateFromString(eDataType, literalValue).Run(func(eDataType EDataType, literalValue string) { m.Run(eDataType, literalValue) }).Return(r).Once()
	o.EXPECT().CreateFromString(eDataType, literalValue).Once().Return(func() any {
		return r
	})
	assert.Equal(t, r, o.CreateFromString(eDataType, literalValue))
	assert.Equal(t, r, o.CreateFromString(eDataType, literalValue))
	o.AssertExpectations(t)
}
