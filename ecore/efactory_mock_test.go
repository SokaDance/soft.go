// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "github.com/stretchr/testify/assert"
import "testing"

func discardMockEFactory() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEFactoryGetEPackage tests method GetEPackage
func TestMockEFactoryGetEPackage(t *testing.T) {
	o := NewMockEFactory(t)
	r := NewMockEPackage(t)
	m := NewMockRun(t)
	o.EXPECT().GetEPackage().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetEPackage().Call.Return(func() EPackage { return r }).Once()
	assert.Equal(t, r, o.GetEPackage())
	assert.Equal(t, r, o.GetEPackage())
}

// TestMockEFactorySetEPackage tests method SetEPackage
func TestMockEFactorySetEPackage(t *testing.T) {
	o := NewMockEFactory(t)
	v := NewMockEPackage(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetEPackage(v).Return().Run(func(_p0 EPackage) { m.Run(_p0) }).Once()
	o.SetEPackage(v)
}

// TestMockEFactoryConvertToString tests method ConvertToString
func TestMockEFactoryConvertToString(t *testing.T) {
	o := NewMockEFactory(t)
	eDataType := NewMockEDataType(t)
	instanceValue := any(nil)
	m := NewMockRun(t, eDataType, instanceValue)
	r := string("Test String")
	o.EXPECT().ConvertToString(eDataType, instanceValue).Return(r).Run(func(eDataType EDataType, instanceValue any) { m.Run(eDataType, instanceValue) }).Once()
	o.EXPECT().ConvertToString(eDataType, instanceValue).Call.Return(func() string {
		return r
	}).Once()
	assert.Equal(t, r, o.ConvertToString(eDataType, instanceValue))
	assert.Equal(t, r, o.ConvertToString(eDataType, instanceValue))
}

// TestMockEFactoryCreate tests method Create
func TestMockEFactoryCreate(t *testing.T) {
	o := NewMockEFactory(t)
	eClass := NewMockEClass(t)
	m := NewMockRun(t, eClass)
	r := NewMockEObjectInternal(t)
	o.EXPECT().Create(eClass).Return(r).Run(func(eClass EClass) { m.Run(eClass) }).Once()
	o.EXPECT().Create(eClass).Call.Return(func() EObject {
		return r
	}).Once()
	assert.Equal(t, r, o.Create(eClass))
	assert.Equal(t, r, o.Create(eClass))
}

// TestMockEFactoryCreateFromString tests method CreateFromString
func TestMockEFactoryCreateFromString(t *testing.T) {
	o := NewMockEFactory(t)
	eDataType := NewMockEDataType(t)
	literalValue := string("Test String")
	m := NewMockRun(t, eDataType, literalValue)
	r := any(nil)
	o.EXPECT().CreateFromString(eDataType, literalValue).Return(r).Run(func(eDataType EDataType, literalValue string) { m.Run(eDataType, literalValue) }).Once()
	o.EXPECT().CreateFromString(eDataType, literalValue).Call.Return(func() any {
		return r
	}).Once()
	assert.Equal(t, r, o.CreateFromString(eDataType, literalValue))
	assert.Equal(t, r, o.CreateFromString(eDataType, literalValue))
}
