// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEClass() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEClassAsEClass(t *testing.T) {
	o := newEClassImpl()
	assert.Equal(t, o, o.asEClass())
}

func TestEClassStaticClass(t *testing.T) {
	o := newEClassImpl()
	assert.Equal(t, GetPackage().GetEClass(), o.EStaticClass())
}

func TestEClassFeatureCount(t *testing.T) {
	o := newEClassImpl()
	assert.Equal(t, ECLASS_FEATURE_COUNT, o.EStaticFeatureCount())
}

func TestEClassEAllAttributesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllAttributes())
}

func TestEClassEAllContainmentsGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllContainments())
}

func TestEClassEAllOperationsGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllOperations())
}

func TestEClassEAllReferencesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllReferences())
}

func TestEClassEAllStructuralFeaturesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllStructuralFeatures())
}

func TestEClassEAllSuperTypesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllSuperTypes())
}

func TestEClassEAttributesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAttributes())
}

func TestEClassEContainmentFeaturesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEContainmentFeatures())
}

func TestEClassECrossReferenceFeaturesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetECrossReferenceFeatures())
}

func TestEClassEIDAttributeGet(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEIDAttribute() })
}

func TestEClassEOperationsGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEOperations())
}

func TestEClassEReferencesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEReferences())
}

func TestEClassEStructuralFeaturesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEStructuralFeatures())
}

func TestEClassESuperTypesGet(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetESuperTypes())
}

func TestEClassAbstractGet(t *testing.T) {
	o := newEClassImpl()
	// get default value
	assert.Equal(t, bool(false), o.IsAbstract())
	// get initialized value
	v := true
	o.isAbstract = v
	assert.Equal(t, v, o.IsAbstract())
}

func TestEClassAbstractSet(t *testing.T) {
	o := newEClassImpl()
	v := true
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.EAdapters().Add(mockAdapter)
	o.SetAbstract(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassInterfaceGet(t *testing.T) {
	o := newEClassImpl()
	// get default value
	assert.Equal(t, bool(false), o.IsInterface())
	// get initialized value
	v := true
	o.isInterface = v
	assert.Equal(t, v, o.IsInterface())
}

func TestEClassInterfaceSet(t *testing.T) {
	o := newEClassImpl()
	v := true
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.EAdapters().Add(mockAdapter)
	o.SetInterface(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassGetEOperationOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEOperation(0) })
}
func TestEClassGetEStructuralFeatureOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEStructuralFeature(0) })
}
func TestEClassGetEStructuralFeatureFromNameOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEStructuralFeatureFromName("") })
}
func TestEClassGetFeatureCountOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureCount() })
}
func TestEClassGetFeatureIDOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureID(nil) })
}
func TestEClassGetFeatureTypeOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureType(nil) })
}
func TestEClassGetOperationCountOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOperationCount() })
}
func TestEClassGetOperationIDOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOperationID(nil) })
}
func TestEClassGetOverrideOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOverride(nil) })
}
func TestEClassIsSuperTypeOfOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.IsSuperTypeOf(nil) })
}

func TestEClassEGetFromID(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.EGetFromID(-1, true) })
	assert.Equal(t, o.GetEAllAttributes(), FromAnyList[EAttribute](o.EGetFromID(ECLASS__EALL_ATTRIBUTES, true)))
	assert.Equal(t, o.GetEAllAttributes().(EObjectList[EAttribute]).GetUnResolvedList(), FromAnyList[EAttribute](o.EGetFromID(ECLASS__EALL_ATTRIBUTES, false)))
	assert.Equal(t, o.GetEAllContainments(), FromAnyList[EReference](o.EGetFromID(ECLASS__EALL_CONTAINMENTS, true)))
	assert.Equal(t, o.GetEAllContainments().(EObjectList[EReference]).GetUnResolvedList(), FromAnyList[EReference](o.EGetFromID(ECLASS__EALL_CONTAINMENTS, false)))
	assert.Equal(t, o.GetEAllOperations(), FromAnyList[EOperation](o.EGetFromID(ECLASS__EALL_OPERATIONS, true)))
	assert.Equal(t, o.GetEAllOperations().(EObjectList[EOperation]).GetUnResolvedList(), FromAnyList[EOperation](o.EGetFromID(ECLASS__EALL_OPERATIONS, false)))
	assert.Equal(t, o.GetEAllReferences(), FromAnyList[EReference](o.EGetFromID(ECLASS__EALL_REFERENCES, true)))
	assert.Equal(t, o.GetEAllReferences().(EObjectList[EReference]).GetUnResolvedList(), FromAnyList[EReference](o.EGetFromID(ECLASS__EALL_REFERENCES, false)))
	assert.Equal(t, o.GetEAllStructuralFeatures(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__EALL_STRUCTURAL_FEATURES, true)))
	assert.Equal(t, o.GetEAllStructuralFeatures().(EObjectList[EStructuralFeature]).GetUnResolvedList(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__EALL_STRUCTURAL_FEATURES, false)))
	assert.Equal(t, o.GetEAllSuperTypes(), FromAnyList[EClass](o.EGetFromID(ECLASS__EALL_SUPER_TYPES, true)))
	assert.Equal(t, o.GetEAllSuperTypes().(EObjectList[EClass]).GetUnResolvedList(), FromAnyList[EClass](o.EGetFromID(ECLASS__EALL_SUPER_TYPES, false)))
	assert.Equal(t, o.GetEAttributes(), FromAnyList[EAttribute](o.EGetFromID(ECLASS__EATTRIBUTES, true)))
	assert.Equal(t, o.GetEAttributes().(EObjectList[EAttribute]).GetUnResolvedList(), FromAnyList[EAttribute](o.EGetFromID(ECLASS__EATTRIBUTES, false)))
	assert.Equal(t, o.GetEContainmentFeatures(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__ECONTAINMENT_FEATURES, true)))
	assert.Equal(t, o.GetEContainmentFeatures().(EObjectList[EStructuralFeature]).GetUnResolvedList(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__ECONTAINMENT_FEATURES, false)))
	assert.Equal(t, o.GetECrossReferenceFeatures(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__ECROSS_REFERENCE_FEATURES, true)))
	assert.Equal(t, o.GetECrossReferenceFeatures().(EObjectList[EStructuralFeature]).GetUnResolvedList(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__ECROSS_REFERENCE_FEATURES, false)))
	assert.Panics(t, func() { o.EGetFromID(ECLASS__EID_ATTRIBUTE, true) })
	assert.Panics(t, func() { o.EGetFromID(ECLASS__EID_ATTRIBUTE, false) })
	assert.Equal(t, o.GetEOperations(), FromAnyList[EOperation](o.EGetFromID(ECLASS__EOPERATIONS, true)))
	assert.Equal(t, o.GetEReferences(), FromAnyList[EReference](o.EGetFromID(ECLASS__EREFERENCES, true)))
	assert.Equal(t, o.GetEReferences().(EObjectList[EReference]).GetUnResolvedList(), FromAnyList[EReference](o.EGetFromID(ECLASS__EREFERENCES, false)))
	assert.Equal(t, o.GetEStructuralFeatures(), FromAnyList[EStructuralFeature](o.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, true)))
	assert.Equal(t, o.GetESuperTypes(), FromAnyList[EClass](o.EGetFromID(ECLASS__ESUPER_TYPES, true)))
	assert.Equal(t, o.GetESuperTypes().(EObjectList[EClass]).GetUnResolvedList(), FromAnyList[EClass](o.EGetFromID(ECLASS__ESUPER_TYPES, false)))
}

func TestEClassESetFromID(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.ESetFromID(-1, nil) })
	{
		v := true
		o.ESetFromID(ECLASS__ABSTRACT, v)
		assert.Equal(t, v, o.EGetFromID(ECLASS__ABSTRACT, false))
	}
	{
		// list with a value
		mockList := &MockEList[EOperation]{}
		mockValue := &MockEOperation{}
		mockIterator := &MockEIterator[EOperation]{}
		mockList.On("Iterator").Return(mockIterator).Once()
		mockIterator.On("HasNext").Return(true).Once()
		mockIterator.On("Next").Return(mockValue).Once()
		mockIterator.On("HasNext").Return(false).Once()
		mockValue.On("EInverseAdd", o, EOPERATION__ECONTAINING_CLASS, mock.Anything).Return(nil).Once()

		// set list with new contents
		o.ESetFromID(ECLASS__EOPERATIONS, ToAnyList[EOperation](mockList))
		// checks
		assert.Equal(t, 1, o.GetEOperations().Size())
		assert.Equal(t, mockValue, o.GetEOperations().Get(0))
		mock.AssertExpectationsForObjects(t, mockList, mockIterator, mockValue)
	}
	{
		// list with a value
		mockList := &MockEList[EStructuralFeature]{}
		mockValue := &MockEStructuralFeature{}
		mockIterator := &MockEIterator[EStructuralFeature]{}
		mockList.On("Iterator").Return(mockIterator).Once()
		mockIterator.On("HasNext").Return(true).Once()
		mockIterator.On("Next").Return(mockValue).Once()
		mockIterator.On("HasNext").Return(false).Once()
		mockValue.On("EInverseAdd", o, ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, mock.Anything).Return(nil).Once()

		// set list with new contents
		o.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, ToAnyList[EStructuralFeature](mockList))
		// checks
		assert.Equal(t, 1, o.GetEStructuralFeatures().Size())
		assert.Equal(t, mockValue, o.GetEStructuralFeatures().Get(0))
		mock.AssertExpectationsForObjects(t, mockList, mockIterator, mockValue)
	}
	{
		// list with a value
		mockList := &MockEList[EClass]{}
		mockValue := &MockEClass{}
		mockIterator := &MockEIterator[EClass]{}
		mockList.On("Iterator").Return(mockIterator).Once()
		mockIterator.On("HasNext").Return(true).Once()
		mockIterator.On("Next").Return(mockValue).Once()
		mockIterator.On("HasNext").Return(false).Once()
		mockValue.On("EIsProxy").Return(false).Once()

		// set list with new contents
		o.ESetFromID(ECLASS__ESUPER_TYPES, ToAnyList[EClass](mockList))
		// checks
		assert.Equal(t, 1, o.GetESuperTypes().Size())
		assert.Equal(t, mockValue, o.GetESuperTypes().Get(0))
		mock.AssertExpectationsForObjects(t, mockList, mockIterator, mockValue)
	}
	{
		v := true
		o.ESetFromID(ECLASS__INTERFACE, v)
		assert.Equal(t, v, o.EGetFromID(ECLASS__INTERFACE, false))
	}

}

func TestEClassEIsSetFromID(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.EIsSetFromID(-1) })
	assert.False(t, o.EIsSetFromID(ECLASS__ABSTRACT))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_REFERENCES))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	assert.False(t, o.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	assert.False(t, o.EIsSetFromID(ECLASS__EATTRIBUTES))
	assert.False(t, o.EIsSetFromID(ECLASS__ECONTAINMENT_FEATURES))
	assert.False(t, o.EIsSetFromID(ECLASS__ECROSS_REFERENCE_FEATURES))
	assert.False(t, o.EIsSetFromID(ECLASS__EID_ATTRIBUTE))
	assert.False(t, o.EIsSetFromID(ECLASS__EOPERATIONS))
	assert.False(t, o.EIsSetFromID(ECLASS__EREFERENCES))
	assert.False(t, o.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	assert.False(t, o.EIsSetFromID(ECLASS__ESUPER_TYPES))
	assert.False(t, o.EIsSetFromID(ECLASS__INTERFACE))
}

func TestEClassEUnsetFromID(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.EUnsetFromID(-1) })
	{
		o.EUnsetFromID(ECLASS__ABSTRACT)
		v := o.EGetFromID(ECLASS__ABSTRACT, false)
		assert.Equal(t, bool(false), v)
	}
	{
		o.EUnsetFromID(ECLASS__EOPERATIONS)
		v := o.EGetFromID(ECLASS__EOPERATIONS, false)
		assert.NotNil(t, v)
		l := v.(EList[any])
		assert.True(t, l.Empty())
	}
	{
		o.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		v := o.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false)
		assert.NotNil(t, v)
		l := v.(EList[any])
		assert.True(t, l.Empty())
	}
	{
		o.EUnsetFromID(ECLASS__ESUPER_TYPES)
		v := o.EGetFromID(ECLASS__ESUPER_TYPES, false)
		assert.NotNil(t, v)
		l := v.(EList[any])
		assert.True(t, l.Empty())
	}
	{
		o.EUnsetFromID(ECLASS__INTERFACE)
		v := o.EGetFromID(ECLASS__INTERFACE, false)
		assert.Equal(t, bool(false), v)
	}
}

func TestEClassEInvokeFromID(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.EInvokeFromID(-1, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
}

func TestEClassEBasicInverseAdd(t *testing.T) {
	o := newEClassImpl()
	{
		mockObject := new(MockEObject)
		mockNotifications := new(MockENotificationChain)
		assert.Equal(t, mockNotifications, o.EBasicInverseAdd(mockObject, -1, mockNotifications))
	}
	{
		mockObject := &MockEOperation{}
		o.EBasicInverseAdd(mockObject, ECLASS__EOPERATIONS, nil)
		l := o.GetEOperations()
		assert.True(t, l.Contains(mockObject))
		mock.AssertExpectationsForObjects(t, mockObject)
	}
	{
		mockObject := &MockEStructuralFeature{}
		o.EBasicInverseAdd(mockObject, ECLASS__ESTRUCTURAL_FEATURES, nil)
		l := o.GetEStructuralFeatures()
		assert.True(t, l.Contains(mockObject))
		mock.AssertExpectationsForObjects(t, mockObject)
	}

}

func TestEClassEBasicInverseRemove(t *testing.T) {
	o := newEClassImpl()
	{
		mockObject := new(MockEObject)
		mockNotifications := new(MockENotificationChain)
		assert.Equal(t, mockNotifications, o.EBasicInverseRemove(mockObject, -1, mockNotifications))
	}
	{
		// initialize list with a mock object
		mockObject := &MockEOperation{}
		mockObject.On("EInverseAdd", o, EOPERATION__ECONTAINING_CLASS, mock.Anything).Return(nil).Once()

		l := o.GetEOperations()
		l.Add(mockObject)

		// basic inverse remove
		o.EBasicInverseRemove(mockObject, ECLASS__EOPERATIONS, nil)

		// check it was removed
		assert.False(t, l.Contains(mockObject))
		mock.AssertExpectationsForObjects(t, mockObject)
	}
	{
		// initialize list with a mock object
		mockObject := &MockEStructuralFeature{}
		mockObject.On("EInverseAdd", o, ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, mock.Anything).Return(nil).Once()

		l := o.GetEStructuralFeatures()
		l.Add(mockObject)

		// basic inverse remove
		o.EBasicInverseRemove(mockObject, ECLASS__ESTRUCTURAL_FEATURES, nil)

		// check it was removed
		assert.False(t, l.Contains(mockObject))
		mock.AssertExpectationsForObjects(t, mockObject)
	}

}
