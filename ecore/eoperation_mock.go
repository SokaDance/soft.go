// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEOperation struct {
	MockEOperation_Prototype
	mock.Mock
}

type MockEOperation_Prototype struct {
	MockETypedElement_Prototype
}

type MockEOperation_Expecter struct {
	MockETypedElement_Expecter
}

func (eOperation *MockEOperation_Prototype) EXPECT() *MockEOperation_Expecter {
	e := &MockEOperation_Expecter{}
	e.Mock = eOperation.Mock
	return e
}

// GetEContainingClass get the value of eContainingClass
func (eOperation *MockEOperation_Prototype) GetEContainingClass() EClass {
	ret := eOperation.Called()

	var r EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClass)
		}
	}

	return r
}

type MockEOperation_GetEContainingClass_Call struct {
	*mock.Call
}

func (e *MockEOperation_Expecter) GetEContainingClass() *MockEOperation_GetEContainingClass_Call {
	return &MockEOperation_GetEContainingClass_Call{Call: e.Mock.On("GetEContainingClass")}
}

func (c *MockEOperation_GetEContainingClass_Call) Run(run func()) *MockEOperation_GetEContainingClass_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEOperation_GetEContainingClass_Call) Return(eContainingClass EClass) *MockEOperation_GetEContainingClass_Call {
	c.Call.Return(eContainingClass)
	return c
}

// GetEExceptions get the value of eExceptions
func (eOperation *MockEOperation_Prototype) GetEExceptions() EList {
	ret := eOperation.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEOperation_GetEExceptions_Call struct {
	*mock.Call
}

func (e *MockEOperation_Expecter) GetEExceptions() *MockEOperation_GetEExceptions_Call {
	return &MockEOperation_GetEExceptions_Call{Call: e.Mock.On("GetEExceptions")}
}

func (c *MockEOperation_GetEExceptions_Call) Run(run func()) *MockEOperation_GetEExceptions_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEOperation_GetEExceptions_Call) Return(eExceptions EList) *MockEOperation_GetEExceptions_Call {
	c.Call.Return(eExceptions)
	return c
}

// UnsetEExceptions provides mock implementation for unset the value of eExceptions
func (eOperation *MockEOperation_Prototype) UnsetEExceptions() {
	eOperation.Called()
}

type MockEOperation_UnsetEExceptions_Call struct {
	*mock.Call
}

func (e *MockEOperation_Expecter) UnsetEExceptions() *MockEOperation_UnsetEExceptions_Call {
	return &MockEOperation_UnsetEExceptions_Call{Call: e.Mock.On("UnsetEExceptions")}
}

func (c *MockEOperation_UnsetEExceptions_Call) Run(run func()) *MockEOperation_UnsetEExceptions_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEOperation_UnsetEExceptions_Call) Return() *MockEOperation_UnsetEExceptions_Call {
	c.Call.Return()
	return c
}

// GetEParameters get the value of eParameters
func (eOperation *MockEOperation_Prototype) GetEParameters() EList {
	ret := eOperation.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEOperation_GetEParameters_Call struct {
	*mock.Call
}

func (e *MockEOperation_Expecter) GetEParameters() *MockEOperation_GetEParameters_Call {
	return &MockEOperation_GetEParameters_Call{Call: e.Mock.On("GetEParameters")}
}

func (c *MockEOperation_GetEParameters_Call) Run(run func()) *MockEOperation_GetEParameters_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEOperation_GetEParameters_Call) Return(eParameters EList) *MockEOperation_GetEParameters_Call {
	c.Call.Return(eParameters)
	return c
}

// GetOperationID get the value of operationID
func (eOperation *MockEOperation_Prototype) GetOperationID() int {
	ret := eOperation.Called()

	var r int
	if rf, ok := ret.Get(0).(func() int); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(int)
		}
	}

	return r
}

type MockEOperation_GetOperationID_Call struct {
	*mock.Call
}

func (e *MockEOperation_Expecter) GetOperationID() *MockEOperation_GetOperationID_Call {
	return &MockEOperation_GetOperationID_Call{Call: e.Mock.On("GetOperationID")}
}

func (c *MockEOperation_GetOperationID_Call) Run(run func()) *MockEOperation_GetOperationID_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEOperation_GetOperationID_Call) Return(operationID int) *MockEOperation_GetOperationID_Call {
	c.Call.Return(operationID)
	return c
}

// SetOperationID provides mock implementation for setting the value of operationID
func (eOperation *MockEOperation_Prototype) SetOperationID(operationID int) {
	eOperation.Called(operationID)
}

type MockEOperation_SetOperationID_Call struct {
	*mock.Call
}

// SetOperationIDis a helper method to define mock.On call
// - operationID int
func (e *MockEOperation_Expecter) SetOperationID(operationID any) *MockEOperation_SetOperationID_Call {
	return &MockEOperation_SetOperationID_Call{Call: e.Mock.On("SetOperationID", operationID)}
}

func (c *MockEOperation_SetOperationID_Call) Run(run func(operationID int)) *MockEOperation_SetOperationID_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return c
}

func (c *MockEOperation_SetOperationID_Call) Return() *MockEOperation_SetOperationID_Call {
	c.Call.Return()
	return c
}

// IsOverrideOf provides mock implementation
func (eOperation *MockEOperation_Prototype) IsOverrideOf(someOperation EOperation) bool {
	ret := eOperation.Called(someOperation)

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

type MockEOperation_IsOverrideOf_Call struct {
	*mock.Call
}

// IsOverrideOfis a helper method to define mock.On call
// - someOperation EOperation
func (e *MockEOperation_Expecter) IsOverrideOf(someOperation any) *MockEOperation_IsOverrideOf_Call {
	return &MockEOperation_IsOverrideOf_Call{Call: e.Mock.On("IsOverrideOf", someOperation)}
}

func (c *MockEOperation_IsOverrideOf_Call) Run(run func(EOperation)) *MockEOperation_IsOverrideOf_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EOperation))
	})
	return c
}

func (c *MockEOperation_IsOverrideOf_Call) Return(_a0 bool) *MockEOperation_IsOverrideOf_Call {
	c.Call.Return(_a0)
	return c
}

type mockConstructorTestingTNewMockEOperation interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEOperation creates a new instance of MockEOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEOperation(t mockConstructorTestingTNewMockEOperation) *MockEOperation {
	mock := &MockEOperation{}
	mock.MockEOperation_Prototype.Mock = &mock.Mock
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
