// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEObjectIDManager is an autogenerated mock type for the EObjectIDManager type
type MockEObjectIDManager struct {
	mock.Mock
}

type MockEObjectIDManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEObjectIDManager) EXPECT() *MockEObjectIDManager_Expecter {
	return &MockEObjectIDManager_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields:
func (_m *MockEObjectIDManager) Clear() {
	_m.Called()
}

// MockEObjectIDManager_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockEObjectIDManager_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockEObjectIDManager_Expecter) Clear() *MockEObjectIDManager_Clear_Call {
	return &MockEObjectIDManager_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockEObjectIDManager_Clear_Call) Run(run func()) *MockEObjectIDManager_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEObjectIDManager_Clear_Call) Return() *MockEObjectIDManager_Clear_Call {
	_c.Call.Return()
	return _c
}

// GetDetachedID provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetDetachedID(_a0 EObject) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EObject) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEObjectIDManager_GetDetachedID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetachedID'
type MockEObjectIDManager_GetDetachedID_Call struct {
	*mock.Call
}

// GetDetachedID is a helper method to define mock.On call
//   - _a0 EObject
func (_e *MockEObjectIDManager_Expecter) GetDetachedID(_a0 interface{}) *MockEObjectIDManager_GetDetachedID_Call {
	return &MockEObjectIDManager_GetDetachedID_Call{Call: _e.mock.On("GetDetachedID", _a0)}
}

func (_c *MockEObjectIDManager_GetDetachedID_Call) Run(run func(_a0 EObject)) *MockEObjectIDManager_GetDetachedID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEObjectIDManager_GetDetachedID_Call) Return(_a0 interface{}) *MockEObjectIDManager_GetDetachedID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetEObject provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetEObject(_a0 interface{}) EObject {
	ret := _m.Called(_a0)

	var r0 EObject
	if rf, ok := ret.Get(0).(func(interface{}) EObject); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// MockEObjectIDManager_GetEObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEObject'
type MockEObjectIDManager_GetEObject_Call struct {
	*mock.Call
}

// GetEObject is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockEObjectIDManager_Expecter) GetEObject(_a0 interface{}) *MockEObjectIDManager_GetEObject_Call {
	return &MockEObjectIDManager_GetEObject_Call{Call: _e.mock.On("GetEObject", _a0)}
}

func (_c *MockEObjectIDManager_GetEObject_Call) Run(run func(_a0 interface{})) *MockEObjectIDManager_GetEObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEObjectIDManager_GetEObject_Call) Return(_a0 EObject) *MockEObjectIDManager_GetEObject_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetID provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetID(_a0 EObject) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EObject) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEObjectIDManager_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockEObjectIDManager_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
//   - _a0 EObject
func (_e *MockEObjectIDManager_Expecter) GetID(_a0 interface{}) *MockEObjectIDManager_GetID_Call {
	return &MockEObjectIDManager_GetID_Call{Call: _e.mock.On("GetID", _a0)}
}

func (_c *MockEObjectIDManager_GetID_Call) Run(run func(_a0 EObject)) *MockEObjectIDManager_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEObjectIDManager_GetID_Call) Return(_a0 interface{}) *MockEObjectIDManager_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

// Register provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) Register(_a0 EObject) {
	_m.Called(_a0)
}

// MockEObjectIDManager_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockEObjectIDManager_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 EObject
func (_e *MockEObjectIDManager_Expecter) Register(_a0 interface{}) *MockEObjectIDManager_Register_Call {
	return &MockEObjectIDManager_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *MockEObjectIDManager_Register_Call) Run(run func(_a0 EObject)) *MockEObjectIDManager_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEObjectIDManager_Register_Call) Return() *MockEObjectIDManager_Register_Call {
	_c.Call.Return()
	return _c
}

// SetID provides a mock function with given fields: _a0, _a1
func (_m *MockEObjectIDManager) SetID(_a0 EObject, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(EObject, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEObjectIDManager_SetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetID'
type MockEObjectIDManager_SetID_Call struct {
	*mock.Call
}

// SetID is a helper method to define mock.On call
//   - _a0 EObject
//   - _a1 interface{}
func (_e *MockEObjectIDManager_Expecter) SetID(_a0 interface{}, _a1 interface{}) *MockEObjectIDManager_SetID_Call {
	return &MockEObjectIDManager_SetID_Call{Call: _e.mock.On("SetID", _a0, _a1)}
}

func (_c *MockEObjectIDManager_SetID_Call) Run(run func(_a0 EObject, _a1 interface{})) *MockEObjectIDManager_SetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEObjectIDManager_SetID_Call) Return(_a0 error) *MockEObjectIDManager_SetID_Call {
	_c.Call.Return(_a0)
	return _c
}

// UnRegister provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) UnRegister(_a0 EObject) {
	_m.Called(_a0)
}

// MockEObjectIDManager_UnRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegister'
type MockEObjectIDManager_UnRegister_Call struct {
	*mock.Call
}

// UnRegister is a helper method to define mock.On call
//   - _a0 EObject
func (_e *MockEObjectIDManager_Expecter) UnRegister(_a0 interface{}) *MockEObjectIDManager_UnRegister_Call {
	return &MockEObjectIDManager_UnRegister_Call{Call: _e.mock.On("UnRegister", _a0)}
}

func (_c *MockEObjectIDManager_UnRegister_Call) Run(run func(_a0 EObject)) *MockEObjectIDManager_UnRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEObjectIDManager_UnRegister_Call) Return() *MockEObjectIDManager_UnRegister_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEObjectIDManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEObjectIDManager creates a new instance of MockEObjectIDManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEObjectIDManager(t mockConstructorTestingTNewMockEObjectIDManager) *MockEObjectIDManager {
	mock := &MockEObjectIDManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
