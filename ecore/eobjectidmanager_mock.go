// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEObjectIDManager is an autogenerated mock type for the EObjectIDManager type
type MockEObjectIDManager struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *MockEObjectIDManager) Clear() {
	_m.Called()
}

// GetDetachedID provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetDetachedID(_a0 EObject) any {
	ret := _m.Called(_a0)

	var r0 any
	if rf, ok := ret.Get(0).(func(EObject) any); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// GetEObject provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetEObject(_a0 any) EObject {
	ret := _m.Called(_a0)

	var r0 EObject
	if rf, ok := ret.Get(0).(func(any) EObject); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// GetID provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) GetID(_a0 EObject) any {
	ret := _m.Called(_a0)

	var r0 any
	if rf, ok := ret.Get(0).(func(EObject) any); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) Register(_a0 EObject) {
	_m.Called(_a0)
}

// SetID provides a mock function with given fields: _a0, _a1
func (_m *MockEObjectIDManager) SetID(_a0 EObject, _a1 any) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(EObject, any) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnRegister provides a mock function with given fields: _a0
func (_m *MockEObjectIDManager) UnRegister(_a0 EObject) {
	_m.Called(_a0)
}
