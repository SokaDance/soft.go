// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "reflect"

// EClassifierImpl is the implementation of the model object 'EClassifier'
type EClassifierImpl struct {
	ENamedElementImpl
	classifierID      int
	instanceClass     reflect.Type
	instanceClassName string
}
type eClassifierInitializers interface {
	initClassifierID() int
}

// newEClassifierImpl is the constructor of a EClassifierImpl
func newEClassifierImpl() *EClassifierImpl {
	eClassifier := new(EClassifierImpl)
	eClassifier.SetInterfaces(eClassifier)
	eClassifier.Initialize()
	return eClassifier
}

func (eClassifier *EClassifierImpl) Initialize() {
	eClassifier.ENamedElementImpl.Initialize()
	eClassifier.classifierID = -1
	eClassifier.instanceClass = nil
	eClassifier.instanceClassName = ""

}

func (eClassifier *EClassifierImpl) asEClassifier() EClassifier {
	return eClassifier.GetInterfaces().(EClassifier)
}

func (eClassifier *EClassifierImpl) asInitializers() eClassifierInitializers {
	return eClassifier.GetInterfaces().(eClassifierInitializers)
}

func (eClassifier *EClassifierImpl) EStaticClass() EClass {
	return GetPackage().GetEClassifierClass()
}

func (eClassifier *EClassifierImpl) EStaticFeatureCount() int {
	return ECLASSIFIER_FEATURE_COUNT
}

// IsInstance default implementation
func (eClassifier *EClassifierImpl) IsInstance(any) bool {
	panic("IsInstance not implemented")
}

// GetClassifierID get the value of classifierID
func (eClassifier *EClassifierImpl) GetClassifierID() int {
	if eClassifier.classifierID == -1 {
		eClassifier.classifierID = eClassifier.asInitializers().initClassifierID()
	}
	return eClassifier.classifierID
}

// SetClassifierID set the value of classifierID
func (eClassifier *EClassifierImpl) SetClassifierID(newClassifierID int) {
	oldClassifierID := eClassifier.classifierID
	eClassifier.classifierID = newClassifierID
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__CLASSIFIER_ID, oldClassifierID, newClassifierID, NO_INDEX))
	}
}

// GetDefaultValue get the value of defaultValue
func (eClassifier *EClassifierImpl) GetDefaultValue() any {
	panic("GetDefaultValue not implemented")
}

// GetEPackage get the value of ePackage
func (eClassifier *EClassifierImpl) GetEPackage() EPackage {
	if eClassifier.EContainerFeatureID() == ECLASSIFIER__EPACKAGE {
		return eClassifier.EContainer().(EPackage)
	}
	return nil
}

// GetInstanceClass get the value of instanceClass
func (eClassifier *EClassifierImpl) GetInstanceClass() reflect.Type {
	return eClassifier.instanceClass
}

// SetInstanceClass set the value of instanceClass
func (eClassifier *EClassifierImpl) SetInstanceClass(newInstanceClass reflect.Type) {
	oldInstanceClass := eClassifier.instanceClass
	eClassifier.instanceClass = newInstanceClass
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__INSTANCE_CLASS, oldInstanceClass, newInstanceClass, NO_INDEX))
	}
}

// GetInstanceClassName get the value of instanceClassName
func (eClassifier *EClassifierImpl) GetInstanceClassName() string {
	return eClassifier.instanceClassName
}

// SetInstanceClassName set the value of instanceClassName
func (eClassifier *EClassifierImpl) SetInstanceClassName(newInstanceClassName string) {
	oldInstanceClassName := eClassifier.instanceClassName
	eClassifier.instanceClassName = newInstanceClassName
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__INSTANCE_CLASS_NAME, oldInstanceClassName, newInstanceClassName, NO_INDEX))
	}
}

// GetInstanceTypeName get the value of instanceTypeName
func (eClassifier *EClassifierImpl) GetInstanceTypeName() string {
	panic("GetInstanceTypeName not implemented")
}

// SetInstanceTypeName set the value of instanceTypeName
func (eClassifier *EClassifierImpl) SetInstanceTypeName(newInstanceTypeName string) {
	panic("SetInstanceTypeName not implemented")
}

func (eClassifier *EClassifierImpl) initClassifierID() int {
	return -1
}

func (eClassifier *EClassifierImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		return eClassifier.asEClassifier().GetClassifierID()
	case ECLASSIFIER__DEFAULT_VALUE:
		return eClassifier.asEClassifier().GetDefaultValue()
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.asEClassifier().GetEPackage()
	case ECLASSIFIER__INSTANCE_CLASS:
		return eClassifier.asEClassifier().GetInstanceClass()
	case ECLASSIFIER__INSTANCE_CLASS_NAME:
		return eClassifier.asEClassifier().GetInstanceClassName()
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		return eClassifier.asEClassifier().GetInstanceTypeName()
	default:
		return eClassifier.ENamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (eClassifier *EClassifierImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		eClassifier.asEClassifier().SetClassifierID(newValue.(int))
	case ECLASSIFIER__INSTANCE_CLASS:
		eClassifier.asEClassifier().SetInstanceClass(newValue.(reflect.Type))
	case ECLASSIFIER__INSTANCE_CLASS_NAME:
		eClassifier.asEClassifier().SetInstanceClassName(newValue.(string))
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		eClassifier.asEClassifier().SetInstanceTypeName(newValue.(string))
	default:
		eClassifier.ENamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (eClassifier *EClassifierImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		eClassifier.asEClassifier().SetClassifierID(-1)
	case ECLASSIFIER__INSTANCE_CLASS:
		eClassifier.asEClassifier().SetInstanceClass(nil)
	case ECLASSIFIER__INSTANCE_CLASS_NAME:
		eClassifier.asEClassifier().SetInstanceClassName("")
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		eClassifier.asEClassifier().SetInstanceTypeName("")
	default:
		eClassifier.ENamedElementImpl.EUnsetFromID(featureID)
	}
}

func (eClassifier *EClassifierImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		return eClassifier.classifierID != -1
	case ECLASSIFIER__DEFAULT_VALUE:
		return eClassifier.asEClassifier().GetDefaultValue() != nil
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.asEClassifier().GetEPackage() != nil
	case ECLASSIFIER__INSTANCE_CLASS:
		return eClassifier.instanceClass != nil
	case ECLASSIFIER__INSTANCE_CLASS_NAME:
		return eClassifier.instanceClassName != ""
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		return eClassifier.asEClassifier().GetInstanceTypeName() != ""
	default:
		return eClassifier.ENamedElementImpl.EIsSetFromID(featureID)
	}
}

func (eClassifier *EClassifierImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case ECLASSIFIER__IS_INSTANCE_EJAVAOBJECT:
		return eClassifier.asEClassifier().IsInstance(arguments.Get(0))
	default:
		return eClassifier.ENamedElementImpl.EInvokeFromID(operationID, arguments)
	}
}

func (eClassifier *EClassifierImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASSIFIER__EPACKAGE:
		msgs := notifications
		if eClassifier.EInternalContainer() != nil {
			msgs = eClassifier.EBasicRemoveFromContainer(msgs)
		}
		return eClassifier.EBasicSetContainer(otherEnd, ECLASSIFIER__EPACKAGE, msgs)
	default:
		return eClassifier.ENamedElementImpl.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eClassifier *EClassifierImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.EBasicSetContainer(nil, ECLASSIFIER__EPACKAGE, notifications)
	default:
		return eClassifier.ENamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
