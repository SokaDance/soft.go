// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEModelElement struct {
	mock.Mock
	MockEModelElement_Prototype
}

type MockEModelElement_Prototype struct {
	mock *mock.Mock
	MockEObjectInternal_Prototype
	MockEModelElement_Declared_Prototype
}

func (_mp *MockEModelElement_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
	_mp.MockEObjectInternal_Prototype.SetMock(mock)
	_mp.MockEModelElement_Declared_Prototype.SetMock(mock)
}

type MockEModelElement_Expecter struct {
	MockEObjectInternal_Expecter
	MockEModelElement_Declared_Expecter
}

func (_me *MockEModelElement_Expecter) SetMock(mock *mock.Mock) {
	_me.MockEObjectInternal_Expecter.SetMock(mock)
	_me.MockEModelElement_Declared_Expecter.SetMock(mock)
}

func (eModelElement *MockEModelElement_Prototype) EXPECT() *MockEModelElement_Expecter {
	expecter := &MockEModelElement_Expecter{}
	expecter.SetMock(eModelElement.mock)
	return expecter
}

type MockEModelElement_Declared_Prototype struct {
	mock *mock.Mock
}

func (_mdp *MockEModelElement_Declared_Prototype) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

type MockEModelElement_Declared_Expecter struct {
	mock *mock.Mock
}

func (_mde *MockEModelElement_Declared_Expecter) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}

// GetEAnnotations get the value of eAnnotations
func (eModelElement *MockEModelElement_Declared_Prototype) GetEAnnotations() EList {
	ret := eModelElement.mock.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEModelElement_GetEAnnotations_Call struct {
	*mock.Call
}

func (e *MockEModelElement_Declared_Expecter) GetEAnnotations() *MockEModelElement_GetEAnnotations_Call {
	return &MockEModelElement_GetEAnnotations_Call{Call: e.mock.On("GetEAnnotations")}
}

func (c *MockEModelElement_GetEAnnotations_Call) Run(run func()) *MockEModelElement_GetEAnnotations_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEModelElement_GetEAnnotations_Call) Return(eAnnotations EList) *MockEModelElement_GetEAnnotations_Call {
	c.Call.Return(eAnnotations)
	return c
}

// GetEAnnotation provides mock implementation
func (eModelElement *MockEModelElement_Declared_Prototype) GetEAnnotation(source string) EAnnotation {
	ret := eModelElement.mock.Called(source)

	var r EAnnotation
	if rf, ok := ret.Get(0).(func() EAnnotation); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EAnnotation)
		}
	}

	return r
}

type MockEModelElement_GetEAnnotation_Call struct {
	*mock.Call
}

// GetEAnnotation is a helper method to define mock.On call
// - source string
func (e *MockEModelElement_Declared_Expecter) GetEAnnotation(source any) *MockEModelElement_GetEAnnotation_Call {
	return &MockEModelElement_GetEAnnotation_Call{Call: e.mock.On("GetEAnnotation", source)}
}

func (c *MockEModelElement_GetEAnnotation_Call) Run(run func(string)) *MockEModelElement_GetEAnnotation_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(string))
	})
	return c
}

func (c *MockEModelElement_GetEAnnotation_Call) Return(_a0 EAnnotation) *MockEModelElement_GetEAnnotation_Call {
	c.Call.Return(_a0)
	return c
}

type mockConstructorTestingTNewMockEModelElement interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEModelElement creates a new instance of MockEModelElement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEModelElement(t mockConstructorTestingTNewMockEModelElement) *MockEModelElement {
	mock := &MockEModelElement{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
