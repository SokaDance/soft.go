// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EEnumImpl is the implementation of the model object 'EEnum'
type EEnumImpl struct {
	EDataTypeExt
	eLiterals EList
}
type eEnumInitializers interface {
	initELiterals() EList
}

// newEEnumImpl is the constructor of a EEnumImpl
func newEEnumImpl() *EEnumImpl {
	eEnum := new(EEnumImpl)
	eEnum.SetInterfaces(eEnum)
	eEnum.Initialize()
	return eEnum
}

func (eEnum *EEnumImpl) Initialize() {
	eEnum.EDataTypeExt.Initialize()

}

func (eEnum *EEnumImpl) asEEnum() EEnum {
	return eEnum.GetInterfaces().(EEnum)
}

func (eEnum *EEnumImpl) asInitializers() eEnumInitializers {
	return eEnum.GetInterfaces().(eEnumInitializers)
}

func (eEnum *EEnumImpl) EStaticClass() EClass {
	return GetPackage().GetEEnum()
}

func (eEnum *EEnumImpl) EStaticFeatureCount() int {
	return EENUM_FEATURE_COUNT
}

// GetEEnumLiteralByLiteral default implementation
func (eEnum *EEnumImpl) GetEEnumLiteralByLiteral(string) EEnumLiteral {
	panic("GetEEnumLiteralByLiteral not implemented")
}

// GetEEnumLiteralByName default implementation
func (eEnum *EEnumImpl) GetEEnumLiteralByName(string) EEnumLiteral {
	panic("GetEEnumLiteralByName not implemented")
}

// GetEEnumLiteralByValue default implementation
func (eEnum *EEnumImpl) GetEEnumLiteralByValue(int) EEnumLiteral {
	panic("GetEEnumLiteralByValue not implemented")
}

// GetELiterals get the value of eLiterals
func (eEnum *EEnumImpl) GetELiterals() EList {
	if eEnum.eLiterals == nil {
		eEnum.eLiterals = eEnum.asInitializers().initELiterals()
	}
	return eEnum.eLiterals
}

func (eEnum *EEnumImpl) initELiterals() EList {
	return NewBasicEObjectList(eEnum.AsEObjectInternal(), EENUM__ELITERALS, EENUM_LITERAL__EENUM, true, true, true, false, false)
}

func (eEnum *EEnumImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EENUM__ELITERALS:
		return eEnum.asEEnum().GetELiterals()
	default:
		return eEnum.EDataTypeExt.EGetFromID(featureID, resolve)
	}
}

func (eEnum *EEnumImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EENUM__ELITERALS:
		list := eEnum.asEEnum().GetELiterals()
		list.Clear()
		list.AddAll(newValue.(EList))
	default:
		eEnum.EDataTypeExt.ESetFromID(featureID, newValue)
	}
}

func (eEnum *EEnumImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EENUM__ELITERALS:
		eEnum.asEEnum().GetELiterals().Clear()
	default:
		eEnum.EDataTypeExt.EUnsetFromID(featureID)
	}
}

func (eEnum *EEnumImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EENUM__ELITERALS:
		return eEnum.eLiterals != nil && eEnum.eLiterals.Size() != 0
	default:
		return eEnum.EDataTypeExt.EIsSetFromID(featureID)
	}
}

func (eEnum *EEnumImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case EENUM__GET_EENUM_LITERAL_BY_LITERAL_ESTRING:
		return eEnum.asEEnum().GetEEnumLiteralByLiteral(arguments.Get(0).(string))
	case EENUM__GET_EENUM_LITERAL_ESTRING:
		return eEnum.asEEnum().GetEEnumLiteralByName(arguments.Get(0).(string))
	case EENUM__GET_EENUM_LITERAL_EINT:
		return eEnum.asEEnum().GetEEnumLiteralByValue(arguments.Get(0).(int))
	default:
		return eEnum.EDataTypeExt.EInvokeFromID(operationID, arguments)
	}
}

func (eEnum *EEnumImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EENUM__ELITERALS:
		list := eEnum.GetELiterals().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	default:
		return eEnum.EDataTypeExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eEnum *EEnumImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EENUM__ELITERALS:
		list := eEnum.GetELiterals().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return eEnum.EDataTypeExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
