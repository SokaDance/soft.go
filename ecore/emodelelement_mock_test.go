// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEModelElement() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEModelElementRun struct {
	mock.Mock
}

func (m *mockEModelElementRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEModelElementRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEModelElementRun creates a new instance of mockEModelElementRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEModelElementRun(t mockConstructorTestingTmockEModelElementRun, args ...any) *mockEModelElementRun {
	mock := &mockEModelElementRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEModelElementGetEAnnotations tests method GetEAnnotations
func TestMockEModelElementGetEAnnotations(t *testing.T) {
	o := &MockEModelElement{}
	l := &MockEList{}
	m := newMockEModelElementRun(t)
	o.EXPECT().GetEAnnotations().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAnnotations().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAnnotations())
	assert.Equal(t, l, o.GetEAnnotations())
}

// TestMockEModelElementGetEAnnotation tests method GetEAnnotation
func TestMockEModelElementGetEAnnotation(t *testing.T) {
	o := &MockEModelElement{}
	source := string("Test String")
	m := newMockEModelElementRun(t, source)
	r := new(MockEAnnotation)
	o.EXPECT().GetEAnnotation(source).Run(func(source string) { m.Run(source) }).Return(r).Once()
	o.EXPECT().GetEAnnotation(source).Once().Return(func() EAnnotation {
		return r
	})
	assert.Equal(t, r, o.GetEAnnotation(source))
	assert.Equal(t, r, o.GetEAnnotation(source))
	o.AssertExpectations(t)
}
