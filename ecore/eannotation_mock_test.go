// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "github.com/stretchr/testify/assert"
import "testing"

func discardMockEAnnotation() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEAnnotationGetContents tests method GetContents
func TestMockEAnnotationGetContents(t *testing.T) {
	o := NewMockEAnnotation(t)
	l := NewMockEList(t)
	m := NewMockRun(t)
	o.EXPECT().GetContents().Return(l).Run(func() { m.Run() }).Once()
	o.EXPECT().GetContents().Call.Return(func() EList { return l }).Once()
	assert.Equal(t, l, o.GetContents())
	assert.Equal(t, l, o.GetContents())
}

// TestMockEAnnotationGetDetails tests method GetDetails
func TestMockEAnnotationGetDetails(t *testing.T) {
	o := NewMockEAnnotation(t)
	l := NewMockEMap(t)
	m := NewMockRun(t)
	o.EXPECT().GetDetails().Return(l).Run(func() { m.Run() }).Once()
	o.EXPECT().GetDetails().Call.Return(func() EMap { return l }).Once()
	assert.Equal(t, l, o.GetDetails())
	assert.Equal(t, l, o.GetDetails())
}

// TestMockEAnnotationGetEModelElement tests method GetEModelElement
func TestMockEAnnotationGetEModelElement(t *testing.T) {
	o := NewMockEAnnotation(t)
	r := NewMockEModelElement(t)
	m := NewMockRun(t)
	o.EXPECT().GetEModelElement().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetEModelElement().Call.Return(func() EModelElement { return r }).Once()
	assert.Equal(t, r, o.GetEModelElement())
	assert.Equal(t, r, o.GetEModelElement())
}

// TestMockEAnnotationSetEModelElement tests method SetEModelElement
func TestMockEAnnotationSetEModelElement(t *testing.T) {
	o := NewMockEAnnotation(t)
	v := NewMockEModelElement(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetEModelElement(v).Return().Run(func(_p0 EModelElement) { m.Run(_p0) }).Once()
	o.SetEModelElement(v)
}

// TestMockEAnnotationGetReferences tests method GetReferences
func TestMockEAnnotationGetReferences(t *testing.T) {
	o := NewMockEAnnotation(t)
	l := NewMockEList(t)
	m := NewMockRun(t)
	o.EXPECT().GetReferences().Return(l).Run(func() { m.Run() }).Once()
	o.EXPECT().GetReferences().Call.Return(func() EList { return l }).Once()
	assert.Equal(t, l, o.GetReferences())
	assert.Equal(t, l, o.GetReferences())
}

// TestMockEAnnotationGetSource tests method GetSource
func TestMockEAnnotationGetSource(t *testing.T) {
	o := NewMockEAnnotation(t)
	r := string("Test String")
	m := NewMockRun(t)
	o.EXPECT().GetSource().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetSource().Call.Return(func() string { return r }).Once()
	assert.Equal(t, r, o.GetSource())
	assert.Equal(t, r, o.GetSource())
}

// TestMockEAnnotationSetSource tests method SetSource
func TestMockEAnnotationSetSource(t *testing.T) {
	o := NewMockEAnnotation(t)
	v := string("Test String")
	m := NewMockRun(t, v)
	o.EXPECT().SetSource(v).Return().Run(func(_p0 string) { m.Run(_p0) }).Once()
	o.SetSource(v)
}
