// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEAnnotation() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEAnnotationRun struct {
	mock.Mock
}

func (m *mockEAnnotationRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEAnnotationRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEAnnotationRun creates a new instance of mockEAnnotationRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEAnnotationRun(t mockConstructorTestingTmockEAnnotationRun, args ...any) *mockEAnnotationRun {
	mock := &mockEAnnotationRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEAnnotationGetContents tests method GetContents
func TestMockEAnnotationGetContents(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEList{}
	m := newMockEAnnotationRun(t)
	o.EXPECT().GetContents().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetContents().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetContents())
	assert.Equal(t, l, o.GetContents())
}

// TestMockEAnnotationGetDetails tests method GetDetails
func TestMockEAnnotationGetDetails(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEMap{}
	m := newMockEAnnotationRun(t)
	o.EXPECT().GetDetails().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetDetails().Once().Return(func() EMap { return l })
	assert.Equal(t, l, o.GetDetails())
	assert.Equal(t, l, o.GetDetails())
}

// TestMockEAnnotationGetEModelElement tests method GetEModelElement
func TestMockEAnnotationGetEModelElement(t *testing.T) {
	o := NewMockEAnnotation(t)
	r := new(MockEModelElement)
	m := newMockEAnnotationRun(t)
	o.EXPECT().GetEModelElement().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEModelElement().Once().Return(func() EModelElement { return r })
	assert.Equal(t, r, o.GetEModelElement())
	assert.Equal(t, r, o.GetEModelElement())
}

// TestMockEAnnotationSetEModelElement tests method SetEModelElement
func TestMockEAnnotationSetEModelElement(t *testing.T) {
	o := NewMockEAnnotation(t)
	v := new(MockEModelElement)
	m := newMockEAnnotationRun(t, v)
	o.EXPECT().SetEModelElement(v).Run(func(_p0 EModelElement) { m.Run(_p0) }).Once()
	o.SetEModelElement(v)
}

// TestMockEAnnotationGetReferences tests method GetReferences
func TestMockEAnnotationGetReferences(t *testing.T) {
	o := &MockEAnnotation{}
	l := &MockEList{}
	m := newMockEAnnotationRun(t)
	o.EXPECT().GetReferences().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetReferences().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetReferences())
	assert.Equal(t, l, o.GetReferences())
}

// TestMockEAnnotationGetSource tests method GetSource
func TestMockEAnnotationGetSource(t *testing.T) {
	o := NewMockEAnnotation(t)
	r := string("Test String")
	m := newMockEAnnotationRun(t)
	o.EXPECT().GetSource().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetSource().Once().Return(func() string { return r })
	assert.Equal(t, r, o.GetSource())
	assert.Equal(t, r, o.GetSource())
}

// TestMockEAnnotationSetSource tests method SetSource
func TestMockEAnnotationSetSource(t *testing.T) {
	o := NewMockEAnnotation(t)
	v := string("Test String")
	m := newMockEAnnotationRun(t, v)
	o.EXPECT().SetSource(v).Run(func(_p0 string) { m.Run(_p0) }).Once()
	o.SetSource(v)
}
