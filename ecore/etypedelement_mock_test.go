// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockETypedElement() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockETypedElementRun struct {
	mock.Mock
}

func (m *mockETypedElementRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockETypedElementRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockETypedElementRun creates a new instance of mockETypedElementRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockETypedElementRun(t mockConstructorTestingTmockETypedElementRun, args ...any) *mockETypedElementRun {
	mock := &mockETypedElementRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockETypedElementGetEType tests method GetEType
func TestMockETypedElementGetEType(t *testing.T) {
	o := NewMockETypedElement(t)
	r := new(MockEClassifier)
	m := newMockETypedElementRun(t)
	o.EXPECT().GetEType().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEType().Once().Return(func() EClassifier { return r })
	assert.Equal(t, r, o.GetEType())
	assert.Equal(t, r, o.GetEType())
}

// TestMockETypedElementSetEType tests method SetEType
func TestMockETypedElementSetEType(t *testing.T) {
	o := NewMockETypedElement(t)
	v := new(MockEClassifier)
	m := newMockETypedElementRun(t, v)
	o.EXPECT().SetEType(v).Run(func(_p0 EClassifier) { m.Run(_p0) }).Once()
	o.SetEType(v)
}

// TestMockETypedElementUnsetEType tests method UnsetEType
func TestMockETypedElementUnsetEType(t *testing.T) {
	o := NewMockETypedElement(t)
	m := newMockETypedElementRun(t)
	o.EXPECT().UnsetEType().Run(func() { m.Run() }).Once()
	o.UnsetEType()
}

// TestMockETypedElementGetLowerBound tests method GetLowerBound
func TestMockETypedElementGetLowerBound(t *testing.T) {
	o := NewMockETypedElement(t)
	r := int(45)
	m := newMockETypedElementRun(t)
	o.EXPECT().GetLowerBound().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetLowerBound().Once().Return(func() int { return r })
	assert.Equal(t, r, o.GetLowerBound())
	assert.Equal(t, r, o.GetLowerBound())
}

// TestMockETypedElementSetLowerBound tests method SetLowerBound
func TestMockETypedElementSetLowerBound(t *testing.T) {
	o := NewMockETypedElement(t)
	v := int(45)
	m := newMockETypedElementRun(t, v)
	o.EXPECT().SetLowerBound(v).Run(func(_p0 int) { m.Run(_p0) }).Once()
	o.SetLowerBound(v)
}

// TestMockETypedElementIsMany tests method IsMany
func TestMockETypedElementIsMany(t *testing.T) {
	o := NewMockETypedElement(t)
	r := bool(true)
	m := newMockETypedElementRun(t)
	o.EXPECT().IsMany().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsMany().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsMany())
	assert.Equal(t, r, o.IsMany())
}

// TestMockETypedElementIsOrdered tests method IsOrdered
func TestMockETypedElementIsOrdered(t *testing.T) {
	o := NewMockETypedElement(t)
	r := bool(true)
	m := newMockETypedElementRun(t)
	o.EXPECT().IsOrdered().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsOrdered().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsOrdered())
	assert.Equal(t, r, o.IsOrdered())
}

// TestMockETypedElementSetOrdered tests method SetOrdered
func TestMockETypedElementSetOrdered(t *testing.T) {
	o := NewMockETypedElement(t)
	v := bool(true)
	m := newMockETypedElementRun(t, v)
	o.EXPECT().SetOrdered(v).Run(func(_p0 bool) { m.Run(_p0) }).Once()
	o.SetOrdered(v)
}

// TestMockETypedElementIsRequired tests method IsRequired
func TestMockETypedElementIsRequired(t *testing.T) {
	o := NewMockETypedElement(t)
	r := bool(true)
	m := newMockETypedElementRun(t)
	o.EXPECT().IsRequired().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsRequired().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsRequired())
	assert.Equal(t, r, o.IsRequired())
}

// TestMockETypedElementIsUnique tests method IsUnique
func TestMockETypedElementIsUnique(t *testing.T) {
	o := NewMockETypedElement(t)
	r := bool(true)
	m := newMockETypedElementRun(t)
	o.EXPECT().IsUnique().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsUnique().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsUnique())
	assert.Equal(t, r, o.IsUnique())
}

// TestMockETypedElementSetUnique tests method SetUnique
func TestMockETypedElementSetUnique(t *testing.T) {
	o := NewMockETypedElement(t)
	v := bool(true)
	m := newMockETypedElementRun(t, v)
	o.EXPECT().SetUnique(v).Run(func(_p0 bool) { m.Run(_p0) }).Once()
	o.SetUnique(v)
}

// TestMockETypedElementGetUpperBound tests method GetUpperBound
func TestMockETypedElementGetUpperBound(t *testing.T) {
	o := NewMockETypedElement(t)
	r := int(45)
	m := newMockETypedElementRun(t)
	o.EXPECT().GetUpperBound().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetUpperBound().Once().Return(func() int { return r })
	assert.Equal(t, r, o.GetUpperBound())
	assert.Equal(t, r, o.GetUpperBound())
}

// TestMockETypedElementSetUpperBound tests method SetUpperBound
func TestMockETypedElementSetUpperBound(t *testing.T) {
	o := NewMockETypedElement(t)
	v := int(45)
	m := newMockETypedElementRun(t, v)
	o.EXPECT().SetUpperBound(v).Run(func(_p0 int) { m.Run(_p0) }).Once()
	o.SetUpperBound(v)
}
