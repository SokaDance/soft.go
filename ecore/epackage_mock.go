// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEPackage struct {
	MockENamedElement
}

type MockEPackage_Expecter struct {
	MockENamedElement_Expecter
}

func (ePackage *MockEPackage) EXPECT() *MockEPackage_Expecter {
	e := &MockEPackage_Expecter{}
	e.Mock = &ePackage.Mock
	return e
}

// GetEClassifiers get the value of eClassifiers
func (ePackage *MockEPackage) GetEClassifiers() EList {
	ret := ePackage.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEPackage_GetEClassifiers_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetEClassifiers() *MockEPackage_GetEClassifiers_Call {
	return &MockEPackage_GetEClassifiers_Call{Call: e.Mock.On("GetEClassifiers")}
}

func (c *MockEPackage_GetEClassifiers_Call) Run(run func()) *MockEPackage_GetEClassifiers_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetEClassifiers_Call) Return(eClassifiers EList) *MockEPackage_GetEClassifiers_Call {
	c.Call.Return(eClassifiers)
	return c
}

// GetEFactoryInstance get the value of eFactoryInstance
func (ePackage *MockEPackage) GetEFactoryInstance() EFactory {
	ret := ePackage.Called()

	var r EFactory
	if rf, ok := ret.Get(0).(func() EFactory); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EFactory)
		}
	}

	return r
}

type MockEPackage_GetEFactoryInstance_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetEFactoryInstance() *MockEPackage_GetEFactoryInstance_Call {
	return &MockEPackage_GetEFactoryInstance_Call{Call: e.Mock.On("GetEFactoryInstance")}
}

func (c *MockEPackage_GetEFactoryInstance_Call) Run(run func()) *MockEPackage_GetEFactoryInstance_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetEFactoryInstance_Call) Return(eFactoryInstance EFactory) *MockEPackage_GetEFactoryInstance_Call {
	c.Call.Return(eFactoryInstance)
	return c
}

// SetEFactoryInstance provides mock implementation for setting the value of eFactoryInstance
func (ePackage *MockEPackage) SetEFactoryInstance(eFactoryInstance EFactory) {
	ePackage.Called(eFactoryInstance)
}

type MockEPackage_SetEFactoryInstance_Call struct {
	*mock.Call
}

// SetEFactoryInstanceis a helper method to define mock.On call
// - eFactoryInstance EFactory
func (e *MockEPackage_Expecter) SetEFactoryInstance(eFactoryInstance any) *MockEPackage_SetEFactoryInstance_Call {
	return &MockEPackage_SetEFactoryInstance_Call{Call: e.Mock.On("SetEFactoryInstance", eFactoryInstance)}
}

func (c *MockEPackage_SetEFactoryInstance_Call) Run(run func(eFactoryInstance EFactory)) *MockEPackage_SetEFactoryInstance_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EFactory))
	})
	return c
}

func (c *MockEPackage_SetEFactoryInstance_Call) Return() *MockEPackage_SetEFactoryInstance_Call {
	c.Call.Return()
	return c
}

// GetESubPackages get the value of eSubPackages
func (ePackage *MockEPackage) GetESubPackages() EList {
	ret := ePackage.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEPackage_GetESubPackages_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetESubPackages() *MockEPackage_GetESubPackages_Call {
	return &MockEPackage_GetESubPackages_Call{Call: e.Mock.On("GetESubPackages")}
}

func (c *MockEPackage_GetESubPackages_Call) Run(run func()) *MockEPackage_GetESubPackages_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetESubPackages_Call) Return(eSubPackages EList) *MockEPackage_GetESubPackages_Call {
	c.Call.Return(eSubPackages)
	return c
}

// GetESuperPackage get the value of eSuperPackage
func (ePackage *MockEPackage) GetESuperPackage() EPackage {
	ret := ePackage.Called()

	var r EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EPackage)
		}
	}

	return r
}

type MockEPackage_GetESuperPackage_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetESuperPackage() *MockEPackage_GetESuperPackage_Call {
	return &MockEPackage_GetESuperPackage_Call{Call: e.Mock.On("GetESuperPackage")}
}

func (c *MockEPackage_GetESuperPackage_Call) Run(run func()) *MockEPackage_GetESuperPackage_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetESuperPackage_Call) Return(eSuperPackage EPackage) *MockEPackage_GetESuperPackage_Call {
	c.Call.Return(eSuperPackage)
	return c
}

// GetNsPrefix get the value of nsPrefix
func (ePackage *MockEPackage) GetNsPrefix() string {
	ret := ePackage.Called()

	var r string
	if rf, ok := ret.Get(0).(func() string); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(string)
		}
	}

	return r
}

type MockEPackage_GetNsPrefix_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetNsPrefix() *MockEPackage_GetNsPrefix_Call {
	return &MockEPackage_GetNsPrefix_Call{Call: e.Mock.On("GetNsPrefix")}
}

func (c *MockEPackage_GetNsPrefix_Call) Run(run func()) *MockEPackage_GetNsPrefix_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetNsPrefix_Call) Return(nsPrefix string) *MockEPackage_GetNsPrefix_Call {
	c.Call.Return(nsPrefix)
	return c
}

// SetNsPrefix provides mock implementation for setting the value of nsPrefix
func (ePackage *MockEPackage) SetNsPrefix(nsPrefix string) {
	ePackage.Called(nsPrefix)
}

type MockEPackage_SetNsPrefix_Call struct {
	*mock.Call
}

// SetNsPrefixis a helper method to define mock.On call
// - nsPrefix string
func (e *MockEPackage_Expecter) SetNsPrefix(nsPrefix any) *MockEPackage_SetNsPrefix_Call {
	return &MockEPackage_SetNsPrefix_Call{Call: e.Mock.On("SetNsPrefix", nsPrefix)}
}

func (c *MockEPackage_SetNsPrefix_Call) Run(run func(nsPrefix string)) *MockEPackage_SetNsPrefix_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return c
}

func (c *MockEPackage_SetNsPrefix_Call) Return() *MockEPackage_SetNsPrefix_Call {
	c.Call.Return()
	return c
}

// GetNsURI get the value of nsURI
func (ePackage *MockEPackage) GetNsURI() string {
	ret := ePackage.Called()

	var r string
	if rf, ok := ret.Get(0).(func() string); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(string)
		}
	}

	return r
}

type MockEPackage_GetNsURI_Call struct {
	*mock.Call
}

func (e *MockEPackage_Expecter) GetNsURI() *MockEPackage_GetNsURI_Call {
	return &MockEPackage_GetNsURI_Call{Call: e.Mock.On("GetNsURI")}
}

func (c *MockEPackage_GetNsURI_Call) Run(run func()) *MockEPackage_GetNsURI_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEPackage_GetNsURI_Call) Return(nsURI string) *MockEPackage_GetNsURI_Call {
	c.Call.Return(nsURI)
	return c
}

// SetNsURI provides mock implementation for setting the value of nsURI
func (ePackage *MockEPackage) SetNsURI(nsURI string) {
	ePackage.Called(nsURI)
}

type MockEPackage_SetNsURI_Call struct {
	*mock.Call
}

// SetNsURIis a helper method to define mock.On call
// - nsURI string
func (e *MockEPackage_Expecter) SetNsURI(nsURI any) *MockEPackage_SetNsURI_Call {
	return &MockEPackage_SetNsURI_Call{Call: e.Mock.On("SetNsURI", nsURI)}
}

func (c *MockEPackage_SetNsURI_Call) Run(run func(nsURI string)) *MockEPackage_SetNsURI_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return c
}

func (c *MockEPackage_SetNsURI_Call) Return() *MockEPackage_SetNsURI_Call {
	c.Call.Return()
	return c
}

// GetEClassifier provides mock implementation
func (ePackage *MockEPackage) GetEClassifier(name string) EClassifier {
	ret := ePackage.Called(name)

	var r EClassifier
	if rf, ok := ret.Get(0).(func() EClassifier); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClassifier)
		}
	}

	return r
}

type MockEPackage_GetEClassifier_Call struct {
	*mock.Call
}

// GetEClassifieris a helper method to define mock.On call
// - name string
func (e *MockEPackage_Expecter) GetEClassifier(name any) *MockEPackage_GetEClassifier_Call {
	return &MockEPackage_GetEClassifier_Call{Call: e.Mock.On("GetEClassifier", name)}
}

func (c *MockEPackage_GetEClassifier_Call) Run(run func(string)) *MockEPackage_GetEClassifier_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(string))
	})
	return c
}

func (c *MockEPackage_GetEClassifier_Call) Return(_a0 EClassifier) *MockEPackage_GetEClassifier_Call {
	c.Call.Return(_a0)
	return c
}

type mockConstructorTestingTNewMockEPackage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEPackage creates a new instance of MockEPackage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEPackage(t mockConstructorTestingTNewMockEPackage) *MockEPackage {
	mock := &MockEPackage{}
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
