// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EStringToStringMapEntryImpl is the implementation of the model object 'EStringToStringMapEntry'
type EStringToStringMapEntryImpl struct {
	CompactEObjectContainer
	key   string
	value string
}

// newEStringToStringMapEntryImpl is the constructor of a EStringToStringMapEntryImpl
func newEStringToStringMapEntryImpl() *EStringToStringMapEntryImpl {
	e := new(EStringToStringMapEntryImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EStringToStringMapEntryImpl) Initialize() {
	e.CompactEObjectContainer.Initialize()
	e.key = ""
	e.value = ""

}

func (e *EStringToStringMapEntryImpl) asEStringToStringMapEntry() EStringToStringMapEntry {
	return e.GetInterfaces().(EStringToStringMapEntry)
}

func (e *EStringToStringMapEntryImpl) EStaticClass() EClass {
	return GetPackage().GetEStringToStringMapEntry()
}

func (e *EStringToStringMapEntryImpl) EStaticFeatureCount() int {
	return ESTRING_TO_STRING_MAP_ENTRY_FEATURE_COUNT
}
func (e *EStringToStringMapEntryImpl) GetKey() any {
	return e.GetTypedKey()
}

func (e *EStringToStringMapEntryImpl) SetKey(key any) {
	e.SetTypedKey(key.(string))
}

func (e *EStringToStringMapEntryImpl) GetValue() any {
	return e.GetTypedValue()
}

func (e *EStringToStringMapEntryImpl) SetValue(value any) {
	e.SetTypedValue(value.(string))
}

// GetTypedKey get the value of key
func (e *EStringToStringMapEntryImpl) GetTypedKey() string {
	return e.key
}

// SetTypedKey set the value of key
func (e *EStringToStringMapEntryImpl) SetTypedKey(newKey string) {
	oldKey := e.key
	e.key = newKey
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ESTRING_TO_STRING_MAP_ENTRY__KEY, oldKey, newKey, NO_INDEX))
	}
}

// GetTypedValue get the value of value
func (e *EStringToStringMapEntryImpl) GetTypedValue() string {
	return e.value
}

// SetTypedValue set the value of value
func (e *EStringToStringMapEntryImpl) SetTypedValue(newValue string) {
	oldValue := e.value
	e.value = newValue
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ESTRING_TO_STRING_MAP_ENTRY__VALUE, oldValue, newValue, NO_INDEX))
	}
}

func (e *EStringToStringMapEntryImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ESTRING_TO_STRING_MAP_ENTRY__KEY:
		return e.asEStringToStringMapEntry().GetTypedKey()
	case ESTRING_TO_STRING_MAP_ENTRY__VALUE:
		return e.asEStringToStringMapEntry().GetTypedValue()
	default:
		return e.CompactEObjectContainer.EGetFromID(featureID, resolve)
	}
}

func (e *EStringToStringMapEntryImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ESTRING_TO_STRING_MAP_ENTRY__KEY:
		e.asEStringToStringMapEntry().SetTypedKey(newValue.(string))
	case ESTRING_TO_STRING_MAP_ENTRY__VALUE:
		e.asEStringToStringMapEntry().SetTypedValue(newValue.(string))
	default:
		e.CompactEObjectContainer.ESetFromID(featureID, newValue)
	}
}

func (e *EStringToStringMapEntryImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ESTRING_TO_STRING_MAP_ENTRY__KEY:
		e.asEStringToStringMapEntry().SetTypedKey("")
	case ESTRING_TO_STRING_MAP_ENTRY__VALUE:
		e.asEStringToStringMapEntry().SetTypedValue("")
	default:
		e.CompactEObjectContainer.EUnsetFromID(featureID)
	}
}

func (e *EStringToStringMapEntryImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ESTRING_TO_STRING_MAP_ENTRY__KEY:
		return e.key != ""
	case ESTRING_TO_STRING_MAP_ENTRY__VALUE:
		return e.value != ""
	default:
		return e.CompactEObjectContainer.EIsSetFromID(featureID)
	}
}
