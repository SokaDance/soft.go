// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEEnum struct {
	MockEDataType
}

type MockEEnum_Expecter struct {
	MockEDataType_Expecter
}

func (eEnum *MockEEnum) EXPECT() *MockEEnum_Expecter {
	e := &MockEEnum_Expecter{}
	e.Mock = &eEnum.Mock
	return e
}

// GetELiterals get the value of eLiterals
func (eEnum *MockEEnum) GetELiterals() EList {
	ret := eEnum.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEEnum_GetELiterals_Call struct {
	*mock.Call
}

func (e *MockEEnum_Expecter) GetELiterals() *MockEEnum_GetELiterals_Call {
	return &MockEEnum_GetELiterals_Call{Call: e.Mock.On("GetELiterals")}
}

func (c *MockEEnum_GetELiterals_Call) Run(run func()) *MockEEnum_GetELiterals_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEEnum_GetELiterals_Call) Return(eLiterals EList) *MockEEnum_GetELiterals_Call {
	c.Call.Return(eLiterals)
	return c
}

// GetEEnumLiteralByLiteral provides mock implementation
func (eEnum *MockEEnum) GetEEnumLiteralByLiteral(literal string) EEnumLiteral {
	ret := eEnum.Called(literal)

	var r EEnumLiteral
	if rf, ok := ret.Get(0).(func() EEnumLiteral); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EEnumLiteral)
		}
	}

	return r
}

type MockEEnum_GetEEnumLiteralByLiteral_Call struct {
	*mock.Call
}

// GetEEnumLiteralByLiteralis a helper method to define mock.On call
// - literal string
func (e *MockEEnum_Expecter) GetEEnumLiteralByLiteral(literal any) *MockEEnum_GetEEnumLiteralByLiteral_Call {
	return &MockEEnum_GetEEnumLiteralByLiteral_Call{Call: e.Mock.On("GetEEnumLiteralByLiteral", literal)}
}

func (c *MockEEnum_GetEEnumLiteralByLiteral_Call) Run(run func(string)) *MockEEnum_GetEEnumLiteralByLiteral_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(string))
	})
	return c
}

func (c *MockEEnum_GetEEnumLiteralByLiteral_Call) Return(_a0 EEnumLiteral) *MockEEnum_GetEEnumLiteralByLiteral_Call {
	c.Call.Return(_a0)
	return c
}

// GetEEnumLiteralByName provides mock implementation
func (eEnum *MockEEnum) GetEEnumLiteralByName(name string) EEnumLiteral {
	ret := eEnum.Called(name)

	var r EEnumLiteral
	if rf, ok := ret.Get(0).(func() EEnumLiteral); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EEnumLiteral)
		}
	}

	return r
}

type MockEEnum_GetEEnumLiteralByName_Call struct {
	*mock.Call
}

// GetEEnumLiteralByNameis a helper method to define mock.On call
// - name string
func (e *MockEEnum_Expecter) GetEEnumLiteralByName(name any) *MockEEnum_GetEEnumLiteralByName_Call {
	return &MockEEnum_GetEEnumLiteralByName_Call{Call: e.Mock.On("GetEEnumLiteralByName", name)}
}

func (c *MockEEnum_GetEEnumLiteralByName_Call) Run(run func(string)) *MockEEnum_GetEEnumLiteralByName_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(string))
	})
	return c
}

func (c *MockEEnum_GetEEnumLiteralByName_Call) Return(_a0 EEnumLiteral) *MockEEnum_GetEEnumLiteralByName_Call {
	c.Call.Return(_a0)
	return c
}

// GetEEnumLiteralByValue provides mock implementation
func (eEnum *MockEEnum) GetEEnumLiteralByValue(value int) EEnumLiteral {
	ret := eEnum.Called(value)

	var r EEnumLiteral
	if rf, ok := ret.Get(0).(func() EEnumLiteral); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EEnumLiteral)
		}
	}

	return r
}

type MockEEnum_GetEEnumLiteralByValue_Call struct {
	*mock.Call
}

// GetEEnumLiteralByValueis a helper method to define mock.On call
// - value int
func (e *MockEEnum_Expecter) GetEEnumLiteralByValue(value any) *MockEEnum_GetEEnumLiteralByValue_Call {
	return &MockEEnum_GetEEnumLiteralByValue_Call{Call: e.Mock.On("GetEEnumLiteralByValue", value)}
}

func (c *MockEEnum_GetEEnumLiteralByValue_Call) Run(run func(int)) *MockEEnum_GetEEnumLiteralByValue_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(int))
	})
	return c
}

func (c *MockEEnum_GetEEnumLiteralByValue_Call) Return(_a0 EEnumLiteral) *MockEEnum_GetEEnumLiteralByValue_Call {
	c.Call.Return(_a0)
	return c
}

type mockConstructorTestingTNewMockEEnum interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEEnum creates a new instance of MockEEnum. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEEnum(t mockConstructorTestingTNewMockEEnum) *MockEEnum {
	mock := &MockEEnum{}
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
