// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEIterator is an autogenerated mock type for the EIterator type
type MockEIterator struct {
	mock.Mock
}

type MockEIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEIterator) EXPECT() *MockEIterator_Expecter {
	return &MockEIterator_Expecter{mock: &_m.Mock}
}

// HasNext provides a mock function with given fields:
func (_m *MockEIterator) HasNext() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEIterator_HasNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasNext'
type MockEIterator_HasNext_Call struct {
	*mock.Call
}

// HasNext is a helper method to define mock.On call
func (_e *MockEIterator_Expecter) HasNext() *MockEIterator_HasNext_Call {
	return &MockEIterator_HasNext_Call{Call: _e.mock.On("HasNext")}
}

func (_c *MockEIterator_HasNext_Call) Run(run func()) *MockEIterator_HasNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEIterator_HasNext_Call) Return(_a0 bool) *MockEIterator_HasNext_Call {
	_c.Call.Return(_a0)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockEIterator) Next() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockEIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockEIterator_Expecter) Next() *MockEIterator_Next_Call {
	return &MockEIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockEIterator_Next_Call) Run(run func()) *MockEIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEIterator_Next_Call) Return(_a0 interface{}) *MockEIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEIterator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEIterator creates a new instance of MockEIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEIterator(t mockConstructorTestingTNewMockEIterator) *MockEIterator {
	mock := &MockEIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
