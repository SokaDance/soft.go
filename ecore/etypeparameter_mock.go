// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "github.com/stretchr/testify/mock"

// MockETypeParameter is an mock type for the ETypeParameter type
type MockETypeParameter struct {
	mock.Mock
	MockETypeParameter_Prototype
}

// MockETypeParameter_Prototype is the mock implementation of all ETypeParameter methods ( inherited and declared )
type MockETypeParameter_Prototype struct {
	mock *mock.Mock
	MockENamedElement_Prototype
	MockETypeParameter_Prototype_Methods
}

func (_mp *MockETypeParameter_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
	_mp.MockENamedElement_Prototype.SetMock(mock)
	_mp.MockETypeParameter_Prototype_Methods.SetMock(mock)
}

// MockETypeParameter_Expecter is the expecter implementation for all ETypeParameter methods ( inherited and declared )
type MockETypeParameter_Expecter struct {
	MockENamedElement_Expecter
	MockETypeParameter_Expecter_Methods
}

func (_me *MockETypeParameter_Expecter) SetMock(mock *mock.Mock) {
	_me.MockENamedElement_Expecter.SetMock(mock)
	_me.MockETypeParameter_Expecter_Methods.SetMock(mock)
}

func (e *MockETypeParameter_Prototype) EXPECT() *MockETypeParameter_Expecter {
	expecter := &MockETypeParameter_Expecter{}
	expecter.SetMock(e.mock)
	return expecter
}

// MockETypeParameter_Prototype_Methods is the mock implementation of ETypeParameter declared methods
type MockETypeParameter_Prototype_Methods struct {
	mock *mock.Mock
}

func (_mdp *MockETypeParameter_Prototype_Methods) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

// MockETypeParameter_Expecter_Methods is the expecter implementation of ETypeParameter declared methods
type MockETypeParameter_Expecter_Methods struct {
	mock *mock.Mock
}

func (_mde *MockETypeParameter_Expecter_Methods) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}

// GetEBounds get the value of eBounds
func (e *MockETypeParameter_Prototype_Methods) GetEBounds() EList {
	ret := e.mock.Called()

	var res EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		res = rf()
	} else {
		if ret.Get(0) != nil {
			res = ret.Get(0).(EList)
		}
	}

	return res
}

type MockETypeParameter_GetEBounds_Call struct {
	*mock.Call
}

func (e *MockETypeParameter_Expecter_Methods) GetEBounds() *MockETypeParameter_GetEBounds_Call {
	return &MockETypeParameter_GetEBounds_Call{Call: e.mock.On("GetEBounds")}
}

func (c *MockETypeParameter_GetEBounds_Call) Run(run func()) *MockETypeParameter_GetEBounds_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockETypeParameter_GetEBounds_Call) Return(eBounds EList) *MockETypeParameter_GetEBounds_Call {
	c.Call.Return(eBounds)
	return c
}

type mockConstructorTestingTNewMockETypeParameter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockETypeParameter creates a new instance of MockETypeParameter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockETypeParameter(t mockConstructorTestingTNewMockETypeParameter) *MockETypeParameter {
	mock := &MockETypeParameter{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
