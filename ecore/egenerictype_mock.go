// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEGenericType struct {
	MockEGenericType_Prototype
	mock.Mock
}

type MockEGenericType_Prototype struct {
	MockEObjectInternal_Prototype
}

type MockEGenericType_Expecter struct {
	MockEObjectInternal_Expecter
}

func (eGenericType *MockEGenericType_Prototype) EXPECT() *MockEGenericType_Expecter {
	e := &MockEGenericType_Expecter{}
	e.Mock = eGenericType.Mock
	return e
}

// GetEClassifier get the value of eClassifier
func (eGenericType *MockEGenericType_Prototype) GetEClassifier() EClassifier {
	ret := eGenericType.Called()

	var r EClassifier
	if rf, ok := ret.Get(0).(func() EClassifier); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClassifier)
		}
	}

	return r
}

type MockEGenericType_GetEClassifier_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetEClassifier() *MockEGenericType_GetEClassifier_Call {
	return &MockEGenericType_GetEClassifier_Call{Call: e.Mock.On("GetEClassifier")}
}

func (c *MockEGenericType_GetEClassifier_Call) Run(run func()) *MockEGenericType_GetEClassifier_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetEClassifier_Call) Return(eClassifier EClassifier) *MockEGenericType_GetEClassifier_Call {
	c.Call.Return(eClassifier)
	return c
}

// SetEClassifier provides mock implementation for setting the value of eClassifier
func (eGenericType *MockEGenericType_Prototype) SetEClassifier(eClassifier EClassifier) {
	eGenericType.Called(eClassifier)
}

type MockEGenericType_SetEClassifier_Call struct {
	*mock.Call
}

// SetEClassifieris a helper method to define mock.On call
// - eClassifier EClassifier
func (e *MockEGenericType_Expecter) SetEClassifier(eClassifier any) *MockEGenericType_SetEClassifier_Call {
	return &MockEGenericType_SetEClassifier_Call{Call: e.Mock.On("SetEClassifier", eClassifier)}
}

func (c *MockEGenericType_SetEClassifier_Call) Run(run func(eClassifier EClassifier)) *MockEGenericType_SetEClassifier_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EClassifier))
	})
	return c
}

func (c *MockEGenericType_SetEClassifier_Call) Return() *MockEGenericType_SetEClassifier_Call {
	c.Call.Return()
	return c
}

// GetELowerBound get the value of eLowerBound
func (eGenericType *MockEGenericType_Prototype) GetELowerBound() EGenericType {
	ret := eGenericType.Called()

	var r EGenericType
	if rf, ok := ret.Get(0).(func() EGenericType); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EGenericType)
		}
	}

	return r
}

type MockEGenericType_GetELowerBound_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetELowerBound() *MockEGenericType_GetELowerBound_Call {
	return &MockEGenericType_GetELowerBound_Call{Call: e.Mock.On("GetELowerBound")}
}

func (c *MockEGenericType_GetELowerBound_Call) Run(run func()) *MockEGenericType_GetELowerBound_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetELowerBound_Call) Return(eLowerBound EGenericType) *MockEGenericType_GetELowerBound_Call {
	c.Call.Return(eLowerBound)
	return c
}

// SetELowerBound provides mock implementation for setting the value of eLowerBound
func (eGenericType *MockEGenericType_Prototype) SetELowerBound(eLowerBound EGenericType) {
	eGenericType.Called(eLowerBound)
}

type MockEGenericType_SetELowerBound_Call struct {
	*mock.Call
}

// SetELowerBoundis a helper method to define mock.On call
// - eLowerBound EGenericType
func (e *MockEGenericType_Expecter) SetELowerBound(eLowerBound any) *MockEGenericType_SetELowerBound_Call {
	return &MockEGenericType_SetELowerBound_Call{Call: e.Mock.On("SetELowerBound", eLowerBound)}
}

func (c *MockEGenericType_SetELowerBound_Call) Run(run func(eLowerBound EGenericType)) *MockEGenericType_SetELowerBound_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EGenericType))
	})
	return c
}

func (c *MockEGenericType_SetELowerBound_Call) Return() *MockEGenericType_SetELowerBound_Call {
	c.Call.Return()
	return c
}

// GetERawType get the value of eRawType
func (eGenericType *MockEGenericType_Prototype) GetERawType() EClassifier {
	ret := eGenericType.Called()

	var r EClassifier
	if rf, ok := ret.Get(0).(func() EClassifier); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClassifier)
		}
	}

	return r
}

type MockEGenericType_GetERawType_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetERawType() *MockEGenericType_GetERawType_Call {
	return &MockEGenericType_GetERawType_Call{Call: e.Mock.On("GetERawType")}
}

func (c *MockEGenericType_GetERawType_Call) Run(run func()) *MockEGenericType_GetERawType_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetERawType_Call) Return(eRawType EClassifier) *MockEGenericType_GetERawType_Call {
	c.Call.Return(eRawType)
	return c
}

// GetETypeArguments get the value of eTypeArguments
func (eGenericType *MockEGenericType_Prototype) GetETypeArguments() EList {
	ret := eGenericType.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEGenericType_GetETypeArguments_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetETypeArguments() *MockEGenericType_GetETypeArguments_Call {
	return &MockEGenericType_GetETypeArguments_Call{Call: e.Mock.On("GetETypeArguments")}
}

func (c *MockEGenericType_GetETypeArguments_Call) Run(run func()) *MockEGenericType_GetETypeArguments_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetETypeArguments_Call) Return(eTypeArguments EList) *MockEGenericType_GetETypeArguments_Call {
	c.Call.Return(eTypeArguments)
	return c
}

// GetETypeParameter get the value of eTypeParameter
func (eGenericType *MockEGenericType_Prototype) GetETypeParameter() ETypeParameter {
	ret := eGenericType.Called()

	var r ETypeParameter
	if rf, ok := ret.Get(0).(func() ETypeParameter); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(ETypeParameter)
		}
	}

	return r
}

type MockEGenericType_GetETypeParameter_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetETypeParameter() *MockEGenericType_GetETypeParameter_Call {
	return &MockEGenericType_GetETypeParameter_Call{Call: e.Mock.On("GetETypeParameter")}
}

func (c *MockEGenericType_GetETypeParameter_Call) Run(run func()) *MockEGenericType_GetETypeParameter_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetETypeParameter_Call) Return(eTypeParameter ETypeParameter) *MockEGenericType_GetETypeParameter_Call {
	c.Call.Return(eTypeParameter)
	return c
}

// SetETypeParameter provides mock implementation for setting the value of eTypeParameter
func (eGenericType *MockEGenericType_Prototype) SetETypeParameter(eTypeParameter ETypeParameter) {
	eGenericType.Called(eTypeParameter)
}

type MockEGenericType_SetETypeParameter_Call struct {
	*mock.Call
}

// SetETypeParameteris a helper method to define mock.On call
// - eTypeParameter ETypeParameter
func (e *MockEGenericType_Expecter) SetETypeParameter(eTypeParameter any) *MockEGenericType_SetETypeParameter_Call {
	return &MockEGenericType_SetETypeParameter_Call{Call: e.Mock.On("SetETypeParameter", eTypeParameter)}
}

func (c *MockEGenericType_SetETypeParameter_Call) Run(run func(eTypeParameter ETypeParameter)) *MockEGenericType_SetETypeParameter_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ETypeParameter))
	})
	return c
}

func (c *MockEGenericType_SetETypeParameter_Call) Return() *MockEGenericType_SetETypeParameter_Call {
	c.Call.Return()
	return c
}

// GetEUpperBound get the value of eUpperBound
func (eGenericType *MockEGenericType_Prototype) GetEUpperBound() EGenericType {
	ret := eGenericType.Called()

	var r EGenericType
	if rf, ok := ret.Get(0).(func() EGenericType); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EGenericType)
		}
	}

	return r
}

type MockEGenericType_GetEUpperBound_Call struct {
	*mock.Call
}

func (e *MockEGenericType_Expecter) GetEUpperBound() *MockEGenericType_GetEUpperBound_Call {
	return &MockEGenericType_GetEUpperBound_Call{Call: e.Mock.On("GetEUpperBound")}
}

func (c *MockEGenericType_GetEUpperBound_Call) Run(run func()) *MockEGenericType_GetEUpperBound_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEGenericType_GetEUpperBound_Call) Return(eUpperBound EGenericType) *MockEGenericType_GetEUpperBound_Call {
	c.Call.Return(eUpperBound)
	return c
}

// SetEUpperBound provides mock implementation for setting the value of eUpperBound
func (eGenericType *MockEGenericType_Prototype) SetEUpperBound(eUpperBound EGenericType) {
	eGenericType.Called(eUpperBound)
}

type MockEGenericType_SetEUpperBound_Call struct {
	*mock.Call
}

// SetEUpperBoundis a helper method to define mock.On call
// - eUpperBound EGenericType
func (e *MockEGenericType_Expecter) SetEUpperBound(eUpperBound any) *MockEGenericType_SetEUpperBound_Call {
	return &MockEGenericType_SetEUpperBound_Call{Call: e.Mock.On("SetEUpperBound", eUpperBound)}
}

func (c *MockEGenericType_SetEUpperBound_Call) Run(run func(eUpperBound EGenericType)) *MockEGenericType_SetEUpperBound_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EGenericType))
	})
	return c
}

func (c *MockEGenericType_SetEUpperBound_Call) Return() *MockEGenericType_SetEUpperBound_Call {
	c.Call.Return()
	return c
}

// IsInstance provides mock implementation
func (eGenericType *MockEGenericType_Prototype) IsInstance(object any) bool {
	ret := eGenericType.Called(object)

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

type MockEGenericType_IsInstance_Call struct {
	*mock.Call
}

// IsInstanceis a helper method to define mock.On call
// - object any
func (e *MockEGenericType_Expecter) IsInstance(object any) *MockEGenericType_IsInstance_Call {
	return &MockEGenericType_IsInstance_Call{Call: e.Mock.On("IsInstance", object)}
}

func (c *MockEGenericType_IsInstance_Call) Run(run func(any)) *MockEGenericType_IsInstance_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0])
	})
	return c
}

func (c *MockEGenericType_IsInstance_Call) Return(_a0 bool) *MockEGenericType_IsInstance_Call {
	c.Call.Return(_a0)
	return c
}

type mockConstructorTestingTNewMockEGenericType interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEGenericType creates a new instance of MockEGenericType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEGenericType(t mockConstructorTestingTNewMockEGenericType) *MockEGenericType {
	mock := &MockEGenericType{}
	mock.MockEGenericType_Prototype.Mock = &mock.Mock
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
