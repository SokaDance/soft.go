// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	mock "github.com/stretchr/testify/mock"
)

// MockEResourceInternal is an autogenerated mock type for the EResourceInternal type
type MockEResourceInternal struct {
	MockEResourceInternal_Prototype
	mock.Mock
}

type MockEResourceInternal_Prototype struct {
	MockEResource_Prototype
}

type MockEResourceInternal_Expecter struct {
	MockEResource_Expecter
}

func (_m *MockEResourceInternal_Prototype) EXPECT() *MockEResourceInternal_Expecter {
	e := &MockEResourceInternal_Expecter{}
	e.Mock = _m.Mock
	return e
}

// BasicSetLoaded provides a mock function with given fields: _a0, _a1
func (_m *MockEResourceInternal_Prototype) BasicSetLoaded(_a0 bool, _a1 ENotificationChain) ENotificationChain {
	ret := _m.Called(_a0, _a1)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(bool, ENotificationChain) ENotificationChain); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// MockEResourceInternal_BasicSetLoaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicSetLoaded'
type MockEResourceInternal_BasicSetLoaded_Call struct {
	*mock.Call
}

// BasicSetLoaded is a helper method to define mock.On call
//   - _a0 bool
//   - _a1 ENotificationChain
func (_e *MockEResourceInternal_Expecter) BasicSetLoaded(_a0 interface{}, _a1 interface{}) *MockEResourceInternal_BasicSetLoaded_Call {
	return &MockEResourceInternal_BasicSetLoaded_Call{Call: _e.Mock.On("BasicSetLoaded", _a0, _a1)}
}

func (_c *MockEResourceInternal_BasicSetLoaded_Call) Run(run func(_a0 bool, _a1 ENotificationChain)) *MockEResourceInternal_BasicSetLoaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(ENotificationChain))
	})
	return _c
}

func (_c *MockEResourceInternal_BasicSetLoaded_Call) Return(_a0 ENotificationChain) *MockEResourceInternal_BasicSetLoaded_Call {
	_c.Call.Return(_a0)
	return _c
}

// BasicSetResourceSet provides a mock function with given fields: _a0, _a1
func (_m *MockEResourceInternal_Prototype) BasicSetResourceSet(_a0 EResourceSet, _a1 ENotificationChain) ENotificationChain {
	ret := _m.Called(_a0, _a1)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(EResourceSet, ENotificationChain) ENotificationChain); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// MockEResourceInternal_BasicSetResourceSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicSetResourceSet'
type MockEResourceInternal_BasicSetResourceSet_Call struct {
	*mock.Call
}

// BasicSetResourceSet is a helper method to define mock.On call
//   - _a0 EResourceSet
//   - _a1 ENotificationChain
func (_e *MockEResourceInternal_Expecter) BasicSetResourceSet(_a0 interface{}, _a1 interface{}) *MockEResourceInternal_BasicSetResourceSet_Call {
	return &MockEResourceInternal_BasicSetResourceSet_Call{Call: _e.Mock.On("BasicSetResourceSet", _a0, _a1)}
}

func (_c *MockEResourceInternal_BasicSetResourceSet_Call) Run(run func(_a0 EResourceSet, _a1 ENotificationChain)) *MockEResourceInternal_BasicSetResourceSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EResourceSet), args[1].(ENotificationChain))
	})
	return _c
}

func (_c *MockEResourceInternal_BasicSetResourceSet_Call) Return(_a0 ENotificationChain) *MockEResourceInternal_BasicSetResourceSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// DoAttached provides a mock function with given fields: o
func (_m *MockEResourceInternal_Prototype) DoAttached(o EObject) {
	_m.Called(o)
}

// MockEResourceInternal_DoAttached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoAttached'
type MockEResourceInternal_DoAttached_Call struct {
	*mock.Call
}

// DoAttached is a helper method to define mock.On call
//   - o EObject
func (_e *MockEResourceInternal_Expecter) DoAttached(o interface{}) *MockEResourceInternal_DoAttached_Call {
	return &MockEResourceInternal_DoAttached_Call{Call: _e.Mock.On("DoAttached", o)}
}

func (_c *MockEResourceInternal_DoAttached_Call) Run(run func(o EObject)) *MockEResourceInternal_DoAttached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEResourceInternal_DoAttached_Call) Return() *MockEResourceInternal_DoAttached_Call {
	_c.Call.Return()
	return _c
}

// DoDetached provides a mock function with given fields: o
func (_m *MockEResourceInternal_Prototype) DoDetached(o EObject) {
	_m.Called(o)
}

// MockEResourceInternal_DoDetached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoDetached'
type MockEResourceInternal_DoDetached_Call struct {
	*mock.Call
}

// DoDetached is a helper method to define mock.On call
//   - o EObject
func (_e *MockEResourceInternal_Expecter) DoDetached(o interface{}) *MockEResourceInternal_DoDetached_Call {
	return &MockEResourceInternal_DoDetached_Call{Call: _e.Mock.On("DoDetached", o)}
}

func (_c *MockEResourceInternal_DoDetached_Call) Run(run func(o EObject)) *MockEResourceInternal_DoDetached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEResourceInternal_DoDetached_Call) Return() *MockEResourceInternal_DoDetached_Call {
	_c.Call.Return()
	return _c
}

// DoLoad provides a mock function with given fields: decoder
func (_m *MockEResourceInternal_Prototype) DoLoad(decoder EResourceDecoder) {
	_m.Called(decoder)
}

// MockEResourceInternal_DoLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoLoad'
type MockEResourceInternal_DoLoad_Call struct {
	*mock.Call
}

// DoLoad is a helper method to define mock.On call
//   - decoder EResourceDecoder
func (_e *MockEResourceInternal_Expecter) DoLoad(decoder interface{}) *MockEResourceInternal_DoLoad_Call {
	return &MockEResourceInternal_DoLoad_Call{Call: _e.Mock.On("DoLoad", decoder)}
}

func (_c *MockEResourceInternal_DoLoad_Call) Run(run func(decoder EResourceDecoder)) *MockEResourceInternal_DoLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EResourceDecoder))
	})
	return _c
}

func (_c *MockEResourceInternal_DoLoad_Call) Return() *MockEResourceInternal_DoLoad_Call {
	_c.Call.Return()
	return _c
}

// DoSave provides a mock function with given fields: encoder
func (_m *MockEResourceInternal_Prototype) DoSave(encoder EResourceEncoder) {
	_m.Called(encoder)
}

// MockEResourceInternal_DoSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoSave'
type MockEResourceInternal_DoSave_Call struct {
	*mock.Call
}

// DoSave is a helper method to define mock.On call
//   - encoder EResourceEncoder
func (_e *MockEResourceInternal_Expecter) DoSave(encoder interface{}) *MockEResourceInternal_DoSave_Call {
	return &MockEResourceInternal_DoSave_Call{Call: _e.Mock.On("DoSave", encoder)}
}

func (_c *MockEResourceInternal_DoSave_Call) Run(run func(encoder EResourceEncoder)) *MockEResourceInternal_DoSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EResourceEncoder))
	})
	return _c
}

func (_c *MockEResourceInternal_DoSave_Call) Return() *MockEResourceInternal_DoSave_Call {
	_c.Call.Return()
	return _c
}

// DoUnload provides a mock function with given fields:
func (_m *MockEResourceInternal_Prototype) DoUnload() {
	_m.Called()
}

// MockEResourceInternal_DoUnload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoUnload'
type MockEResourceInternal_DoUnload_Call struct {
	*mock.Call
}

// DoUnload is a helper method to define mock.On call
func (_e *MockEResourceInternal_Expecter) DoUnload() *MockEResourceInternal_DoUnload_Call {
	return &MockEResourceInternal_DoUnload_Call{Call: _e.Mock.On("DoUnload")}
}

func (_c *MockEResourceInternal_DoUnload_Call) Run(run func()) *MockEResourceInternal_DoUnload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceInternal_DoUnload_Call) Return() *MockEResourceInternal_DoUnload_Call {
	_c.Call.Return()
	return _c
}

// IsAttachedDetachedRequired provides a mock function with given fields:
func (_m *MockEResourceInternal_Prototype) IsAttachedDetachedRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEResourceInternal_IsAttachedDetachedRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAttachedDetachedRequired'
type MockEResourceInternal_IsAttachedDetachedRequired_Call struct {
	*mock.Call
}

// IsAttachedDetachedRequired is a helper method to define mock.On call
func (_e *MockEResourceInternal_Expecter) IsAttachedDetachedRequired() *MockEResourceInternal_IsAttachedDetachedRequired_Call {
	return &MockEResourceInternal_IsAttachedDetachedRequired_Call{Call: _e.Mock.On("IsAttachedDetachedRequired")}
}

func (_c *MockEResourceInternal_IsAttachedDetachedRequired_Call) Run(run func()) *MockEResourceInternal_IsAttachedDetachedRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceInternal_IsAttachedDetachedRequired_Call) Return(_a0 bool) *MockEResourceInternal_IsAttachedDetachedRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEResourceInternal interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEResourceInternal creates a new instance of MockEResourceInternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEResourceInternal(t mockConstructorTestingTNewMockEResourceInternal) *MockEResourceInternal {
	mock := &MockEResourceInternal{}
	mock.MockEResource_Prototype.Mock = &mock.Mock
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
