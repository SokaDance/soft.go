// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// ENamedElementImpl is the implementation of the model object 'ENamedElement'
type ENamedElementImpl struct {
	EModelElementExt
	name string
}

// newENamedElementImpl is the constructor of a ENamedElementImpl
func newENamedElementImpl() *ENamedElementImpl {
	e := new(ENamedElementImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *ENamedElementImpl) Initialize() {
	e.EModelElementExt.Initialize()
	e.name = ""

}

func (e *ENamedElementImpl) asENamedElement() ENamedElement {
	return e.GetInterfaces().(ENamedElement)
}

func (e *ENamedElementImpl) EStaticClass() EClass {
	return GetPackage().GetENamedElement()
}

func (e *ENamedElementImpl) EStaticFeatureCount() int {
	return ENAMED_ELEMENT_FEATURE_COUNT
}

// GetName get the value of name
func (e *ENamedElementImpl) GetName() string {
	return e.name
}

// SetName set the value of name
func (e *ENamedElementImpl) SetName(newName string) {
	oldName := e.name
	e.name = newName
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ENAMED_ELEMENT__NAME, oldName, newName, NO_INDEX))
	}
}

func (e *ENamedElementImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ENAMED_ELEMENT__NAME:
		return e.asENamedElement().GetName()
	default:
		return e.EModelElementExt.EGetFromID(featureID, resolve)
	}
}

func (e *ENamedElementImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ENAMED_ELEMENT__NAME:
		e.asENamedElement().SetName(newValue.(string))
	default:
		e.EModelElementExt.ESetFromID(featureID, newValue)
	}
}

func (e *ENamedElementImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ENAMED_ELEMENT__NAME:
		e.asENamedElement().SetName("")
	default:
		e.EModelElementExt.EUnsetFromID(featureID)
	}
}

func (e *ENamedElementImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ENAMED_ELEMENT__NAME:
		return e.name != ""
	default:
		return e.EModelElementExt.EIsSetFromID(featureID)
	}
}
