// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************
package ecore

import mock "github.com/stretchr/testify/mock"

// MockENotifyingList is an autogenerated mock type for the ENotifyingList type
type MockENotifyingList struct {
	mock.Mock
}

type MockENotifyingList_Expecter struct {
	MockEList_Expecter
}

func (_m *MockENotifyingList) EXPECT() *MockENotifyingList_Expecter {
	e := &MockENotifyingList_Expecter{}
	e.Mock = &_m.Mock
	return e
}

// AddWithNotification provides a mock function with given fields: object, notifications
func (_m *MockENotifyingList) AddWithNotification(object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// MockENotifyingList_AddWithNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWithNotification'
type MockENotifyingList_AddWithNotification_Call struct {
	*mock.Call
}

// AddWithNotification is a helper method to define mock.On call
//   - object interface{}
//   - notifications ENotificationChain
func (_e *MockENotifyingList_Expecter) AddWithNotification(object interface{}, notifications interface{}) *MockENotifyingList_AddWithNotification_Call {
	return &MockENotifyingList_AddWithNotification_Call{Call: _e.Mock.On("AddWithNotification", object, notifications)}
}

func (_c *MockENotifyingList_AddWithNotification_Call) Run(run func(object interface{}, notifications ENotificationChain)) *MockENotifyingList_AddWithNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0], args[1].(ENotificationChain))
	})
	return _c
}

func (_c *MockENotifyingList_AddWithNotification_Call) Return(_a0 ENotificationChain) *MockENotifyingList_AddWithNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFeature provides a mock function with given fields:
func (_m *MockENotifyingList) GetFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// MockENotifyingList_GetFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeature'
type MockENotifyingList_GetFeature_Call struct {
	*mock.Call
}

// GetFeature is a helper method to define mock.On call
func (_e *MockENotifyingList_Expecter) GetFeature() *MockENotifyingList_GetFeature_Call {
	return &MockENotifyingList_GetFeature_Call{Call: _e.Mock.On("GetFeature")}
}

func (_c *MockENotifyingList_GetFeature_Call) Run(run func()) *MockENotifyingList_GetFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotifyingList_GetFeature_Call) Return(_a0 EStructuralFeature) *MockENotifyingList_GetFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFeatureID provides a mock function with given fields:
func (_m *MockENotifyingList) GetFeatureID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockENotifyingList_GetFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureID'
type MockENotifyingList_GetFeatureID_Call struct {
	*mock.Call
}

// GetFeatureID is a helper method to define mock.On call
func (_e *MockENotifyingList_Expecter) GetFeatureID() *MockENotifyingList_GetFeatureID_Call {
	return &MockENotifyingList_GetFeatureID_Call{Call: _e.Mock.On("GetFeatureID")}
}

func (_c *MockENotifyingList_GetFeatureID_Call) Run(run func()) *MockENotifyingList_GetFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotifyingList_GetFeatureID_Call) Return(_a0 int) *MockENotifyingList_GetFeatureID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetNotifier provides a mock function with given fields:
func (_m *MockENotifyingList) GetNotifier() ENotifier {
	ret := _m.Called()

	var r0 ENotifier
	if rf, ok := ret.Get(0).(func() ENotifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotifier)
		}
	}

	return r0
}

// MockENotifyingList_GetNotifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotifier'
type MockENotifyingList_GetNotifier_Call struct {
	*mock.Call
}

// GetNotifier is a helper method to define mock.On call
func (_e *MockENotifyingList_Expecter) GetNotifier() *MockENotifyingList_GetNotifier_Call {
	return &MockENotifyingList_GetNotifier_Call{Call: _e.Mock.On("GetNotifier")}
}

func (_c *MockENotifyingList_GetNotifier_Call) Run(run func()) *MockENotifyingList_GetNotifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotifyingList_GetNotifier_Call) Return(_a0 ENotifier) *MockENotifyingList_GetNotifier_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveWithNotification provides a mock function with given fields: object, notifications
func (_m *MockENotifyingList) RemoveWithNotification(object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// MockENotifyingList_RemoveWithNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWithNotification'
type MockENotifyingList_RemoveWithNotification_Call struct {
	*mock.Call
}

// RemoveWithNotification is a helper method to define mock.On call
//   - object interface{}
//   - notifications ENotificationChain
func (_e *MockENotifyingList_Expecter) RemoveWithNotification(object interface{}, notifications interface{}) *MockENotifyingList_RemoveWithNotification_Call {
	return &MockENotifyingList_RemoveWithNotification_Call{Call: _e.Mock.On("RemoveWithNotification", object, notifications)}
}

func (_c *MockENotifyingList_RemoveWithNotification_Call) Run(run func(object interface{}, notifications ENotificationChain)) *MockENotifyingList_RemoveWithNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0], args[1].(ENotificationChain))
	})
	return _c
}

func (_c *MockENotifyingList_RemoveWithNotification_Call) Return(_a0 ENotificationChain) *MockENotifyingList_RemoveWithNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetWithNotification provides a mock function with given fields: index, object, notifications
func (_m *MockENotifyingList) SetWithNotification(index int, object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(index, object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(int, interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(index, object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// MockENotifyingList_SetWithNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWithNotification'
type MockENotifyingList_SetWithNotification_Call struct {
	*mock.Call
}

// SetWithNotification is a helper method to define mock.On call
//   - index int
//   - object interface{}
//   - notifications ENotificationChain
func (_e *MockENotifyingList_Expecter) SetWithNotification(index interface{}, object interface{}, notifications interface{}) *MockENotifyingList_SetWithNotification_Call {
	return &MockENotifyingList_SetWithNotification_Call{Call: _e.Mock.On("SetWithNotification", index, object, notifications)}
}

func (_c *MockENotifyingList_SetWithNotification_Call) Run(run func(index int, object interface{}, notifications ENotificationChain)) *MockENotifyingList_SetWithNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1], args[2].(ENotificationChain))
	})
	return _c
}

func (_c *MockENotifyingList_SetWithNotification_Call) Return(_a0 ENotificationChain) *MockENotifyingList_SetWithNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockENotifyingList interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockENotifyingList creates a new instance of MockENotifyingList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockENotifyingList(t mockConstructorTestingTNewMockENotifyingList) *MockENotifyingList {
	mock := &MockENotifyingList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
