// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EClassImpl is the implementation of the model object 'EClass'
type EClassImpl struct {
	EClassifierExt
	eAllAttributes          EList
	eAllContainments        EList
	eAllCrossReferences     EList
	eAllOperations          EList
	eAllReferences          EList
	eAllStructuralFeatures  EList
	eAllSuperTypes          EList
	eAttributes             EList
	eContainmentFeatures    EList
	eCrossReferenceFeatures EList
	eIDAttribute            EAttribute
	eOperations             EList
	eReferences             EList
	eStructuralFeatures     EList
	eSuperTypes             EList
	isAbstract              bool
	isInterface             bool
}
type eClassInitializers interface {
	initEAllAttributes()
	initEAllContainments()
	initEAllCrossReferences()
	initEAllOperations()
	initEAllReferences()
	initEAllStructuralFeatures()
	initEAllSuperTypes()
	initEAttributes()
	initEContainmentFeatures()
	initECrossReferenceFeatures()
	initEIDAttribute()
	initEOperations() EList
	initEReferences()
	initEStructuralFeatures() EList
	initESuperTypes() EList
}

// newEClassImpl is the constructor of a EClassImpl
func newEClassImpl() *EClassImpl {
	e := new(EClassImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EClassImpl) Initialize() {
	e.EClassifierExt.Initialize()
	e.isAbstract = false
	e.isInterface = false

}

func (e *EClassImpl) asEClass() EClass {
	return e.GetInterfaces().(EClass)
}

func (e *EClassImpl) asInitializers() eClassInitializers {
	return e.GetInterfaces().(eClassInitializers)
}

func (e *EClassImpl) EStaticClass() EClass {
	return GetPackage().GetEClass()
}

func (e *EClassImpl) EStaticFeatureCount() int {
	return ECLASS_FEATURE_COUNT
}

// GetEOperation default implementation
func (e *EClassImpl) GetEOperation(int) EOperation {
	panic("GetEOperation not implemented")
}

// GetEStructuralFeature default implementation
func (e *EClassImpl) GetEStructuralFeature(int) EStructuralFeature {
	panic("GetEStructuralFeature not implemented")
}

// GetEStructuralFeatureFromName default implementation
func (e *EClassImpl) GetEStructuralFeatureFromName(string) EStructuralFeature {
	panic("GetEStructuralFeatureFromName not implemented")
}

// GetFeatureCount default implementation
func (e *EClassImpl) GetFeatureCount() int {
	panic("GetFeatureCount not implemented")
}

// GetFeatureID default implementation
func (e *EClassImpl) GetFeatureID(EStructuralFeature) int {
	panic("GetFeatureID not implemented")
}

// GetFeatureType default implementation
func (e *EClassImpl) GetFeatureType(EStructuralFeature) EClassifier {
	panic("GetFeatureType not implemented")
}

// GetOperationCount default implementation
func (e *EClassImpl) GetOperationCount() int {
	panic("GetOperationCount not implemented")
}

// GetOperationID default implementation
func (e *EClassImpl) GetOperationID(EOperation) int {
	panic("GetOperationID not implemented")
}

// GetOverride default implementation
func (e *EClassImpl) GetOverride(EOperation) EOperation {
	panic("GetOverride not implemented")
}

// IsSuperTypeOf default implementation
func (e *EClassImpl) IsSuperTypeOf(EClass) bool {
	panic("IsSuperTypeOf not implemented")
}

// GetEAllAttributes get the value of eAllAttributes
func (e *EClassImpl) GetEAllAttributes() EList {
	e.asInitializers().initEAllAttributes()
	return e.eAllAttributes
}

// GetEAllContainments get the value of eAllContainments
func (e *EClassImpl) GetEAllContainments() EList {
	e.asInitializers().initEAllContainments()
	return e.eAllContainments
}

// GetEAllCrossReferences get the value of eAllCrossReferences
func (e *EClassImpl) GetEAllCrossReferences() EList {
	e.asInitializers().initEAllCrossReferences()
	return e.eAllCrossReferences
}

// GetEAllOperations get the value of eAllOperations
func (e *EClassImpl) GetEAllOperations() EList {
	e.asInitializers().initEAllOperations()
	return e.eAllOperations
}

// GetEAllReferences get the value of eAllReferences
func (e *EClassImpl) GetEAllReferences() EList {
	e.asInitializers().initEAllReferences()
	return e.eAllReferences
}

// GetEAllStructuralFeatures get the value of eAllStructuralFeatures
func (e *EClassImpl) GetEAllStructuralFeatures() EList {
	e.asInitializers().initEAllStructuralFeatures()
	return e.eAllStructuralFeatures
}

// GetEAllSuperTypes get the value of eAllSuperTypes
func (e *EClassImpl) GetEAllSuperTypes() EList {
	e.asInitializers().initEAllSuperTypes()
	return e.eAllSuperTypes
}

// GetEAttributes get the value of eAttributes
func (e *EClassImpl) GetEAttributes() EList {
	e.asInitializers().initEAttributes()
	return e.eAttributes
}

// GetEContainmentFeatures get the value of eContainmentFeatures
func (e *EClassImpl) GetEContainmentFeatures() EList {
	e.asInitializers().initEContainmentFeatures()
	return e.eContainmentFeatures
}

// GetECrossReferenceFeatures get the value of eCrossReferenceFeatures
func (e *EClassImpl) GetECrossReferenceFeatures() EList {
	e.asInitializers().initECrossReferenceFeatures()
	return e.eCrossReferenceFeatures
}

// GetEIDAttribute get the value of eIDAttribute
func (e *EClassImpl) GetEIDAttribute() EAttribute {
	e.asInitializers().initEIDAttribute()
	return e.eIDAttribute
}

// GetEOperations get the value of eOperations
func (e *EClassImpl) GetEOperations() EList {
	if e.eOperations == nil {
		e.eOperations = e.asInitializers().initEOperations()
	}
	return e.eOperations
}

// GetEReferences get the value of eReferences
func (e *EClassImpl) GetEReferences() EList {
	e.asInitializers().initEReferences()
	return e.eReferences
}

// GetEStructuralFeatures get the value of eStructuralFeatures
func (e *EClassImpl) GetEStructuralFeatures() EList {
	if e.eStructuralFeatures == nil {
		e.eStructuralFeatures = e.asInitializers().initEStructuralFeatures()
	}
	return e.eStructuralFeatures
}

// GetESuperTypes get the value of eSuperTypes
func (e *EClassImpl) GetESuperTypes() EList {
	if e.eSuperTypes == nil {
		e.eSuperTypes = e.asInitializers().initESuperTypes()
	}
	return e.eSuperTypes
}

// IsAbstract get the value of isAbstract
func (e *EClassImpl) IsAbstract() bool {
	return e.isAbstract
}

// SetAbstract set the value of isAbstract
func (e *EClassImpl) SetAbstract(newIsAbstract bool) {
	oldIsAbstract := e.isAbstract
	e.isAbstract = newIsAbstract
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ECLASS__ABSTRACT, oldIsAbstract, newIsAbstract, NO_INDEX))
	}
}

// IsInterface get the value of isInterface
func (e *EClassImpl) IsInterface() bool {
	return e.isInterface
}

// SetInterface set the value of isInterface
func (e *EClassImpl) SetInterface(newIsInterface bool) {
	oldIsInterface := e.isInterface
	e.isInterface = newIsInterface
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ECLASS__INTERFACE, oldIsInterface, newIsInterface, NO_INDEX))
	}
}

func (e *EClassImpl) initEAllAttributes() {
	e.eAllAttributes = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_ATTRIBUTES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllContainments() {
	e.eAllContainments = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_CONTAINMENTS, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllCrossReferences() {
	e.eAllCrossReferences = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_CROSS_REFERENCES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllOperations() {
	e.eAllOperations = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_OPERATIONS, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllReferences() {
	e.eAllReferences = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_REFERENCES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllStructuralFeatures() {
	e.eAllStructuralFeatures = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_STRUCTURAL_FEATURES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAllSuperTypes() {
	e.eAllSuperTypes = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EALL_SUPER_TYPES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEAttributes() {
	e.eAttributes = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EATTRIBUTES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEContainmentFeatures() {
	e.eContainmentFeatures = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__ECONTAINMENT_FEATURES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initECrossReferenceFeatures() {
	e.eCrossReferenceFeatures = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__ECROSS_REFERENCE_FEATURES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEIDAttribute() {
	panic("initEIDAttribute not implemented")
}

func (e *EClassImpl) initEOperations() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EOPERATIONS, EOPERATION__ECONTAINING_CLASS, true, true, true, false, false)
}

func (e *EClassImpl) initEReferences() {
	e.eReferences = NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__EREFERENCES, -1, false, false, false, true, false)
}

func (e *EClassImpl) initEStructuralFeatures() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__ESTRUCTURAL_FEATURES, ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, true, true, true, false, false)
}

func (e *EClassImpl) initESuperTypes() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), ECLASS__ESUPER_TYPES, -1, false, false, false, true, false)
}

func (e *EClassImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ECLASS__ABSTRACT:
		return e.asEClass().IsAbstract()
	case ECLASS__EALL_ATTRIBUTES:
		list := e.asEClass().GetEAllAttributes()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_CONTAINMENTS:
		list := e.asEClass().GetEAllContainments()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_CROSS_REFERENCES:
		list := e.asEClass().GetEAllCrossReferences()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_OPERATIONS:
		list := e.asEClass().GetEAllOperations()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_REFERENCES:
		list := e.asEClass().GetEAllReferences()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_STRUCTURAL_FEATURES:
		list := e.asEClass().GetEAllStructuralFeatures()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EALL_SUPER_TYPES:
		list := e.asEClass().GetEAllSuperTypes()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EATTRIBUTES:
		list := e.asEClass().GetEAttributes()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__ECONTAINMENT_FEATURES:
		list := e.asEClass().GetEContainmentFeatures()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__ECROSS_REFERENCE_FEATURES:
		list := e.asEClass().GetECrossReferenceFeatures()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__EID_ATTRIBUTE:
		return e.asEClass().GetEIDAttribute()
	case ECLASS__EOPERATIONS:
		return e.asEClass().GetEOperations()
	case ECLASS__EREFERENCES:
		list := e.asEClass().GetEReferences()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__ESTRUCTURAL_FEATURES:
		return e.asEClass().GetEStructuralFeatures()
	case ECLASS__ESUPER_TYPES:
		list := e.asEClass().GetESuperTypes()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case ECLASS__INTERFACE:
		return e.asEClass().IsInterface()
	default:
		return e.EClassifierExt.EGetFromID(featureID, resolve)
	}
}

func (e *EClassImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ECLASS__ABSTRACT:
		e.asEClass().SetAbstract(newValue.(bool))
	case ECLASS__EOPERATIONS:
		list := e.asEClass().GetEOperations()
		list.Clear()
		list.AddAll(newValue.(EList))
	case ECLASS__ESTRUCTURAL_FEATURES:
		list := e.asEClass().GetEStructuralFeatures()
		list.Clear()
		list.AddAll(newValue.(EList))
	case ECLASS__ESUPER_TYPES:
		list := e.asEClass().GetESuperTypes()
		list.Clear()
		list.AddAll(newValue.(EList))
	case ECLASS__INTERFACE:
		e.asEClass().SetInterface(newValue.(bool))
	default:
		e.EClassifierExt.ESetFromID(featureID, newValue)
	}
}

func (e *EClassImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ECLASS__ABSTRACT:
		e.asEClass().SetAbstract(false)
	case ECLASS__EOPERATIONS:
		e.asEClass().GetEOperations().Clear()
	case ECLASS__ESTRUCTURAL_FEATURES:
		e.asEClass().GetEStructuralFeatures().Clear()
	case ECLASS__ESUPER_TYPES:
		e.asEClass().GetESuperTypes().Clear()
	case ECLASS__INTERFACE:
		e.asEClass().SetInterface(false)
	default:
		e.EClassifierExt.EUnsetFromID(featureID)
	}
}

func (e *EClassImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ECLASS__ABSTRACT:
		return e.isAbstract != false
	case ECLASS__EALL_ATTRIBUTES:
		return e.eAllAttributes != nil && e.eAllAttributes.Size() != 0
	case ECLASS__EALL_CONTAINMENTS:
		return e.eAllContainments != nil && e.eAllContainments.Size() != 0
	case ECLASS__EALL_CROSS_REFERENCES:
		return e.eAllCrossReferences != nil && e.eAllCrossReferences.Size() != 0
	case ECLASS__EALL_OPERATIONS:
		return e.eAllOperations != nil && e.eAllOperations.Size() != 0
	case ECLASS__EALL_REFERENCES:
		return e.eAllReferences != nil && e.eAllReferences.Size() != 0
	case ECLASS__EALL_STRUCTURAL_FEATURES:
		return e.eAllStructuralFeatures != nil && e.eAllStructuralFeatures.Size() != 0
	case ECLASS__EALL_SUPER_TYPES:
		return e.eAllSuperTypes != nil && e.eAllSuperTypes.Size() != 0
	case ECLASS__EATTRIBUTES:
		return e.eAttributes != nil && e.eAttributes.Size() != 0
	case ECLASS__ECONTAINMENT_FEATURES:
		return e.eContainmentFeatures != nil && e.eContainmentFeatures.Size() != 0
	case ECLASS__ECROSS_REFERENCE_FEATURES:
		return e.eCrossReferenceFeatures != nil && e.eCrossReferenceFeatures.Size() != 0
	case ECLASS__EID_ATTRIBUTE:
		return e.eIDAttribute != nil
	case ECLASS__EOPERATIONS:
		return e.eOperations != nil && e.eOperations.Size() != 0
	case ECLASS__EREFERENCES:
		return e.eReferences != nil && e.eReferences.Size() != 0
	case ECLASS__ESTRUCTURAL_FEATURES:
		return e.eStructuralFeatures != nil && e.eStructuralFeatures.Size() != 0
	case ECLASS__ESUPER_TYPES:
		return e.eSuperTypes != nil && e.eSuperTypes.Size() != 0
	case ECLASS__INTERFACE:
		return e.isInterface != false
	default:
		return e.EClassifierExt.EIsSetFromID(featureID)
	}
}

func (e *EClassImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case ECLASS__GET_EOPERATION_EINT:
		return e.asEClass().GetEOperation(arguments.Get(0).(int))
	case ECLASS__GET_ESTRUCTURAL_FEATURE_EINT:
		return e.asEClass().GetEStructuralFeature(arguments.Get(0).(int))
	case ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING:
		return e.asEClass().GetEStructuralFeatureFromName(arguments.Get(0).(string))
	case ECLASS__GET_FEATURE_COUNT:
		return e.asEClass().GetFeatureCount()
	case ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE:
		return e.asEClass().GetFeatureID(arguments.Get(0).(EStructuralFeature))
	case ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE:
		return e.asEClass().GetFeatureType(arguments.Get(0).(EStructuralFeature))
	case ECLASS__GET_OPERATION_COUNT:
		return e.asEClass().GetOperationCount()
	case ECLASS__GET_OPERATION_ID_EOPERATION:
		return e.asEClass().GetOperationID(arguments.Get(0).(EOperation))
	case ECLASS__GET_OVERRIDE_EOPERATION:
		return e.asEClass().GetOverride(arguments.Get(0).(EOperation))
	case ECLASS__IS_SUPER_TYPE_OF_ECLASS:
		return e.asEClass().IsSuperTypeOf(arguments.Get(0).(EClass))
	default:
		return e.EClassifierExt.EInvokeFromID(operationID, arguments)
	}
}

func (e *EClassImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASS__EOPERATIONS:
		list := e.GetEOperations().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	case ECLASS__ESTRUCTURAL_FEATURES:
		list := e.GetEStructuralFeatures().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	default:
		return e.EClassifierExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (e *EClassImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASS__EOPERATIONS:
		list := e.GetEOperations().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	case ECLASS__ESTRUCTURAL_FEATURES:
		list := e.GetEStructuralFeatures().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return e.EClassifierExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
