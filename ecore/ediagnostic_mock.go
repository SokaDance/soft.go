// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************
package ecore

import mock "github.com/stretchr/testify/mock"

// MockEDiagnostic is an autogenerated mock type for the EDiagnostic type
type MockEDiagnostic struct {
	mock.Mock
}

type MockEDiagnostic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEDiagnostic) EXPECT() *MockEDiagnostic_Expecter {
	return &MockEDiagnostic_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *MockEDiagnostic) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEDiagnostic_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockEDiagnostic_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockEDiagnostic_Expecter) Error() *MockEDiagnostic_Error_Call {
	return &MockEDiagnostic_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockEDiagnostic_Error_Call) Run(run func()) *MockEDiagnostic_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDiagnostic_Error_Call) Return(_a0 string) *MockEDiagnostic_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetColumn provides a mock function with given fields:
func (_m *MockEDiagnostic) GetColumn() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockEDiagnostic_GetColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColumn'
type MockEDiagnostic_GetColumn_Call struct {
	*mock.Call
}

// GetColumn is a helper method to define mock.On call
func (_e *MockEDiagnostic_Expecter) GetColumn() *MockEDiagnostic_GetColumn_Call {
	return &MockEDiagnostic_GetColumn_Call{Call: _e.mock.On("GetColumn")}
}

func (_c *MockEDiagnostic_GetColumn_Call) Run(run func()) *MockEDiagnostic_GetColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDiagnostic_GetColumn_Call) Return(_a0 int) *MockEDiagnostic_GetColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetLine provides a mock function with given fields:
func (_m *MockEDiagnostic) GetLine() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockEDiagnostic_GetLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLine'
type MockEDiagnostic_GetLine_Call struct {
	*mock.Call
}

// GetLine is a helper method to define mock.On call
func (_e *MockEDiagnostic_Expecter) GetLine() *MockEDiagnostic_GetLine_Call {
	return &MockEDiagnostic_GetLine_Call{Call: _e.mock.On("GetLine")}
}

func (_c *MockEDiagnostic_GetLine_Call) Run(run func()) *MockEDiagnostic_GetLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDiagnostic_GetLine_Call) Return(_a0 int) *MockEDiagnostic_GetLine_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetLocation provides a mock function with given fields:
func (_m *MockEDiagnostic) GetLocation() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEDiagnostic_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockEDiagnostic_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
func (_e *MockEDiagnostic_Expecter) GetLocation() *MockEDiagnostic_GetLocation_Call {
	return &MockEDiagnostic_GetLocation_Call{Call: _e.mock.On("GetLocation")}
}

func (_c *MockEDiagnostic_GetLocation_Call) Run(run func()) *MockEDiagnostic_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDiagnostic_GetLocation_Call) Return(_a0 string) *MockEDiagnostic_GetLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetMessage provides a mock function with given fields:
func (_m *MockEDiagnostic) GetMessage() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEDiagnostic_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type MockEDiagnostic_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
func (_e *MockEDiagnostic_Expecter) GetMessage() *MockEDiagnostic_GetMessage_Call {
	return &MockEDiagnostic_GetMessage_Call{Call: _e.mock.On("GetMessage")}
}

func (_c *MockEDiagnostic_GetMessage_Call) Run(run func()) *MockEDiagnostic_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDiagnostic_GetMessage_Call) Return(_a0 string) *MockEDiagnostic_GetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEDiagnostic interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEDiagnostic creates a new instance of MockEDiagnostic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEDiagnostic(t mockConstructorTestingTNewMockEDiagnostic) *MockEDiagnostic {
	mock := &MockEDiagnostic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
