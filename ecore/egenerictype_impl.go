// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EGenericTypeImpl is the implementation of the model object 'EGenericType'
type EGenericTypeImpl struct {
	CompactEObjectContainer
	eClassifier    EClassifier
	eLowerBound    EGenericType
	eRawType       EClassifier
	eTypeArguments EList
	eTypeParameter ETypeParameter
	eUpperBound    EGenericType
}
type eGenericTypeInitializers interface {
	initETypeArguments() EList
}

type eGenericTypeBasics interface {
	basicGetEClassifier() EClassifier
	basicSetELowerBound(EGenericType, ENotificationChain) ENotificationChain
	basicGetERawType() EClassifier
	basicSetEUpperBound(EGenericType, ENotificationChain) ENotificationChain
}

// newEGenericTypeImpl is the constructor of a EGenericTypeImpl
func newEGenericTypeImpl() *EGenericTypeImpl {
	e := new(EGenericTypeImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EGenericTypeImpl) Initialize() {
	e.CompactEObjectContainer.Initialize()

}

func (e *EGenericTypeImpl) asEGenericType() EGenericType {
	return e.GetInterfaces().(EGenericType)
}

func (e *EGenericTypeImpl) asInitializers() eGenericTypeInitializers {
	return e.GetInterfaces().(eGenericTypeInitializers)
}

func (e *EGenericTypeImpl) asBasics() eGenericTypeBasics {
	return e.GetInterfaces().(eGenericTypeBasics)
}

func (e *EGenericTypeImpl) EStaticClass() EClass {
	return GetPackage().GetEGenericType()
}

func (e *EGenericTypeImpl) EStaticFeatureCount() int {
	return EGENERIC_TYPE_FEATURE_COUNT
}

// IsInstance default implementation
func (e *EGenericTypeImpl) IsInstance(any) bool {
	panic("IsInstance not implemented")
}

// GetEClassifier get the value of eClassifier
func (e *EGenericTypeImpl) GetEClassifier() EClassifier {
	if e.eClassifier != nil && e.eClassifier.EIsProxy() {
		oldEClassifier := e.eClassifier
		newEClassifier := e.EResolveProxy(oldEClassifier).(EClassifier)
		e.eClassifier = newEClassifier
		if newEClassifier != oldEClassifier {
			if e.ENotificationRequired() {
				e.ENotify(NewNotificationByFeatureID(e, RESOLVE, EGENERIC_TYPE__ECLASSIFIER, oldEClassifier, newEClassifier, NO_INDEX))
			}
		}
	}
	return e.eClassifier
}

func (e *EGenericTypeImpl) basicGetEClassifier() EClassifier {
	return e.eClassifier
}

// SetEClassifier set the value of eClassifier
func (e *EGenericTypeImpl) SetEClassifier(newEClassifier EClassifier) {
	oldEClassifier := e.eClassifier
	e.eClassifier = newEClassifier
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EGENERIC_TYPE__ECLASSIFIER, oldEClassifier, newEClassifier, NO_INDEX))
	}
}

// GetELowerBound get the value of eLowerBound
func (e *EGenericTypeImpl) GetELowerBound() EGenericType {
	return e.eLowerBound
}

// SetELowerBound set the value of eLowerBound
func (e *EGenericTypeImpl) SetELowerBound(newELowerBound EGenericType) {
	if newELowerBound != e.eLowerBound {
		var notifications ENotificationChain
		if oldELowerBoundInternal, _ := e.eLowerBound.(EObjectInternal); oldELowerBoundInternal != nil {
			notifications = oldELowerBoundInternal.EInverseRemove(e, EOPPOSITE_FEATURE_BASE-EGENERIC_TYPE__ELOWER_BOUND, notifications)
		}
		if newELowerBoundInternal, _ := newELowerBound.(EObjectInternal); newELowerBoundInternal != nil {
			notifications = newELowerBoundInternal.EInverseAdd(e.AsEObject(), EOPPOSITE_FEATURE_BASE-EGENERIC_TYPE__ELOWER_BOUND, notifications)
		}
		notifications = e.asBasics().basicSetELowerBound(newELowerBound, notifications)
		if notifications != nil {
			notifications.Dispatch()
		}
	}
}

func (e *EGenericTypeImpl) basicSetELowerBound(newELowerBound EGenericType, msgs ENotificationChain) ENotificationChain {
	oldELowerBound := e.eLowerBound
	e.eLowerBound = newELowerBound
	notifications := msgs
	if e.ENotificationRequired() {
		notification := NewNotificationByFeatureID(e.AsEObject(), SET, EGENERIC_TYPE__ELOWER_BOUND, oldELowerBound, newELowerBound, NO_INDEX)
		if notifications != nil {
			notifications.Add(notification)
		} else {
			notifications = notification
		}
	}
	return notifications
}

// GetERawType get the value of eRawType
func (e *EGenericTypeImpl) GetERawType() EClassifier {
	if e.eRawType != nil && e.eRawType.EIsProxy() {
		oldERawType := e.eRawType
		newERawType := e.EResolveProxy(oldERawType).(EClassifier)
		e.eRawType = newERawType
		if newERawType != oldERawType {
			if e.ENotificationRequired() {
				e.ENotify(NewNotificationByFeatureID(e, RESOLVE, EGENERIC_TYPE__ERAW_TYPE, oldERawType, newERawType, NO_INDEX))
			}
		}
	}
	return e.eRawType
}

func (e *EGenericTypeImpl) basicGetERawType() EClassifier {
	return e.eRawType
}

// GetETypeArguments get the value of eTypeArguments
func (e *EGenericTypeImpl) GetETypeArguments() EList {
	if e.eTypeArguments == nil {
		e.eTypeArguments = e.asInitializers().initETypeArguments()
	}
	return e.eTypeArguments
}

// GetETypeParameter get the value of eTypeParameter
func (e *EGenericTypeImpl) GetETypeParameter() ETypeParameter {
	return e.eTypeParameter
}

// SetETypeParameter set the value of eTypeParameter
func (e *EGenericTypeImpl) SetETypeParameter(newETypeParameter ETypeParameter) {
	oldETypeParameter := e.eTypeParameter
	e.eTypeParameter = newETypeParameter
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EGENERIC_TYPE__ETYPE_PARAMETER, oldETypeParameter, newETypeParameter, NO_INDEX))
	}
}

// GetEUpperBound get the value of eUpperBound
func (e *EGenericTypeImpl) GetEUpperBound() EGenericType {
	return e.eUpperBound
}

// SetEUpperBound set the value of eUpperBound
func (e *EGenericTypeImpl) SetEUpperBound(newEUpperBound EGenericType) {
	if newEUpperBound != e.eUpperBound {
		var notifications ENotificationChain
		if oldEUpperBoundInternal, _ := e.eUpperBound.(EObjectInternal); oldEUpperBoundInternal != nil {
			notifications = oldEUpperBoundInternal.EInverseRemove(e, EOPPOSITE_FEATURE_BASE-EGENERIC_TYPE__EUPPER_BOUND, notifications)
		}
		if newEUpperBoundInternal, _ := newEUpperBound.(EObjectInternal); newEUpperBoundInternal != nil {
			notifications = newEUpperBoundInternal.EInverseAdd(e.AsEObject(), EOPPOSITE_FEATURE_BASE-EGENERIC_TYPE__EUPPER_BOUND, notifications)
		}
		notifications = e.asBasics().basicSetEUpperBound(newEUpperBound, notifications)
		if notifications != nil {
			notifications.Dispatch()
		}
	}
}

func (e *EGenericTypeImpl) basicSetEUpperBound(newEUpperBound EGenericType, msgs ENotificationChain) ENotificationChain {
	oldEUpperBound := e.eUpperBound
	e.eUpperBound = newEUpperBound
	notifications := msgs
	if e.ENotificationRequired() {
		notification := NewNotificationByFeatureID(e.AsEObject(), SET, EGENERIC_TYPE__EUPPER_BOUND, oldEUpperBound, newEUpperBound, NO_INDEX)
		if notifications != nil {
			notifications.Add(notification)
		} else {
			notifications = notification
		}
	}
	return notifications
}

func (e *EGenericTypeImpl) initETypeArguments() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), EGENERIC_TYPE__ETYPE_ARGUMENTS, -1, true, true, false, false, false)
}

func (e *EGenericTypeImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EGENERIC_TYPE__ECLASSIFIER:
		if resolve {
			return e.asEGenericType().GetEClassifier()
		}
		return e.asBasics().basicGetEClassifier()
	case EGENERIC_TYPE__ELOWER_BOUND:
		return e.asEGenericType().GetELowerBound()
	case EGENERIC_TYPE__ERAW_TYPE:
		if resolve {
			return e.asEGenericType().GetERawType()
		}
		return e.asBasics().basicGetERawType()
	case EGENERIC_TYPE__ETYPE_ARGUMENTS:
		return e.asEGenericType().GetETypeArguments()
	case EGENERIC_TYPE__ETYPE_PARAMETER:
		return e.asEGenericType().GetETypeParameter()
	case EGENERIC_TYPE__EUPPER_BOUND:
		return e.asEGenericType().GetEUpperBound()
	default:
		return e.CompactEObjectContainer.EGetFromID(featureID, resolve)
	}
}

func (e *EGenericTypeImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EGENERIC_TYPE__ECLASSIFIER:
		newValueOrNil, _ := newValue.(EClassifier)
		e.asEGenericType().SetEClassifier(newValueOrNil)
	case EGENERIC_TYPE__ELOWER_BOUND:
		newValueOrNil, _ := newValue.(EGenericType)
		e.asEGenericType().SetELowerBound(newValueOrNil)
	case EGENERIC_TYPE__ETYPE_ARGUMENTS:
		list := e.asEGenericType().GetETypeArguments()
		list.Clear()
		list.AddAll(newValue.(EList))
	case EGENERIC_TYPE__ETYPE_PARAMETER:
		newValueOrNil, _ := newValue.(ETypeParameter)
		e.asEGenericType().SetETypeParameter(newValueOrNil)
	case EGENERIC_TYPE__EUPPER_BOUND:
		newValueOrNil, _ := newValue.(EGenericType)
		e.asEGenericType().SetEUpperBound(newValueOrNil)
	default:
		e.CompactEObjectContainer.ESetFromID(featureID, newValue)
	}
}

func (e *EGenericTypeImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EGENERIC_TYPE__ECLASSIFIER:
		e.asEGenericType().SetEClassifier(nil)
	case EGENERIC_TYPE__ELOWER_BOUND:
		e.asEGenericType().SetELowerBound(nil)
	case EGENERIC_TYPE__ETYPE_ARGUMENTS:
		e.asEGenericType().GetETypeArguments().Clear()
	case EGENERIC_TYPE__ETYPE_PARAMETER:
		e.asEGenericType().SetETypeParameter(nil)
	case EGENERIC_TYPE__EUPPER_BOUND:
		e.asEGenericType().SetEUpperBound(nil)
	default:
		e.CompactEObjectContainer.EUnsetFromID(featureID)
	}
}

func (e *EGenericTypeImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EGENERIC_TYPE__ECLASSIFIER:
		return e.eClassifier != nil
	case EGENERIC_TYPE__ELOWER_BOUND:
		return e.eLowerBound != nil
	case EGENERIC_TYPE__ERAW_TYPE:
		return e.eRawType != nil
	case EGENERIC_TYPE__ETYPE_ARGUMENTS:
		return e.eTypeArguments != nil && e.eTypeArguments.Size() != 0
	case EGENERIC_TYPE__ETYPE_PARAMETER:
		return e.eTypeParameter != nil
	case EGENERIC_TYPE__EUPPER_BOUND:
		return e.eUpperBound != nil
	default:
		return e.CompactEObjectContainer.EIsSetFromID(featureID)
	}
}

func (e *EGenericTypeImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case EGENERIC_TYPE__IS_INSTANCE_EJAVAOBJECT:
		return e.asEGenericType().IsInstance(arguments.Get(0))
	default:
		return e.CompactEObjectContainer.EInvokeFromID(operationID, arguments)
	}
}

func (e *EGenericTypeImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EGENERIC_TYPE__ELOWER_BOUND:
		return e.asBasics().basicSetELowerBound(nil, notifications)
	case EGENERIC_TYPE__ETYPE_ARGUMENTS:
		list := e.GetETypeArguments().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	case EGENERIC_TYPE__EUPPER_BOUND:
		return e.asBasics().basicSetEUpperBound(nil, notifications)
	default:
		return e.CompactEObjectContainer.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
