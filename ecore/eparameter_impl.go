// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EParameterImpl is the implementation of the model object 'EParameter'
type EParameterImpl struct {
	ETypedElementExt
}

// newEParameterImpl is the constructor of a EParameterImpl
func newEParameterImpl() *EParameterImpl {
	eParameter := new(EParameterImpl)
	eParameter.SetInterfaces(eParameter)
	eParameter.Initialize()
	return eParameter
}

func (eParameter *EParameterImpl) asEParameter() EParameter {
	return eParameter.GetInterfaces().(EParameter)
}

func (eParameter *EParameterImpl) EStaticClass() EClass {
	return GetPackage().GetEParameter()
}

func (eParameter *EParameterImpl) EStaticFeatureCount() int {
	return EPARAMETER_FEATURE_COUNT
}

// GetEOperation get the value of eOperation
func (eParameter *EParameterImpl) GetEOperation() EOperation {
	if eParameter.EContainerFeatureID() == EPARAMETER__EOPERATION {
		return eParameter.EContainer().(EOperation)
	}
	return nil
}

func (eParameter *EParameterImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EPARAMETER__EOPERATION:
		return eParameter.asEParameter().GetEOperation()
	default:
		return eParameter.ETypedElementExt.EGetFromID(featureID, resolve)
	}
}

func (eParameter *EParameterImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EPARAMETER__EOPERATION:
		return eParameter.asEParameter().GetEOperation() != nil
	default:
		return eParameter.ETypedElementExt.EIsSetFromID(featureID)
	}
}

func (eParameter *EParameterImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EPARAMETER__EOPERATION:
		msgs := notifications
		if eParameter.EInternalContainer() != nil {
			msgs = eParameter.EBasicRemoveFromContainer(msgs)
		}
		return eParameter.EBasicSetContainer(otherEnd, EPARAMETER__EOPERATION, msgs)
	default:
		return eParameter.ETypedElementExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eParameter *EParameterImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EPARAMETER__EOPERATION:
		return eParameter.EBasicSetContainer(nil, EPARAMETER__EOPERATION, notifications)
	default:
		return eParameter.ETypedElementExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
