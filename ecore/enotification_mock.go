// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockENotification is an autogenerated mock type for the ENotification type
type MockENotification struct {
	mock.Mock
}

type MockENotification_Expecter struct {
	mock *mock.Mock
}

func (_m *MockENotification) EXPECT() *MockENotification_Expecter {
	return &MockENotification_Expecter{mock: &_m.Mock}
}

// GetEventType provides a mock function with given fields:
func (_m *MockENotification) GetEventType() EventType {
	ret := _m.Called()

	var r0 EventType
	if rf, ok := ret.Get(0).(func() EventType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(EventType)
	}

	return r0
}

// MockENotification_GetEventType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventType'
type MockENotification_GetEventType_Call struct {
	*mock.Call
}

// GetEventType is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetEventType() *MockENotification_GetEventType_Call {
	return &MockENotification_GetEventType_Call{Call: _e.mock.On("GetEventType")}
}

func (_c *MockENotification_GetEventType_Call) Run(run func()) *MockENotification_GetEventType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetEventType_Call) Return(_a0 EventType) *MockENotification_GetEventType_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFeature provides a mock function with given fields:
func (_m *MockENotification) GetFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// MockENotification_GetFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeature'
type MockENotification_GetFeature_Call struct {
	*mock.Call
}

// GetFeature is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetFeature() *MockENotification_GetFeature_Call {
	return &MockENotification_GetFeature_Call{Call: _e.mock.On("GetFeature")}
}

func (_c *MockENotification_GetFeature_Call) Run(run func()) *MockENotification_GetFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetFeature_Call) Return(_a0 EStructuralFeature) *MockENotification_GetFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetFeatureID provides a mock function with given fields:
func (_m *MockENotification) GetFeatureID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockENotification_GetFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureID'
type MockENotification_GetFeatureID_Call struct {
	*mock.Call
}

// GetFeatureID is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetFeatureID() *MockENotification_GetFeatureID_Call {
	return &MockENotification_GetFeatureID_Call{Call: _e.mock.On("GetFeatureID")}
}

func (_c *MockENotification_GetFeatureID_Call) Run(run func()) *MockENotification_GetFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetFeatureID_Call) Return(_a0 int) *MockENotification_GetFeatureID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetNewValue provides a mock function with given fields:
func (_m *MockENotification) GetNewValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockENotification_GetNewValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewValue'
type MockENotification_GetNewValue_Call struct {
	*mock.Call
}

// GetNewValue is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetNewValue() *MockENotification_GetNewValue_Call {
	return &MockENotification_GetNewValue_Call{Call: _e.mock.On("GetNewValue")}
}

func (_c *MockENotification_GetNewValue_Call) Run(run func()) *MockENotification_GetNewValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetNewValue_Call) Return(_a0 interface{}) *MockENotification_GetNewValue_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetNotifier provides a mock function with given fields:
func (_m *MockENotification) GetNotifier() ENotifier {
	ret := _m.Called()

	var r0 ENotifier
	if rf, ok := ret.Get(0).(func() ENotifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotifier)
		}
	}

	return r0
}

// MockENotification_GetNotifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotifier'
type MockENotification_GetNotifier_Call struct {
	*mock.Call
}

// GetNotifier is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetNotifier() *MockENotification_GetNotifier_Call {
	return &MockENotification_GetNotifier_Call{Call: _e.mock.On("GetNotifier")}
}

func (_c *MockENotification_GetNotifier_Call) Run(run func()) *MockENotification_GetNotifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetNotifier_Call) Return(_a0 ENotifier) *MockENotification_GetNotifier_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetOldValue provides a mock function with given fields:
func (_m *MockENotification) GetOldValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockENotification_GetOldValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldValue'
type MockENotification_GetOldValue_Call struct {
	*mock.Call
}

// GetOldValue is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetOldValue() *MockENotification_GetOldValue_Call {
	return &MockENotification_GetOldValue_Call{Call: _e.mock.On("GetOldValue")}
}

func (_c *MockENotification_GetOldValue_Call) Run(run func()) *MockENotification_GetOldValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetOldValue_Call) Return(_a0 interface{}) *MockENotification_GetOldValue_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetPosition provides a mock function with given fields:
func (_m *MockENotification) GetPosition() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockENotification_GetPosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosition'
type MockENotification_GetPosition_Call struct {
	*mock.Call
}

// GetPosition is a helper method to define mock.On call
func (_e *MockENotification_Expecter) GetPosition() *MockENotification_GetPosition_Call {
	return &MockENotification_GetPosition_Call{Call: _e.mock.On("GetPosition")}
}

func (_c *MockENotification_GetPosition_Call) Run(run func()) *MockENotification_GetPosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotification_GetPosition_Call) Return(_a0 int) *MockENotification_GetPosition_Call {
	_c.Call.Return(_a0)
	return _c
}

// Merge provides a mock function with given fields: _a0
func (_m *MockENotification) Merge(_a0 ENotification) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ENotification) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockENotification_Merge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Merge'
type MockENotification_Merge_Call struct {
	*mock.Call
}

// Merge is a helper method to define mock.On call
//   - _a0 ENotification
func (_e *MockENotification_Expecter) Merge(_a0 interface{}) *MockENotification_Merge_Call {
	return &MockENotification_Merge_Call{Call: _e.mock.On("Merge", _a0)}
}

func (_c *MockENotification_Merge_Call) Run(run func(_a0 ENotification)) *MockENotification_Merge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotification))
	})
	return _c
}

func (_c *MockENotification_Merge_Call) Return(_a0 bool) *MockENotification_Merge_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockENotification interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockENotification creates a new instance of MockENotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockENotification(t mockConstructorTestingTNewMockENotification) *MockENotification {
	mock := &MockENotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
