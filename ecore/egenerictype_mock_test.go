// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEGenericType() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEGenericTypeGetEClassifier tests method GetEClassifier
func TestMockEGenericTypeGetEClassifier(t *testing.T) {
	o := NewMockEGenericType(t)
	r := NewMockEClassifier(t)
	m := NewMockRun(t)
	o.EXPECT().GetEClassifier().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetEClassifier().Call.Return(func() EClassifier { return r }).Once()
	assert.Equal(t, r, o.GetEClassifier())
	assert.Equal(t, r, o.GetEClassifier())
}

// TestMockEGenericTypeSetEClassifier tests method SetEClassifier
func TestMockEGenericTypeSetEClassifier(t *testing.T) {
	o := NewMockEGenericType(t)
	v := NewMockEClassifier(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetEClassifier(v).Return().Run(func(_p0 EClassifier) { m.Run(_p0) }).Once()
	o.SetEClassifier(v)
}

// TestMockEGenericTypeGetELowerBound tests method GetELowerBound
func TestMockEGenericTypeGetELowerBound(t *testing.T) {
	o := NewMockEGenericType(t)
	r := NewMockEGenericType(t)
	m := NewMockRun(t)
	o.EXPECT().GetELowerBound().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetELowerBound().Call.Return(func() EGenericType { return r }).Once()
	assert.Equal(t, r, o.GetELowerBound())
	assert.Equal(t, r, o.GetELowerBound())
}

// TestMockEGenericTypeSetELowerBound tests method SetELowerBound
func TestMockEGenericTypeSetELowerBound(t *testing.T) {
	o := NewMockEGenericType(t)
	v := NewMockEGenericType(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetELowerBound(v).Return().Run(func(_p0 EGenericType) { m.Run(_p0) }).Once()
	o.SetELowerBound(v)
}

// TestMockEGenericTypeGetERawType tests method GetERawType
func TestMockEGenericTypeGetERawType(t *testing.T) {
	o := NewMockEGenericType(t)
	r := NewMockEClassifier(t)
	m := NewMockRun(t)
	o.EXPECT().GetERawType().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetERawType().Call.Return(func() EClassifier { return r }).Once()
	assert.Equal(t, r, o.GetERawType())
	assert.Equal(t, r, o.GetERawType())
}

// TestMockEGenericTypeGetETypeArguments tests method GetETypeArguments
func TestMockEGenericTypeGetETypeArguments(t *testing.T) {
	o := NewMockEGenericType(t)
	l := NewMockEList(t)
	m := NewMockRun(t)
	o.EXPECT().GetETypeArguments().Return(l).Run(func() { m.Run() }).Once()
	o.EXPECT().GetETypeArguments().Call.Return(func() EList { return l }).Once()
	assert.Equal(t, l, o.GetETypeArguments())
	assert.Equal(t, l, o.GetETypeArguments())
}

// TestMockEGenericTypeGetETypeParameter tests method GetETypeParameter
func TestMockEGenericTypeGetETypeParameter(t *testing.T) {
	o := NewMockEGenericType(t)
	r := NewMockETypeParameter(t)
	m := NewMockRun(t)
	o.EXPECT().GetETypeParameter().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetETypeParameter().Call.Return(func() ETypeParameter { return r }).Once()
	assert.Equal(t, r, o.GetETypeParameter())
	assert.Equal(t, r, o.GetETypeParameter())
}

// TestMockEGenericTypeSetETypeParameter tests method SetETypeParameter
func TestMockEGenericTypeSetETypeParameter(t *testing.T) {
	o := NewMockEGenericType(t)
	v := NewMockETypeParameter(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetETypeParameter(v).Return().Run(func(_p0 ETypeParameter) { m.Run(_p0) }).Once()
	o.SetETypeParameter(v)
}

// TestMockEGenericTypeGetEUpperBound tests method GetEUpperBound
func TestMockEGenericTypeGetEUpperBound(t *testing.T) {
	o := NewMockEGenericType(t)
	r := NewMockEGenericType(t)
	m := NewMockRun(t)
	o.EXPECT().GetEUpperBound().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetEUpperBound().Call.Return(func() EGenericType { return r }).Once()
	assert.Equal(t, r, o.GetEUpperBound())
	assert.Equal(t, r, o.GetEUpperBound())
}

// TestMockEGenericTypeSetEUpperBound tests method SetEUpperBound
func TestMockEGenericTypeSetEUpperBound(t *testing.T) {
	o := NewMockEGenericType(t)
	v := NewMockEGenericType(t)
	m := NewMockRun(t, v)
	o.EXPECT().SetEUpperBound(v).Return().Run(func(_p0 EGenericType) { m.Run(_p0) }).Once()
	o.SetEUpperBound(v)
}

// TestMockEGenericTypeIsInstance tests method IsInstance
func TestMockEGenericTypeIsInstance(t *testing.T) {
	o := NewMockEGenericType(t)
	object := any(nil)
	m := NewMockRun(t, object)
	r := bool(true)
	o.EXPECT().IsInstance(object).Return(r).Run(func(object any) { m.Run(object) }).Once()
	o.EXPECT().IsInstance(object).Call.Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.IsInstance(object))
	assert.Equal(t, r, o.IsInstance(object))
}
