// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "github.com/stretchr/testify/mock"

// MockEObject is an mock type for the EObject type
type MockEObject struct {
	mock.Mock
	MockEObject_Prototype
}

// MockEObject_Prototype is the mock implementation of all EObject methods ( inherited and declared )
type MockEObject_Prototype struct {
	mock *mock.Mock
	MockENotifier_Prototype
	MockEObject_Prototype_Methods
}

func (_mp *MockEObject_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
	_mp.MockENotifier_Prototype.SetMock(mock)
	_mp.MockEObject_Prototype_Methods.SetMock(mock)
}

// MockEObject_Expecter is the expecter implementation for all EObject methods ( inherited and declared )
type MockEObject_Expecter struct {
	MockENotifier_Expecter
	MockEObject_Expecter_Methods
}

func (_me *MockEObject_Expecter) SetMock(mock *mock.Mock) {
	_me.MockENotifier_Expecter.SetMock(mock)
	_me.MockEObject_Expecter_Methods.SetMock(mock)
}

func (eObject *MockEObject_Prototype) EXPECT() *MockEObject_Expecter {
	expecter := &MockEObject_Expecter{}
	expecter.SetMock(eObject.mock)
	return expecter
}

// MockEObject_Prototype_Methods is the mock implementation of EObject declared methods
type MockEObject_Prototype_Methods struct {
	mock *mock.Mock
}

func (_mdp *MockEObject_Prototype_Methods) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

// MockEObject_Expecter_Methods is the expecter implementation of EObject declared methods
type MockEObject_Expecter_Methods struct {
	mock *mock.Mock
}

func (_mde *MockEObject_Expecter_Methods) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}

// EAllContents provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EAllContents() EIterator {
	ret := eObject.mock.Called()

	var r EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EIterator)
		}
	}

	return r
}

type MockEObject_EAllContents_Call struct {
	*mock.Call
}

// EAllContents is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EAllContents() *MockEObject_EAllContents_Call {
	return &MockEObject_EAllContents_Call{Call: e.mock.On("EAllContents")}
}

func (c *MockEObject_EAllContents_Call) Run(run func()) *MockEObject_EAllContents_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EAllContents_Call) Return(_a0 EIterator) *MockEObject_EAllContents_Call {
	c.Call.Return(_a0)
	return c
}

// EClass provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EClass() EClass {
	ret := eObject.mock.Called()

	var r EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClass)
		}
	}

	return r
}

type MockEObject_EClass_Call struct {
	*mock.Call
}

// EClass is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EClass() *MockEObject_EClass_Call {
	return &MockEObject_EClass_Call{Call: e.mock.On("EClass")}
}

func (c *MockEObject_EClass_Call) Run(run func()) *MockEObject_EClass_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EClass_Call) Return(_a0 EClass) *MockEObject_EClass_Call {
	c.Call.Return(_a0)
	return c
}

// EContainer provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EContainer() EObject {
	ret := eObject.mock.Called()

	var r EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EObject)
		}
	}

	return r
}

type MockEObject_EContainer_Call struct {
	*mock.Call
}

// EContainer is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EContainer() *MockEObject_EContainer_Call {
	return &MockEObject_EContainer_Call{Call: e.mock.On("EContainer")}
}

func (c *MockEObject_EContainer_Call) Run(run func()) *MockEObject_EContainer_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EContainer_Call) Return(_a0 EObject) *MockEObject_EContainer_Call {
	c.Call.Return(_a0)
	return c
}

// EContainingFeature provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EContainingFeature() EStructuralFeature {
	ret := eObject.mock.Called()

	var r EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EStructuralFeature)
		}
	}

	return r
}

type MockEObject_EContainingFeature_Call struct {
	*mock.Call
}

// EContainingFeature is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EContainingFeature() *MockEObject_EContainingFeature_Call {
	return &MockEObject_EContainingFeature_Call{Call: e.mock.On("EContainingFeature")}
}

func (c *MockEObject_EContainingFeature_Call) Run(run func()) *MockEObject_EContainingFeature_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EContainingFeature_Call) Return(_a0 EStructuralFeature) *MockEObject_EContainingFeature_Call {
	c.Call.Return(_a0)
	return c
}

// EContainmentFeature provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EContainmentFeature() EReference {
	ret := eObject.mock.Called()

	var r EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EReference)
		}
	}

	return r
}

type MockEObject_EContainmentFeature_Call struct {
	*mock.Call
}

// EContainmentFeature is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EContainmentFeature() *MockEObject_EContainmentFeature_Call {
	return &MockEObject_EContainmentFeature_Call{Call: e.mock.On("EContainmentFeature")}
}

func (c *MockEObject_EContainmentFeature_Call) Run(run func()) *MockEObject_EContainmentFeature_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EContainmentFeature_Call) Return(_a0 EReference) *MockEObject_EContainmentFeature_Call {
	c.Call.Return(_a0)
	return c
}

// EContents provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EContents() EList {
	ret := eObject.mock.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEObject_EContents_Call struct {
	*mock.Call
}

// EContents is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EContents() *MockEObject_EContents_Call {
	return &MockEObject_EContents_Call{Call: e.mock.On("EContents")}
}

func (c *MockEObject_EContents_Call) Run(run func()) *MockEObject_EContents_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EContents_Call) Return(_a0 EList) *MockEObject_EContents_Call {
	c.Call.Return(_a0)
	return c
}

// ECrossReferences provides mock implementation
func (eObject *MockEObject_Prototype_Methods) ECrossReferences() EList {
	ret := eObject.mock.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

type MockEObject_ECrossReferences_Call struct {
	*mock.Call
}

// ECrossReferences is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) ECrossReferences() *MockEObject_ECrossReferences_Call {
	return &MockEObject_ECrossReferences_Call{Call: e.mock.On("ECrossReferences")}
}

func (c *MockEObject_ECrossReferences_Call) Run(run func()) *MockEObject_ECrossReferences_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_ECrossReferences_Call) Return(_a0 EList) *MockEObject_ECrossReferences_Call {
	c.Call.Return(_a0)
	return c
}

// EGet provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EGet(feature EStructuralFeature) any {
	ret := eObject.mock.Called(feature)

	var r any
	if rf, ok := ret.Get(0).(func() any); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0)
		}
	}

	return r
}

type MockEObject_EGet_Call struct {
	*mock.Call
}

// EGet is a helper method to define mock.On call
// - feature EStructuralFeature
func (e *MockEObject_Expecter_Methods) EGet(feature any) *MockEObject_EGet_Call {
	return &MockEObject_EGet_Call{Call: e.mock.On("EGet", feature)}
}

func (c *MockEObject_EGet_Call) Run(run func(EStructuralFeature)) *MockEObject_EGet_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EStructuralFeature))
	})
	return c
}

func (c *MockEObject_EGet_Call) Return(_a0 any) *MockEObject_EGet_Call {
	c.Call.Return(_a0)
	return c
}

// EGetResolve provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EGetResolve(feature EStructuralFeature, resolve bool) any {
	ret := eObject.mock.Called(feature, resolve)

	var r any
	if rf, ok := ret.Get(0).(func() any); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0)
		}
	}

	return r
}

type MockEObject_EGetResolve_Call struct {
	*mock.Call
}

// EGetResolve is a helper method to define mock.On call
// - feature EStructuralFeature
// - resolve bool
func (e *MockEObject_Expecter_Methods) EGetResolve(feature any, resolve any) *MockEObject_EGetResolve_Call {
	return &MockEObject_EGetResolve_Call{Call: e.mock.On("EGetResolve", feature, resolve)}
}

func (c *MockEObject_EGetResolve_Call) Run(run func(EStructuralFeature, bool)) *MockEObject_EGetResolve_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EStructuralFeature), _args[1].(bool))
	})
	return c
}

func (c *MockEObject_EGetResolve_Call) Return(_a0 any) *MockEObject_EGetResolve_Call {
	c.Call.Return(_a0)
	return c
}

// EInvoke provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EInvoke(operation EOperation, arguments EList) any {
	ret := eObject.mock.Called(operation, arguments)

	var r any
	if rf, ok := ret.Get(0).(func() any); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0)
		}
	}

	return r
}

type MockEObject_EInvoke_Call struct {
	*mock.Call
}

// EInvoke is a helper method to define mock.On call
// - operation EOperation
// - arguments EList
func (e *MockEObject_Expecter_Methods) EInvoke(operation any, arguments any) *MockEObject_EInvoke_Call {
	return &MockEObject_EInvoke_Call{Call: e.mock.On("EInvoke", operation, arguments)}
}

func (c *MockEObject_EInvoke_Call) Run(run func(EOperation, EList)) *MockEObject_EInvoke_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EOperation), _args[1].(EList))
	})
	return c
}

func (c *MockEObject_EInvoke_Call) Return(_a0 any) *MockEObject_EInvoke_Call {
	c.Call.Return(_a0)
	return c
}

// EIsProxy provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EIsProxy() bool {
	ret := eObject.mock.Called()

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

type MockEObject_EIsProxy_Call struct {
	*mock.Call
}

// EIsProxy is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EIsProxy() *MockEObject_EIsProxy_Call {
	return &MockEObject_EIsProxy_Call{Call: e.mock.On("EIsProxy")}
}

func (c *MockEObject_EIsProxy_Call) Run(run func()) *MockEObject_EIsProxy_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EIsProxy_Call) Return(_a0 bool) *MockEObject_EIsProxy_Call {
	c.Call.Return(_a0)
	return c
}

// EIsSet provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EIsSet(feature EStructuralFeature) bool {
	ret := eObject.mock.Called(feature)

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

type MockEObject_EIsSet_Call struct {
	*mock.Call
}

// EIsSet is a helper method to define mock.On call
// - feature EStructuralFeature
func (e *MockEObject_Expecter_Methods) EIsSet(feature any) *MockEObject_EIsSet_Call {
	return &MockEObject_EIsSet_Call{Call: e.mock.On("EIsSet", feature)}
}

func (c *MockEObject_EIsSet_Call) Run(run func(EStructuralFeature)) *MockEObject_EIsSet_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EStructuralFeature))
	})
	return c
}

func (c *MockEObject_EIsSet_Call) Return(_a0 bool) *MockEObject_EIsSet_Call {
	c.Call.Return(_a0)
	return c
}

// EResource provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EResource() EResource {
	ret := eObject.mock.Called()

	var r EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EResource)
		}
	}

	return r
}

type MockEObject_EResource_Call struct {
	*mock.Call
}

// EResource is a helper method to define mock.On call
func (e *MockEObject_Expecter_Methods) EResource() *MockEObject_EResource_Call {
	return &MockEObject_EResource_Call{Call: e.mock.On("EResource")}
}

func (c *MockEObject_EResource_Call) Run(run func()) *MockEObject_EResource_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEObject_EResource_Call) Return(_a0 EResource) *MockEObject_EResource_Call {
	c.Call.Return(_a0)
	return c
}

// ESet provides mock implementation
func (eObject *MockEObject_Prototype_Methods) ESet(feature EStructuralFeature, newValue any) {
	eObject.mock.Called(feature, newValue)
}

type MockEObject_ESet_Call struct {
	*mock.Call
}

func (e *MockEObject_Expecter_Methods) ESet(feature EStructuralFeature, newValue any) *MockEObject_ESet_Call {
	return &MockEObject_ESet_Call{Call: e.mock.On("ESet", feature, newValue)}
}

func (c *MockEObject_ESet_Call) Run(run func(EStructuralFeature, any)) *MockEObject_ESet_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EStructuralFeature), _args[1])
	})
	return c
}

func (c *MockEObject_ESet_Call) Return() *MockEObject_ESet_Call {
	c.Call.Return()
	return c
} // EUnset provides mock implementation
func (eObject *MockEObject_Prototype_Methods) EUnset(feature EStructuralFeature) {
	eObject.mock.Called(feature)
}

type MockEObject_EUnset_Call struct {
	*mock.Call
}

func (e *MockEObject_Expecter_Methods) EUnset(feature EStructuralFeature) *MockEObject_EUnset_Call {
	return &MockEObject_EUnset_Call{Call: e.mock.On("EUnset", feature)}
}

func (c *MockEObject_EUnset_Call) Run(run func(EStructuralFeature)) *MockEObject_EUnset_Call {
	c.Call.Run(func(_args mock.Arguments) {
		run(_args[0].(EStructuralFeature))
	})
	return c
}

func (c *MockEObject_EUnset_Call) Return() *MockEObject_EUnset_Call {
	c.Call.Return()
	return c
}

type mockConstructorTestingTNewMockEObject interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEObject creates a new instance of MockEObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEObject(t mockConstructorTestingTNewMockEObject) *MockEObject {
	mock := &MockEObject{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
