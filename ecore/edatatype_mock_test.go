// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEDataType() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEDataTypeRun struct {
	mock.Mock
}

func (m *mockEDataTypeRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEDataTypeRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEDataTypeRun creates a new instance of mockEDataTypeRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEDataTypeRun(t mockConstructorTestingTmockEDataTypeRun, args ...any) *mockEDataTypeRun {
	mock := &mockEDataTypeRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEDataTypeIsSerializable tests method IsSerializable
func TestMockEDataTypeIsSerializable(t *testing.T) {
	o := NewMockEDataType(t)
	r := bool(true)
	m := newMockEDataTypeRun(t)
	o.EXPECT().IsSerializable().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsSerializable().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsSerializable())
	assert.Equal(t, r, o.IsSerializable())
}

// TestMockEDataTypeSetSerializable tests method SetSerializable
func TestMockEDataTypeSetSerializable(t *testing.T) {
	o := &MockEDataType{}
	v := bool(true)
	o.On("SetSerializable", v).Once()
	o.SetSerializable(v)
	o.AssertExpectations(t)
}
