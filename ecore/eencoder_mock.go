// Code generated by mockery v2.16.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEEncoder is an autogenerated mock type for the EEncoder type
type MockEEncoder struct {
	mock.Mock
}

type MockEEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEEncoder) EXPECT() *MockEEncoder_Expecter {
	return &MockEEncoder_Expecter{mock: &_m.Mock}
}

// EncodeResource provides a mock function with given fields:
func (_m *MockEEncoder) EncodeResource() {
	_m.Called()
}

// MockEEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeResource'
type MockEEncoder_Encode_Call struct {
	*mock.Call
}

// EncodeResource is a helper method to define mock.On call
func (_e *MockEEncoder_Expecter) EncodeResource() *MockEEncoder_Encode_Call {
	return &MockEEncoder_Encode_Call{Call: _e.mock.On("EncodeResource")}
}

func (_c *MockEEncoder_Encode_Call) Run(run func()) *MockEEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEEncoder_Encode_Call) Return() *MockEEncoder_Encode_Call {
	_c.Call.Return()
	return _c
}

// EncodeObject provides a mock function with given fields: object
func (_m *MockEEncoder) EncodeObject(object EObject) error {
	ret := _m.Called(object)

	var r0 error
	if rf, ok := ret.Get(0).(func(EObject) error); ok {
		r0 = rf(object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEEncoder_EncodeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeObject'
type MockEEncoder_EncodeObject_Call struct {
	*mock.Call
}

// EncodeObject is a helper method to define mock.On call
//   - object EObject
func (_e *MockEEncoder_Expecter) EncodeObject(object interface{}) *MockEEncoder_EncodeObject_Call {
	return &MockEEncoder_EncodeObject_Call{Call: _e.mock.On("EncodeObject", object)}
}

func (_c *MockEEncoder_EncodeObject_Call) Run(run func(object EObject)) *MockEEncoder_EncodeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEEncoder_EncodeObject_Call) Return(_a0 error) *MockEEncoder_EncodeObject_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEEncoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEEncoder creates a new instance of MockEEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEEncoder(t mockConstructorTestingTNewMockEEncoder) *MockEEncoder {
	mock := &MockEEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
