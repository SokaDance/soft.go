// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEStringToStringMapEntry struct {
	MockEObjectInternal
}

type MockEStringToStringMapEntry_Expecter struct {
	MockEObjectInternal_Expecter
}

func (eStringToStringMapEntry *MockEStringToStringMapEntry) EXPECT() *MockEStringToStringMapEntry_Expecter {
	e := &MockEStringToStringMapEntry_Expecter{}
	e.Mock = &eStringToStringMapEntry.Mock
	return e
}

// GetTypedKey get the value of key
func (eStringToStringMapEntry *MockEStringToStringMapEntry) GetTypedKey() string {
	ret := eStringToStringMapEntry.Called()

	var r string
	if rf, ok := ret.Get(0).(func() string); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(string)
		}
	}

	return r
}

type MockEStringToStringMapEntry_GetTypedKey_Call struct {
	*mock.Call
}

func (e *MockEStringToStringMapEntry_Expecter) GetTypedKey() *MockEStringToStringMapEntry_GetTypedKey_Call {
	return &MockEStringToStringMapEntry_GetTypedKey_Call{Call: e.Mock.On("GetTypedKey")}
}

func (c *MockEStringToStringMapEntry_GetTypedKey_Call) Run(run func()) *MockEStringToStringMapEntry_GetTypedKey_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEStringToStringMapEntry_GetTypedKey_Call) Return(key string) *MockEStringToStringMapEntry_GetTypedKey_Call {
	c.Call.Return(key)
	return c
}

// SetTypedKey provides mock implementation for setting the value of key
func (eStringToStringMapEntry *MockEStringToStringMapEntry) SetTypedKey(key string) {
	eStringToStringMapEntry.Called(key)
}

type MockEStringToStringMapEntry_SetTypedKey_Call struct {
	*mock.Call
}

// SetTypedKeyis a helper method to define mock.On call
// - key string
func (e *MockEStringToStringMapEntry_Expecter) SetTypedKey(key any) *MockEStringToStringMapEntry_SetTypedKey_Call {
	return &MockEStringToStringMapEntry_SetTypedKey_Call{Call: e.Mock.On("SetTypedKey", key)}
}

func (c *MockEStringToStringMapEntry_SetTypedKey_Call) Run(run func(key string)) *MockEStringToStringMapEntry_SetTypedKey_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return c
}

func (c *MockEStringToStringMapEntry_SetTypedKey_Call) Return() *MockEStringToStringMapEntry_SetTypedKey_Call {
	c.Call.Return()
	return c
}

// GetTypedValue get the value of value
func (eStringToStringMapEntry *MockEStringToStringMapEntry) GetTypedValue() string {
	ret := eStringToStringMapEntry.Called()

	var r string
	if rf, ok := ret.Get(0).(func() string); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(string)
		}
	}

	return r
}

type MockEStringToStringMapEntry_GetTypedValue_Call struct {
	*mock.Call
}

func (e *MockEStringToStringMapEntry_Expecter) GetTypedValue() *MockEStringToStringMapEntry_GetTypedValue_Call {
	return &MockEStringToStringMapEntry_GetTypedValue_Call{Call: e.Mock.On("GetTypedValue")}
}

func (c *MockEStringToStringMapEntry_GetTypedValue_Call) Run(run func()) *MockEStringToStringMapEntry_GetTypedValue_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEStringToStringMapEntry_GetTypedValue_Call) Return(value string) *MockEStringToStringMapEntry_GetTypedValue_Call {
	c.Call.Return(value)
	return c
}

// SetTypedValue provides mock implementation for setting the value of value
func (eStringToStringMapEntry *MockEStringToStringMapEntry) SetTypedValue(value string) {
	eStringToStringMapEntry.Called(value)
}

type MockEStringToStringMapEntry_SetTypedValue_Call struct {
	*mock.Call
}

// SetTypedValueis a helper method to define mock.On call
// - value string
func (e *MockEStringToStringMapEntry_Expecter) SetTypedValue(value any) *MockEStringToStringMapEntry_SetTypedValue_Call {
	return &MockEStringToStringMapEntry_SetTypedValue_Call{Call: e.Mock.On("SetTypedValue", value)}
}

func (c *MockEStringToStringMapEntry_SetTypedValue_Call) Run(run func(value string)) *MockEStringToStringMapEntry_SetTypedValue_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return c
}

func (c *MockEStringToStringMapEntry_SetTypedValue_Call) Return() *MockEStringToStringMapEntry_SetTypedValue_Call {
	c.Call.Return()
	return c
}

type mockConstructorTestingTNewMockEStringToStringMapEntry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEStringToStringMapEntry creates a new instance of MockEStringToStringMapEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEStringToStringMapEntry(t mockConstructorTestingTNewMockEStringToStringMapEntry) *MockEStringToStringMapEntry {
	mock := &MockEStringToStringMapEntry{}
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
