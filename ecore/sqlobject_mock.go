package ecore

import mock "github.com/stretchr/testify/mock"

// MockSQLObject_Prototype_Methods is an autogenerated mock type for the SQLObject type
type MockSQLObject struct {
	MockSQLObject_Prototype
	mock.Mock
}

type MockSQLObject_Prototype struct {
	mock *mock.Mock
	MockEObject_Prototype
	MockSQLObject_Prototype_Methods
}

func (_mp *MockSQLObject_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
	_mp.MockEObject_Prototype.SetMock(mock)
	_mp.MockSQLObject_Prototype_Methods.SetMock(mock)
}

type MockSQLObject_Expecter struct {
	MockEObject_Expecter
	MockSQLObject_Expecter_Methods
}

func (_mp *MockSQLObject_Expecter) SetMock(mock *mock.Mock) {
	_mp.MockEObject_Expecter.SetMock(mock)
	_mp.MockSQLObject_Expecter_Methods.SetMock(mock)
}

type MockSQLObject_Prototype_Methods struct {
	mock *mock.Mock
}

func (_mdp *MockSQLObject_Prototype_Methods) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

type MockSQLObject_Expecter_Methods struct {
	mock *mock.Mock
}

func (_mde *MockSQLObject_Expecter_Methods) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}

func (_m *MockSQLObject_Prototype) EXPECT() *MockSQLObject_Expecter {
	e := &MockSQLObject_Expecter{}
	e.SetMock(_m.mock)
	return e
}

// GetSQLID provides a mock function with given fields:
func (_m *MockSQLObject_Prototype_Methods) GetSQLID() int64 {
	ret := _m.mock.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockSQLObject_GetSQLID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSQLID'
type MockSQLObject_GetSQLID_Call struct {
	*mock.Call
}

// GetSQLID is a helper method to define mock.On call
func (_e *MockSQLObject_Expecter_Methods) GetSQLID() *MockSQLObject_GetSQLID_Call {
	return &MockSQLObject_GetSQLID_Call{Call: _e.mock.On("GetSQLID")}
}

func (_c *MockSQLObject_GetSQLID_Call) Run(run func()) *MockSQLObject_GetSQLID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSQLObject_GetSQLID_Call) Return(_a0 int64) *MockSQLObject_GetSQLID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSQLObject_GetSQLID_Call) RunAndReturn(run func() int64) *MockSQLObject_GetSQLID_Call {
	_c.Call.Return(run)
	return _c
}

// SetSQLID provides a mock function with given fields: _a0
func (_m *MockSQLObject_Prototype_Methods) SetSQLID(_a0 int64) {
	_m.mock.Called(_a0)
}

// MockSQLObject_SetSQLID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSQLID'
type MockSQLObject_SetSQLID_Call struct {
	*mock.Call
}

// SetSQLID is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockSQLObject_Expecter_Methods) SetSQLID(_a0 interface{}) *MockSQLObject_SetSQLID_Call {
	return &MockSQLObject_SetSQLID_Call{Call: _e.mock.On("SetSQLID", _a0)}
}

func (_c *MockSQLObject_SetSQLID_Call) Run(run func(_a0 int64)) *MockSQLObject_SetSQLID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockSQLObject_SetSQLID_Call) Return() *MockSQLObject_SetSQLID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSQLObject_SetSQLID_Call) RunAndReturn(run func(int64)) *MockSQLObject_SetSQLID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSQLObject creates a new instance of MockSQLObject_Prototype_Methods. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSQLObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSQLObject {
	mock := &MockSQLObject{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
