// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEResourceDecoder is an autogenerated mock type for the EResourceDecoder type
type MockEResourceDecoder struct {
	mock.Mock
}

type MockEResourceDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEResourceDecoder) EXPECT() *MockEResourceDecoder_Expecter {
	return &MockEResourceDecoder_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields:
func (_m *MockEResourceDecoder) Decode() {
	_m.Called()
}

// MockEResourceDecoder_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockEResourceDecoder_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
func (_e *MockEResourceDecoder_Expecter) Decode() *MockEResourceDecoder_Decode_Call {
	return &MockEResourceDecoder_Decode_Call{Call: _e.mock.On("Decode")}
}

func (_c *MockEResourceDecoder_Decode_Call) Run(run func()) *MockEResourceDecoder_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceDecoder_Decode_Call) Return() *MockEResourceDecoder_Decode_Call {
	_c.Call.Return()
	return _c
}

// DecodeObject provides a mock function with given fields:
func (_m *MockEResourceDecoder) DecodeObject() (EObject, error) {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEResourceDecoder_DecodeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeObject'
type MockEResourceDecoder_DecodeObject_Call struct {
	*mock.Call
}

// DecodeObject is a helper method to define mock.On call
func (_e *MockEResourceDecoder_Expecter) DecodeObject() *MockEResourceDecoder_DecodeObject_Call {
	return &MockEResourceDecoder_DecodeObject_Call{Call: _e.mock.On("DecodeObject")}
}

func (_c *MockEResourceDecoder_DecodeObject_Call) Run(run func()) *MockEResourceDecoder_DecodeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceDecoder_DecodeObject_Call) Return(_a0 EObject, _a1 error) *MockEResourceDecoder_DecodeObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockEResourceDecoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEResourceDecoder creates a new instance of MockEResourceDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEResourceDecoder(t mockConstructorTestingTNewMockEResourceDecoder) *MockEResourceDecoder {
	mock := &MockEResourceDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
