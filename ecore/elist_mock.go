// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEList is an autogenerated mock type for the EList type
type MockEList struct {
	mock.Mock
}

type MockEList_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEList) EXPECT() *MockEList_Expecter {
	return &MockEList_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: element
func (_m *MockEList) Add(element interface{}) bool {
	ret := _m.Called(element)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockEList_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - element interface{}
func (_e *MockEList_Expecter) Add(element interface{}) *MockEList_Add_Call {
	return &MockEList_Add_Call{Call: _e.mock.On("Add", element)}
}

func (_c *MockEList_Add_Call) Run(run func(element interface{})) *MockEList_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEList_Add_Call) Return(_a0 bool) *MockEList_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// AddAll provides a mock function with given fields: collection
func (_m *MockEList) AddAll(collection EList) bool {
	ret := _m.Called(collection)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EList) bool); ok {
		r0 = rf(collection)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_AddAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAll'
type MockEList_AddAll_Call struct {
	*mock.Call
}

// AddAll is a helper method to define mock.On call
//   - collection EList
func (_e *MockEList_Expecter) AddAll(collection interface{}) *MockEList_AddAll_Call {
	return &MockEList_AddAll_Call{Call: _e.mock.On("AddAll", collection)}
}

func (_c *MockEList_AddAll_Call) Run(run func(collection EList)) *MockEList_AddAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EList))
	})
	return _c
}

func (_c *MockEList_AddAll_Call) Return(_a0 bool) *MockEList_AddAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// Clear provides a mock function with given fields:
func (_m *MockEList) Clear() {
	_m.Called()
}

// MockEList_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockEList_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockEList_Expecter) Clear() *MockEList_Clear_Call {
	return &MockEList_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockEList_Clear_Call) Run(run func()) *MockEList_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEList_Clear_Call) Return() *MockEList_Clear_Call {
	_c.Call.Return()
	return _c
}

// Contains provides a mock function with given fields: element
func (_m *MockEList) Contains(element interface{}) bool {
	ret := _m.Called(element)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_Contains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contains'
type MockEList_Contains_Call struct {
	*mock.Call
}

// Contains is a helper method to define mock.On call
//   - element interface{}
func (_e *MockEList_Expecter) Contains(element interface{}) *MockEList_Contains_Call {
	return &MockEList_Contains_Call{Call: _e.mock.On("Contains", element)}
}

func (_c *MockEList_Contains_Call) Run(run func(element interface{})) *MockEList_Contains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEList_Contains_Call) Return(_a0 bool) *MockEList_Contains_Call {
	_c.Call.Return(_a0)
	return _c
}

// Empty provides a mock function with given fields:
func (_m *MockEList) Empty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type MockEList_Empty_Call struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
func (_e *MockEList_Expecter) Empty() *MockEList_Empty_Call {
	return &MockEList_Empty_Call{Call: _e.mock.On("Empty")}
}

func (_c *MockEList_Empty_Call) Run(run func()) *MockEList_Empty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEList_Empty_Call) Return(_a0 bool) *MockEList_Empty_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: index
func (_m *MockEList) Get(index int) interface{} {
	ret := _m.Called(index)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEList_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEList_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - index int
func (_e *MockEList_Expecter) Get(index interface{}) *MockEList_Get_Call {
	return &MockEList_Get_Call{Call: _e.mock.On("Get", index)}
}

func (_c *MockEList_Get_Call) Run(run func(index int)) *MockEList_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockEList_Get_Call) Return(_a0 interface{}) *MockEList_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

// IndexOf provides a mock function with given fields: _a0
func (_m *MockEList) IndexOf(_a0 interface{}) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(interface{}) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockEList_IndexOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexOf'
type MockEList_IndexOf_Call struct {
	*mock.Call
}

// IndexOf is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockEList_Expecter) IndexOf(_a0 interface{}) *MockEList_IndexOf_Call {
	return &MockEList_IndexOf_Call{Call: _e.mock.On("IndexOf", _a0)}
}

func (_c *MockEList_IndexOf_Call) Run(run func(_a0 interface{})) *MockEList_IndexOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEList_IndexOf_Call) Return(_a0 int) *MockEList_IndexOf_Call {
	_c.Call.Return(_a0)
	return _c
}

// Insert provides a mock function with given fields: index, element
func (_m *MockEList) Insert(index int, element interface{}) bool {
	ret := _m.Called(index, element)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, interface{}) bool); ok {
		r0 = rf(index, element)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockEList_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - index int
//   - element interface{}
func (_e *MockEList_Expecter) Insert(index interface{}, element interface{}) *MockEList_Insert_Call {
	return &MockEList_Insert_Call{Call: _e.mock.On("Insert", index, element)}
}

func (_c *MockEList_Insert_Call) Run(run func(index int, element interface{})) *MockEList_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1])
	})
	return _c
}

func (_c *MockEList_Insert_Call) Return(_a0 bool) *MockEList_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// InsertAll provides a mock function with given fields: index, element
func (_m *MockEList) InsertAll(index int, element EList) bool {
	ret := _m.Called(index, element)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, EList) bool); ok {
		r0 = rf(index, element)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_InsertAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAll'
type MockEList_InsertAll_Call struct {
	*mock.Call
}

// InsertAll is a helper method to define mock.On call
//   - index int
//   - element EList
func (_e *MockEList_Expecter) InsertAll(index interface{}, element interface{}) *MockEList_InsertAll_Call {
	return &MockEList_InsertAll_Call{Call: _e.mock.On("InsertAll", index, element)}
}

func (_c *MockEList_InsertAll_Call) Run(run func(index int, element EList)) *MockEList_InsertAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(EList))
	})
	return _c
}

func (_c *MockEList_InsertAll_Call) Return(_a0 bool) *MockEList_InsertAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// Iterator provides a mock function with given fields:
func (_m *MockEList) Iterator() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// MockEList_Iterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterator'
type MockEList_Iterator_Call struct {
	*mock.Call
}

// Iterator is a helper method to define mock.On call
func (_e *MockEList_Expecter) Iterator() *MockEList_Iterator_Call {
	return &MockEList_Iterator_Call{Call: _e.mock.On("Iterator")}
}

func (_c *MockEList_Iterator_Call) Run(run func()) *MockEList_Iterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEList_Iterator_Call) Return(_a0 EIterator) *MockEList_Iterator_Call {
	_c.Call.Return(_a0)
	return _c
}

// Move provides a mock function with given fields: oldIndex, newIndex
func (_m *MockEList) Move(oldIndex int, newIndex int) interface{} {
	ret := _m.Called(oldIndex, newIndex)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int, int) interface{}); ok {
		r0 = rf(oldIndex, newIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEList_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockEList_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - oldIndex int
//   - newIndex int
func (_e *MockEList_Expecter) Move(oldIndex interface{}, newIndex interface{}) *MockEList_Move_Call {
	return &MockEList_Move_Call{Call: _e.mock.On("Move", oldIndex, newIndex)}
}

func (_c *MockEList_Move_Call) Run(run func(oldIndex int, newIndex int)) *MockEList_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockEList_Move_Call) Return(_a0 interface{}) *MockEList_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

// MoveObject provides a mock function with given fields: index, element
func (_m *MockEList) MoveObject(index int, element interface{}) {
	_m.Called(index, element)
}

// MockEList_MoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveObject'
type MockEList_MoveObject_Call struct {
	*mock.Call
}

// MoveObject is a helper method to define mock.On call
//   - index int
//   - element interface{}
func (_e *MockEList_Expecter) MoveObject(index interface{}, element interface{}) *MockEList_MoveObject_Call {
	return &MockEList_MoveObject_Call{Call: _e.mock.On("MoveObject", index, element)}
}

func (_c *MockEList_MoveObject_Call) Run(run func(index int, element interface{})) *MockEList_MoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1])
	})
	return _c
}

func (_c *MockEList_MoveObject_Call) Return() *MockEList_MoveObject_Call {
	_c.Call.Return()
	return _c
}

// Remove provides a mock function with given fields: element
func (_m *MockEList) Remove(element interface{}) bool {
	ret := _m.Called(element)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockEList_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - element interface{}
func (_e *MockEList_Expecter) Remove(element interface{}) *MockEList_Remove_Call {
	return &MockEList_Remove_Call{Call: _e.mock.On("Remove", element)}
}

func (_c *MockEList_Remove_Call) Run(run func(element interface{})) *MockEList_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEList_Remove_Call) Return(_a0 bool) *MockEList_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveAll provides a mock function with given fields: collection
func (_m *MockEList) RemoveAll(collection EList) bool {
	ret := _m.Called(collection)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EList) bool); ok {
		r0 = rf(collection)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEList_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockEList_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - collection EList
func (_e *MockEList_Expecter) RemoveAll(collection interface{}) *MockEList_RemoveAll_Call {
	return &MockEList_RemoveAll_Call{Call: _e.mock.On("RemoveAll", collection)}
}

func (_c *MockEList_RemoveAll_Call) Run(run func(collection EList)) *MockEList_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EList))
	})
	return _c
}

func (_c *MockEList_RemoveAll_Call) Return(_a0 bool) *MockEList_RemoveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveAt provides a mock function with given fields: index
func (_m *MockEList) RemoveAt(index int) interface{} {
	ret := _m.Called(index)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEList_RemoveAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAt'
type MockEList_RemoveAt_Call struct {
	*mock.Call
}

// RemoveAt is a helper method to define mock.On call
//   - index int
func (_e *MockEList_Expecter) RemoveAt(index interface{}) *MockEList_RemoveAt_Call {
	return &MockEList_RemoveAt_Call{Call: _e.mock.On("RemoveAt", index)}
}

func (_c *MockEList_RemoveAt_Call) Run(run func(index int)) *MockEList_RemoveAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockEList_RemoveAt_Call) Return(_a0 interface{}) *MockEList_RemoveAt_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveRange provides a mock function with given fields: fromIndex, toIndex
func (_m *MockEList) RemoveRange(fromIndex int, toIndex int) {
	_m.Called(fromIndex, toIndex)
}

// MockEList_RemoveRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRange'
type MockEList_RemoveRange_Call struct {
	*mock.Call
}

// RemoveRange is a helper method to define mock.On call
//   - fromIndex int
//   - toIndex int
func (_e *MockEList_Expecter) RemoveRange(fromIndex interface{}, toIndex interface{}) *MockEList_RemoveRange_Call {
	return &MockEList_RemoveRange_Call{Call: _e.mock.On("RemoveRange", fromIndex, toIndex)}
}

func (_c *MockEList_RemoveRange_Call) Run(run func(fromIndex int, toIndex int)) *MockEList_RemoveRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockEList_RemoveRange_Call) Return() *MockEList_RemoveRange_Call {
	_c.Call.Return()
	return _c
}

// Set provides a mock function with given fields: index, element
func (_m *MockEList) Set(index int, element interface{}) interface{} {
	ret := _m.Called(index, element)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int, interface{}) interface{}); ok {
		r0 = rf(index, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEList_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockEList_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - index int
//   - element interface{}
func (_e *MockEList_Expecter) Set(index interface{}, element interface{}) *MockEList_Set_Call {
	return &MockEList_Set_Call{Call: _e.mock.On("Set", index, element)}
}

func (_c *MockEList_Set_Call) Run(run func(index int, element interface{})) *MockEList_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1])
	})
	return _c
}

func (_c *MockEList_Set_Call) Return(_a0 interface{}) *MockEList_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

// Size provides a mock function with given fields:
func (_m *MockEList) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockEList_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockEList_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockEList_Expecter) Size() *MockEList_Size_Call {
	return &MockEList_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockEList_Size_Call) Run(run func()) *MockEList_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEList_Size_Call) Return(_a0 int) *MockEList_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

// ToArray provides a mock function with given fields:
func (_m *MockEList) ToArray() []interface{} {
	ret := _m.Called()

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockEList_ToArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToArray'
type MockEList_ToArray_Call struct {
	*mock.Call
}

// ToArray is a helper method to define mock.On call
func (_e *MockEList_Expecter) ToArray() *MockEList_ToArray_Call {
	return &MockEList_ToArray_Call{Call: _e.mock.On("ToArray")}
}

func (_c *MockEList_ToArray_Call) Run(run func()) *MockEList_ToArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEList_ToArray_Call) Return(_a0 []interface{}) *MockEList_ToArray_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEList interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEList creates a new instance of MockEList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEList(t mockConstructorTestingTNewMockEList) *MockEList {
	mock := &MockEList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
