// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEResourceCodecRegistry is an autogenerated mock type for the EResourceCodecRegistry type
type MockEResourceCodecRegistry struct {
	mock.Mock
}

type MockEResourceCodecRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEResourceCodecRegistry) EXPECT() *MockEResourceCodecRegistry_Expecter {
	return &MockEResourceCodecRegistry_Expecter{mock: &_m.Mock}
}

// GetCodec provides a mock function with given fields: uri
func (_m *MockEResourceCodecRegistry) GetCodec(uri *URI) EResourceCodec {
	ret := _m.Called(uri)

	var r0 EResourceCodec
	if rf, ok := ret.Get(0).(func(*URI) EResourceCodec); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResourceCodec)
		}
	}

	return r0
}

// MockEResourceCodecRegistry_GetCodec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodec'
type MockEResourceCodecRegistry_GetCodec_Call struct {
	*mock.Call
}

// GetCodec is a helper method to define mock.On call
//   - uri *URI
func (_e *MockEResourceCodecRegistry_Expecter) GetCodec(uri interface{}) *MockEResourceCodecRegistry_GetCodec_Call {
	return &MockEResourceCodecRegistry_GetCodec_Call{Call: _e.mock.On("GetCodec", uri)}
}

func (_c *MockEResourceCodecRegistry_GetCodec_Call) Run(run func(uri *URI)) *MockEResourceCodecRegistry_GetCodec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*URI))
	})
	return _c
}

func (_c *MockEResourceCodecRegistry_GetCodec_Call) Return(_a0 EResourceCodec) *MockEResourceCodecRegistry_GetCodec_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetExtensionToCodecMap provides a mock function with given fields:
func (_m *MockEResourceCodecRegistry) GetExtensionToCodecMap() map[string]EResourceCodec {
	ret := _m.Called()

	var r0 map[string]EResourceCodec
	if rf, ok := ret.Get(0).(func() map[string]EResourceCodec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]EResourceCodec)
		}
	}

	return r0
}

// MockEResourceCodecRegistry_GetExtensionToCodecMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionToCodecMap'
type MockEResourceCodecRegistry_GetExtensionToCodecMap_Call struct {
	*mock.Call
}

// GetExtensionToCodecMap is a helper method to define mock.On call
func (_e *MockEResourceCodecRegistry_Expecter) GetExtensionToCodecMap() *MockEResourceCodecRegistry_GetExtensionToCodecMap_Call {
	return &MockEResourceCodecRegistry_GetExtensionToCodecMap_Call{Call: _e.mock.On("GetExtensionToCodecMap")}
}

func (_c *MockEResourceCodecRegistry_GetExtensionToCodecMap_Call) Run(run func()) *MockEResourceCodecRegistry_GetExtensionToCodecMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceCodecRegistry_GetExtensionToCodecMap_Call) Return(_a0 map[string]EResourceCodec) *MockEResourceCodecRegistry_GetExtensionToCodecMap_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetProtocolToCodecMap provides a mock function with given fields:
func (_m *MockEResourceCodecRegistry) GetProtocolToCodecMap() map[string]EResourceCodec {
	ret := _m.Called()

	var r0 map[string]EResourceCodec
	if rf, ok := ret.Get(0).(func() map[string]EResourceCodec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]EResourceCodec)
		}
	}

	return r0
}

// MockEResourceCodecRegistry_GetProtocolToCodecMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolToCodecMap'
type MockEResourceCodecRegistry_GetProtocolToCodecMap_Call struct {
	*mock.Call
}

// GetProtocolToCodecMap is a helper method to define mock.On call
func (_e *MockEResourceCodecRegistry_Expecter) GetProtocolToCodecMap() *MockEResourceCodecRegistry_GetProtocolToCodecMap_Call {
	return &MockEResourceCodecRegistry_GetProtocolToCodecMap_Call{Call: _e.mock.On("GetProtocolToCodecMap")}
}

func (_c *MockEResourceCodecRegistry_GetProtocolToCodecMap_Call) Run(run func()) *MockEResourceCodecRegistry_GetProtocolToCodecMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEResourceCodecRegistry_GetProtocolToCodecMap_Call) Return(_a0 map[string]EResourceCodec) *MockEResourceCodecRegistry_GetProtocolToCodecMap_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEResourceCodecRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEResourceCodecRegistry creates a new instance of MockEResourceCodecRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEResourceCodecRegistry(t mockConstructorTestingTNewMockEResourceCodecRegistry) *MockEResourceCodecRegistry {
	mock := &MockEResourceCodecRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
