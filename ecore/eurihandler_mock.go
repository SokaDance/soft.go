// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockEURIHandler is an autogenerated mock type for the EURIHandler type
type MockEURIHandler struct {
	mock.Mock
}

type MockEURIHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEURIHandler) EXPECT() *MockEURIHandler_Expecter {
	return &MockEURIHandler_Expecter{mock: &_m.Mock}
}

// CanHandle provides a mock function with given fields: uri
func (_m *MockEURIHandler) CanHandle(uri *URI) bool {
	ret := _m.Called(uri)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*URI) bool); ok {
		r0 = rf(uri)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEURIHandler_CanHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanHandle'
type MockEURIHandler_CanHandle_Call struct {
	*mock.Call
}

// CanHandle is a helper method to define mock.On call
//   - uri *URI
func (_e *MockEURIHandler_Expecter) CanHandle(uri interface{}) *MockEURIHandler_CanHandle_Call {
	return &MockEURIHandler_CanHandle_Call{Call: _e.mock.On("CanHandle", uri)}
}

func (_c *MockEURIHandler_CanHandle_Call) Run(run func(uri *URI)) *MockEURIHandler_CanHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*URI))
	})
	return _c
}

func (_c *MockEURIHandler_CanHandle_Call) Return(_a0 bool) *MockEURIHandler_CanHandle_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateReader provides a mock function with given fields: uri
func (_m *MockEURIHandler) CreateReader(uri *URI) (io.ReadCloser, error) {
	ret := _m.Called(uri)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(*URI) io.ReadCloser); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*URI) error); ok {
		r1 = rf(uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEURIHandler_CreateReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReader'
type MockEURIHandler_CreateReader_Call struct {
	*mock.Call
}

// CreateReader is a helper method to define mock.On call
//   - uri *URI
func (_e *MockEURIHandler_Expecter) CreateReader(uri interface{}) *MockEURIHandler_CreateReader_Call {
	return &MockEURIHandler_CreateReader_Call{Call: _e.mock.On("CreateReader", uri)}
}

func (_c *MockEURIHandler_CreateReader_Call) Run(run func(uri *URI)) *MockEURIHandler_CreateReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*URI))
	})
	return _c
}

func (_c *MockEURIHandler_CreateReader_Call) Return(_a0 io.ReadCloser, _a1 error) *MockEURIHandler_CreateReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateWriter provides a mock function with given fields: uri
func (_m *MockEURIHandler) CreateWriter(uri *URI) (io.WriteCloser, error) {
	ret := _m.Called(uri)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(*URI) io.WriteCloser); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*URI) error); ok {
		r1 = rf(uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEURIHandler_CreateWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWriter'
type MockEURIHandler_CreateWriter_Call struct {
	*mock.Call
}

// CreateWriter is a helper method to define mock.On call
//   - uri *URI
func (_e *MockEURIHandler_Expecter) CreateWriter(uri interface{}) *MockEURIHandler_CreateWriter_Call {
	return &MockEURIHandler_CreateWriter_Call{Call: _e.mock.On("CreateWriter", uri)}
}

func (_c *MockEURIHandler_CreateWriter_Call) Run(run func(uri *URI)) *MockEURIHandler_CreateWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*URI))
	})
	return _c
}

func (_c *MockEURIHandler_CreateWriter_Call) Return(_a0 io.WriteCloser, _a1 error) *MockEURIHandler_CreateWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockEURIHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEURIHandler creates a new instance of MockEURIHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEURIHandler(t mockConstructorTestingTNewMockEURIHandler) *MockEURIHandler {
	mock := &MockEURIHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
