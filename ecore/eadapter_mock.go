// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEAdapter is an autogenerated mock type for the EAdapter type
type MockEAdapter struct {
	mock.Mock
	MockEAdapter_Prototype
}

type MockEAdapter_Prototype struct {
	mock *mock.Mock
}

func (_mp *MockEAdapter_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
}

type MockEAdapter_Expecter struct {
	mock *mock.Mock
}

func (_me *MockEAdapter_Expecter) SetMock(mock *mock.Mock) {
	_me.mock = mock
}

func (_m *MockEAdapter_Prototype) EXPECT() *MockEAdapter_Expecter {
	expecter := &MockEAdapter_Expecter{}
	expecter.SetMock(_m.mock)
	return expecter
}

// GetTarget provides a mock function with given fields:
func (_m *MockEAdapter_Prototype) GetTarget() ENotifier {
	ret := _m.mock.Called()

	var r0 ENotifier
	if rf, ok := ret.Get(0).(func() ENotifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotifier)
		}
	}

	return r0
}

// MockEAdapter_GetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTarget'
type MockEAdapter_GetTarget_Call struct {
	*mock.Call
}

// GetTarget is a helper method to define mock.On call
func (_e *MockEAdapter_Expecter) GetTarget() *MockEAdapter_GetTarget_Call {
	return &MockEAdapter_GetTarget_Call{Call: _e.mock.On("GetTarget")}
}

func (_c *MockEAdapter_GetTarget_Call) Run(run func()) *MockEAdapter_GetTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEAdapter_GetTarget_Call) Return(_a0 ENotifier) *MockEAdapter_GetTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

// NotifyChanged provides a mock function with given fields: notification
func (_m *MockEAdapter_Prototype) NotifyChanged(notification ENotification) {
	_m.mock.Called(notification)
}

// MockEAdapter_NotifyChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyChanged'
type MockEAdapter_NotifyChanged_Call struct {
	*mock.Call
}

// NotifyChanged is a helper method to define mock.On call
//   - notification ENotification
func (_e *MockEAdapter_Expecter) NotifyChanged(notification interface{}) *MockEAdapter_NotifyChanged_Call {
	return &MockEAdapter_NotifyChanged_Call{Call: _e.mock.On("NotifyChanged", notification)}
}

func (_c *MockEAdapter_NotifyChanged_Call) Run(run func(notification ENotification)) *MockEAdapter_NotifyChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotification))
	})
	return _c
}

func (_c *MockEAdapter_NotifyChanged_Call) Return() *MockEAdapter_NotifyChanged_Call {
	_c.Call.Return()
	return _c
}

// SetTarget provides a mock function with given fields: _a0
func (_m *MockEAdapter_Prototype) SetTarget(_a0 ENotifier) {
	_m.mock.Called(_a0)
}

// MockEAdapter_SetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTarget'
type MockEAdapter_SetTarget_Call struct {
	*mock.Call
}

// SetTarget is a helper method to define mock.On call
//   - _a0 ENotifier
func (_e *MockEAdapter_Expecter) SetTarget(_a0 interface{}) *MockEAdapter_SetTarget_Call {
	return &MockEAdapter_SetTarget_Call{Call: _e.mock.On("SetTarget", _a0)}
}

func (_c *MockEAdapter_SetTarget_Call) Run(run func(_a0 ENotifier)) *MockEAdapter_SetTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotifier))
	})
	return _c
}

func (_c *MockEAdapter_SetTarget_Call) Return() *MockEAdapter_SetTarget_Call {
	_c.Call.Return()
	return _c
}

// UnSetTarget provides a mock function with given fields: _a0
func (_m *MockEAdapter_Prototype) UnSetTarget(_a0 ENotifier) {
	_m.mock.Called(_a0)
}

// MockEAdapter_UnSetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnSetTarget'
type MockEAdapter_UnSetTarget_Call struct {
	*mock.Call
}

// UnSetTarget is a helper method to define mock.On call
//   - _a0 ENotifier
func (_e *MockEAdapter_Expecter) UnSetTarget(_a0 interface{}) *MockEAdapter_UnSetTarget_Call {
	return &MockEAdapter_UnSetTarget_Call{Call: _e.mock.On("UnSetTarget", _a0)}
}

func (_c *MockEAdapter_UnSetTarget_Call) Run(run func(_a0 ENotifier)) *MockEAdapter_UnSetTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotifier))
	})
	return _c
}

func (_c *MockEAdapter_UnSetTarget_Call) Return() *MockEAdapter_UnSetTarget_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEAdapter creates a new instance of MockEAdapter_Prototype. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEAdapter(t mockConstructorTestingTNewMockEAdapter) *MockEAdapter {
	mock := &MockEAdapter{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
