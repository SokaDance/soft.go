// Code generated by mockery v2.16.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEPackageRegistry is an autogenerated mock type for the EPackageRegistry type
type MockEPackageRegistry struct {
	mock.Mock
}

type MockEPackageRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEPackageRegistry) EXPECT() *MockEPackageRegistry_Expecter {
	return &MockEPackageRegistry_Expecter{mock: &_m.Mock}
}

// GetFactory provides a mock function with given fields: nsURI
func (_m *MockEPackageRegistry) GetFactory(nsURI string) EFactory {
	ret := _m.Called(nsURI)

	var r0 EFactory
	if rf, ok := ret.Get(0).(func(string) EFactory); ok {
		r0 = rf(nsURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EFactory)
		}
	}

	return r0
}

// MockEPackageRegistry_GetFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFactory'
type MockEPackageRegistry_GetFactory_Call struct {
	*mock.Call
}

// GetFactory is a helper method to define mock.On call
//   - nsURI string
func (_e *MockEPackageRegistry_Expecter) GetFactory(nsURI interface{}) *MockEPackageRegistry_GetFactory_Call {
	return &MockEPackageRegistry_GetFactory_Call{Call: _e.mock.On("GetFactory", nsURI)}
}

func (_c *MockEPackageRegistry_GetFactory_Call) Run(run func(nsURI string)) *MockEPackageRegistry_GetFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEPackageRegistry_GetFactory_Call) Return(_a0 EFactory) *MockEPackageRegistry_GetFactory_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetPackage provides a mock function with given fields: nsURI
func (_m *MockEPackageRegistry) GetPackage(nsURI string) EPackage {
	ret := _m.Called(nsURI)

	var r0 EPackage
	if rf, ok := ret.Get(0).(func(string) EPackage); ok {
		r0 = rf(nsURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// MockEPackageRegistry_GetPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackage'
type MockEPackageRegistry_GetPackage_Call struct {
	*mock.Call
}

// GetPackage is a helper method to define mock.On call
//   - nsURI string
func (_e *MockEPackageRegistry_Expecter) GetPackage(nsURI interface{}) *MockEPackageRegistry_GetPackage_Call {
	return &MockEPackageRegistry_GetPackage_Call{Call: _e.mock.On("GetPackage", nsURI)}
}

func (_c *MockEPackageRegistry_GetPackage_Call) Run(run func(nsURI string)) *MockEPackageRegistry_GetPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEPackageRegistry_GetPackage_Call) Return(_a0 EPackage) *MockEPackageRegistry_GetPackage_Call {
	_c.Call.Return(_a0)
	return _c
}

// PutPackage provides a mock function with given fields: nsURI, pack
func (_m *MockEPackageRegistry) PutPackage(nsURI string, pack EPackage) {
	_m.Called(nsURI, pack)
}

// MockEPackageRegistry_PutPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPackage'
type MockEPackageRegistry_PutPackage_Call struct {
	*mock.Call
}

// PutPackage is a helper method to define mock.On call
//   - nsURI string
//   - pack EPackage
func (_e *MockEPackageRegistry_Expecter) PutPackage(nsURI interface{}, pack interface{}) *MockEPackageRegistry_PutPackage_Call {
	return &MockEPackageRegistry_PutPackage_Call{Call: _e.mock.On("PutPackage", nsURI, pack)}
}

func (_c *MockEPackageRegistry_PutPackage_Call) Run(run func(nsURI string, pack EPackage)) *MockEPackageRegistry_PutPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EPackage))
	})
	return _c
}

func (_c *MockEPackageRegistry_PutPackage_Call) Return() *MockEPackageRegistry_PutPackage_Call {
	_c.Call.Return()
	return _c
}

// PutSupplier provides a mock function with given fields: nsURI, supplier
func (_m *MockEPackageRegistry) PutSupplier(nsURI string, supplier func() EPackage) {
	_m.Called(nsURI, supplier)
}

// MockEPackageRegistry_PutSupplier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSupplier'
type MockEPackageRegistry_PutSupplier_Call struct {
	*mock.Call
}

// PutSupplier is a helper method to define mock.On call
//   - nsURI string
//   - supplier func() EPackage
func (_e *MockEPackageRegistry_Expecter) PutSupplier(nsURI interface{}, supplier interface{}) *MockEPackageRegistry_PutSupplier_Call {
	return &MockEPackageRegistry_PutSupplier_Call{Call: _e.mock.On("PutSupplier", nsURI, supplier)}
}

func (_c *MockEPackageRegistry_PutSupplier_Call) Run(run func(nsURI string, supplier func() EPackage)) *MockEPackageRegistry_PutSupplier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func() EPackage))
	})
	return _c
}

func (_c *MockEPackageRegistry_PutSupplier_Call) Return() *MockEPackageRegistry_PutSupplier_Call {
	_c.Call.Return()
	return _c
}

// RegisterPackage provides a mock function with given fields: pack
func (_m *MockEPackageRegistry) RegisterPackage(pack EPackage) {
	_m.Called(pack)
}

// MockEPackageRegistry_RegisterPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPackage'
type MockEPackageRegistry_RegisterPackage_Call struct {
	*mock.Call
}

// RegisterPackage is a helper method to define mock.On call
//   - pack EPackage
func (_e *MockEPackageRegistry_Expecter) RegisterPackage(pack interface{}) *MockEPackageRegistry_RegisterPackage_Call {
	return &MockEPackageRegistry_RegisterPackage_Call{Call: _e.mock.On("RegisterPackage", pack)}
}

func (_c *MockEPackageRegistry_RegisterPackage_Call) Run(run func(pack EPackage)) *MockEPackageRegistry_RegisterPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EPackage))
	})
	return _c
}

func (_c *MockEPackageRegistry_RegisterPackage_Call) Return() *MockEPackageRegistry_RegisterPackage_Call {
	_c.Call.Return()
	return _c
}

// Remove provides a mock function with given fields: nsURI
func (_m *MockEPackageRegistry) Remove(nsURI string) {
	_m.Called(nsURI)
}

// MockEPackageRegistry_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockEPackageRegistry_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - nsURI string
func (_e *MockEPackageRegistry_Expecter) Remove(nsURI interface{}) *MockEPackageRegistry_Remove_Call {
	return &MockEPackageRegistry_Remove_Call{Call: _e.mock.On("Remove", nsURI)}
}

func (_c *MockEPackageRegistry_Remove_Call) Run(run func(nsURI string)) *MockEPackageRegistry_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEPackageRegistry_Remove_Call) Return() *MockEPackageRegistry_Remove_Call {
	_c.Call.Return()
	return _c
}

// UnregisterPackage provides a mock function with given fields: pack
func (_m *MockEPackageRegistry) UnregisterPackage(pack EPackage) {
	_m.Called(pack)
}

// MockEPackageRegistry_UnregisterPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterPackage'
type MockEPackageRegistry_UnregisterPackage_Call struct {
	*mock.Call
}

// UnregisterPackage is a helper method to define mock.On call
//   - pack EPackage
func (_e *MockEPackageRegistry_Expecter) UnregisterPackage(pack interface{}) *MockEPackageRegistry_UnregisterPackage_Call {
	return &MockEPackageRegistry_UnregisterPackage_Call{Call: _e.mock.On("UnregisterPackage", pack)}
}

func (_c *MockEPackageRegistry_UnregisterPackage_Call) Run(run func(pack EPackage)) *MockEPackageRegistry_UnregisterPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EPackage))
	})
	return _c
}

func (_c *MockEPackageRegistry_UnregisterPackage_Call) Return() *MockEPackageRegistry_UnregisterPackage_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEPackageRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEPackageRegistry creates a new instance of MockEPackageRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEPackageRegistry(t mockConstructorTestingTNewMockEPackageRegistry) *MockEPackageRegistry {
	mock := &MockEPackageRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
