// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EPackageImpl is the implementation of the model object 'EPackage'
type EPackageImpl struct {
	ENamedElementImpl
	eClassifiers     EList
	eFactoryInstance EFactory
	eSubPackages     EList
	nsPrefix         string
	nsURI            string
}
type ePackageInitializers interface {
	initEClassifiers() EList
	initESubPackages() EList
}

type ePackageBasics interface {
	basicSetEFactoryInstance(EFactory, ENotificationChain) ENotificationChain
}

// newEPackageImpl is the constructor of a EPackageImpl
func newEPackageImpl() *EPackageImpl {
	e := new(EPackageImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EPackageImpl) Initialize() {
	e.ENamedElementImpl.Initialize()
	e.nsPrefix = ""
	e.nsURI = ""

}

func (e *EPackageImpl) asEPackage() EPackage {
	return e.GetInterfaces().(EPackage)
}

func (e *EPackageImpl) asInitializers() ePackageInitializers {
	return e.GetInterfaces().(ePackageInitializers)
}

func (e *EPackageImpl) asBasics() ePackageBasics {
	return e.GetInterfaces().(ePackageBasics)
}

func (e *EPackageImpl) EStaticClass() EClass {
	return GetPackage().GetEPackage()
}

func (e *EPackageImpl) EStaticFeatureCount() int {
	return EPACKAGE_FEATURE_COUNT
}

// GetEClassifier default implementation
func (e *EPackageImpl) GetEClassifier(string) EClassifier {
	panic("GetEClassifier not implemented")
}

// GetEClassifiers get the value of eClassifiers
func (e *EPackageImpl) GetEClassifiers() EList {
	if e.eClassifiers == nil {
		e.eClassifiers = e.asInitializers().initEClassifiers()
	}
	return e.eClassifiers
}

// GetEFactoryInstance get the value of eFactoryInstance
func (e *EPackageImpl) GetEFactoryInstance() EFactory {
	return e.eFactoryInstance
}

// SetEFactoryInstance set the value of eFactoryInstance
func (e *EPackageImpl) SetEFactoryInstance(newEFactoryInstance EFactory) {
	if newEFactoryInstance != e.eFactoryInstance {
		var notifications ENotificationChain
		if oldEFactoryInstanceInternal, _ := e.eFactoryInstance.(EObjectInternal); oldEFactoryInstanceInternal != nil {
			notifications = oldEFactoryInstanceInternal.EInverseRemove(e, EFACTORY__EPACKAGE, notifications)
		}
		if newEFactoryInstanceInternal, _ := newEFactoryInstance.(EObjectInternal); newEFactoryInstanceInternal != nil {
			notifications = newEFactoryInstanceInternal.EInverseAdd(e.AsEObject(), EFACTORY__EPACKAGE, notifications)
		}
		notifications = e.asBasics().basicSetEFactoryInstance(newEFactoryInstance, notifications)
		if notifications != nil {
			notifications.Dispatch()
		}
	}
}

func (e *EPackageImpl) basicSetEFactoryInstance(newEFactoryInstance EFactory, msgs ENotificationChain) ENotificationChain {
	oldEFactoryInstance := e.eFactoryInstance
	e.eFactoryInstance = newEFactoryInstance
	notifications := msgs
	if e.ENotificationRequired() {
		notification := NewNotificationByFeatureID(e.AsEObject(), SET, EPACKAGE__EFACTORY_INSTANCE, oldEFactoryInstance, newEFactoryInstance, NO_INDEX)
		if notifications != nil {
			notifications.Add(notification)
		} else {
			notifications = notification
		}
	}
	return notifications
}

// GetESubPackages get the value of eSubPackages
func (e *EPackageImpl) GetESubPackages() EList {
	if e.eSubPackages == nil {
		e.eSubPackages = e.asInitializers().initESubPackages()
	}
	return e.eSubPackages
}

// GetESuperPackage get the value of eSuperPackage
func (e *EPackageImpl) GetESuperPackage() EPackage {
	if e.EContainerFeatureID() == EPACKAGE__ESUPER_PACKAGE {
		return e.EContainer().(EPackage)
	}
	return nil
}

// GetNsPrefix get the value of nsPrefix
func (e *EPackageImpl) GetNsPrefix() string {
	return e.nsPrefix
}

// SetNsPrefix set the value of nsPrefix
func (e *EPackageImpl) SetNsPrefix(newNsPrefix string) {
	oldNsPrefix := e.nsPrefix
	e.nsPrefix = newNsPrefix
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EPACKAGE__NS_PREFIX, oldNsPrefix, newNsPrefix, NO_INDEX))
	}
}

// GetNsURI get the value of nsURI
func (e *EPackageImpl) GetNsURI() string {
	return e.nsURI
}

// SetNsURI set the value of nsURI
func (e *EPackageImpl) SetNsURI(newNsURI string) {
	oldNsURI := e.nsURI
	e.nsURI = newNsURI
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EPACKAGE__NS_URI, oldNsURI, newNsURI, NO_INDEX))
	}
}

func (e *EPackageImpl) initEClassifiers() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), EPACKAGE__ECLASSIFIERS, ECLASSIFIER__EPACKAGE, true, true, true, false, false)
}

func (e *EPackageImpl) initESubPackages() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), EPACKAGE__ESUB_PACKAGES, EPACKAGE__ESUPER_PACKAGE, true, true, true, false, false)
}

func (e *EPackageImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		return e.asEPackage().GetEClassifiers()
	case EPACKAGE__EFACTORY_INSTANCE:
		return e.asEPackage().GetEFactoryInstance()
	case EPACKAGE__ESUB_PACKAGES:
		return e.asEPackage().GetESubPackages()
	case EPACKAGE__ESUPER_PACKAGE:
		return e.asEPackage().GetESuperPackage()
	case EPACKAGE__NS_PREFIX:
		return e.asEPackage().GetNsPrefix()
	case EPACKAGE__NS_URI:
		return e.asEPackage().GetNsURI()
	default:
		return e.ENamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (e *EPackageImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		list := e.asEPackage().GetEClassifiers()
		list.Clear()
		list.AddAll(newValue.(EList))
	case EPACKAGE__EFACTORY_INSTANCE:
		newValueOrNil, _ := newValue.(EFactory)
		e.asEPackage().SetEFactoryInstance(newValueOrNil)
	case EPACKAGE__ESUB_PACKAGES:
		list := e.asEPackage().GetESubPackages()
		list.Clear()
		list.AddAll(newValue.(EList))
	case EPACKAGE__NS_PREFIX:
		e.asEPackage().SetNsPrefix(newValue.(string))
	case EPACKAGE__NS_URI:
		e.asEPackage().SetNsURI(newValue.(string))
	default:
		e.ENamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (e *EPackageImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		e.asEPackage().GetEClassifiers().Clear()
	case EPACKAGE__EFACTORY_INSTANCE:
		e.asEPackage().SetEFactoryInstance(nil)
	case EPACKAGE__ESUB_PACKAGES:
		e.asEPackage().GetESubPackages().Clear()
	case EPACKAGE__NS_PREFIX:
		e.asEPackage().SetNsPrefix("")
	case EPACKAGE__NS_URI:
		e.asEPackage().SetNsURI("")
	default:
		e.ENamedElementImpl.EUnsetFromID(featureID)
	}
}

func (e *EPackageImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		return e.eClassifiers != nil && e.eClassifiers.Size() != 0
	case EPACKAGE__EFACTORY_INSTANCE:
		return e.eFactoryInstance != nil
	case EPACKAGE__ESUB_PACKAGES:
		return e.eSubPackages != nil && e.eSubPackages.Size() != 0
	case EPACKAGE__ESUPER_PACKAGE:
		return e.asEPackage().GetESuperPackage() != nil
	case EPACKAGE__NS_PREFIX:
		return e.nsPrefix != ""
	case EPACKAGE__NS_URI:
		return e.nsURI != ""
	default:
		return e.ENamedElementImpl.EIsSetFromID(featureID)
	}
}

func (e *EPackageImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case EPACKAGE__GET_ECLASSIFIER_ESTRING:
		return e.asEPackage().GetEClassifier(arguments.Get(0).(string))
	default:
		return e.ENamedElementImpl.EInvokeFromID(operationID, arguments)
	}
}

func (e *EPackageImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		list := e.GetEClassifiers().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	case EPACKAGE__EFACTORY_INSTANCE:
		msgs := notifications
		eFactoryInstance := e.eFactoryInstance
		if eFactoryInstance != nil {
			msgs = eFactoryInstance.(EObjectInternal).EInverseRemove(e.AsEObject(), EOPPOSITE_FEATURE_BASE-EPACKAGE__EFACTORY_INSTANCE, msgs)
		}
		return e.asBasics().basicSetEFactoryInstance(otherEnd.(EFactory), msgs)
	case EPACKAGE__ESUB_PACKAGES:
		list := e.GetESubPackages().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	case EPACKAGE__ESUPER_PACKAGE:
		msgs := notifications
		if e.EInternalContainer() != nil {
			msgs = e.EBasicRemoveFromContainer(msgs)
		}
		return e.EBasicSetContainer(otherEnd, EPACKAGE__ESUPER_PACKAGE, msgs)
	default:
		return e.ENamedElementImpl.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (e *EPackageImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EPACKAGE__ECLASSIFIERS:
		list := e.GetEClassifiers().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	case EPACKAGE__EFACTORY_INSTANCE:
		return e.asBasics().basicSetEFactoryInstance(nil, notifications)
	case EPACKAGE__ESUB_PACKAGES:
		list := e.GetESubPackages().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	case EPACKAGE__ESUPER_PACKAGE:
		return e.EBasicSetContainer(nil, EPACKAGE__ESUPER_PACKAGE, notifications)
	default:
		return e.ENamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
