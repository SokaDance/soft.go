// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEEnum() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEEnumRun struct {
	mock.Mock
}

func (m *mockEEnumRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEEnumRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEEnumRun creates a new instance of mockEEnumRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEEnumRun(t mockConstructorTestingTmockEEnumRun, args ...any) *mockEEnumRun {
	mock := &mockEEnumRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEEnumGetELiterals tests method GetELiterals
func TestMockEEnumGetELiterals(t *testing.T) {
	o := &MockEEnum{}
	l := &MockEList{}
	m := newMockEEnumRun(t)
	o.EXPECT().GetELiterals().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetELiterals().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetELiterals())
	assert.Equal(t, l, o.GetELiterals())
}

// TestMockEEnumGetEEnumLiteralByLiteral tests method GetEEnumLiteralByLiteral
func TestMockEEnumGetEEnumLiteralByLiteral(t *testing.T) {
	o := &MockEEnum{}
	literal := string("Test String")
	r := new(MockEEnumLiteral)
	o.On("GetEEnumLiteralByLiteral", literal).Return(r).Once()
	o.On("GetEEnumLiteralByLiteral", literal).Return(func() EEnumLiteral {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEEnumLiteralByLiteral(literal))
	assert.Equal(t, r, o.GetEEnumLiteralByLiteral(literal))
	o.AssertExpectations(t)
}

// TestMockEEnumGetEEnumLiteralByName tests method GetEEnumLiteralByName
func TestMockEEnumGetEEnumLiteralByName(t *testing.T) {
	o := &MockEEnum{}
	name := string("Test String")
	r := new(MockEEnumLiteral)
	o.On("GetEEnumLiteralByName", name).Return(r).Once()
	o.On("GetEEnumLiteralByName", name).Return(func() EEnumLiteral {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEEnumLiteralByName(name))
	assert.Equal(t, r, o.GetEEnumLiteralByName(name))
	o.AssertExpectations(t)
}

// TestMockEEnumGetEEnumLiteralByValue tests method GetEEnumLiteralByValue
func TestMockEEnumGetEEnumLiteralByValue(t *testing.T) {
	o := &MockEEnum{}
	value := int(45)
	r := new(MockEEnumLiteral)
	o.On("GetEEnumLiteralByValue", value).Return(r).Once()
	o.On("GetEEnumLiteralByValue", value).Return(func() EEnumLiteral {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEEnumLiteralByValue(value))
	assert.Equal(t, r, o.GetEEnumLiteralByValue(value))
	o.AssertExpectations(t)
}
