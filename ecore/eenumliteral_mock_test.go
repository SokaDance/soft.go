// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEEnumLiteral() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEEnumLiteralGetEEnum tests method GetEEnum
func TestMockEEnumLiteralGetEEnum(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := NewMockEEnum(t)
	m := NewMockRun(t)
	o.EXPECT().GetEEnum().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetEEnum().Call.Return(func() EEnum { return r }).Once()
	assert.Equal(t, r, o.GetEEnum())
	assert.Equal(t, r, o.GetEEnum())
}

// TestMockEEnumLiteralGetInstance tests method GetInstance
func TestMockEEnumLiteralGetInstance(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := any(nil)
	m := NewMockRun(t)
	o.EXPECT().GetInstance().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetInstance().Call.Return(func() any { return r }).Once()
	assert.Equal(t, r, o.GetInstance())
	assert.Equal(t, r, o.GetInstance())
}

// TestMockEEnumLiteralSetInstance tests method SetInstance
func TestMockEEnumLiteralSetInstance(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	v := any(nil)
	m := NewMockRun(t, v)
	o.EXPECT().SetInstance(v).Return().Run(func(_p0 any) { m.Run(_p0) }).Once()
	o.SetInstance(v)
}

// TestMockEEnumLiteralGetLiteral tests method GetLiteral
func TestMockEEnumLiteralGetLiteral(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := string("Test String")
	m := NewMockRun(t)
	o.EXPECT().GetLiteral().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetLiteral().Call.Return(func() string { return r }).Once()
	assert.Equal(t, r, o.GetLiteral())
	assert.Equal(t, r, o.GetLiteral())
}

// TestMockEEnumLiteralSetLiteral tests method SetLiteral
func TestMockEEnumLiteralSetLiteral(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	v := string("Test String")
	m := NewMockRun(t, v)
	o.EXPECT().SetLiteral(v).Return().Run(func(_p0 string) { m.Run(_p0) }).Once()
	o.SetLiteral(v)
}

// TestMockEEnumLiteralGetValue tests method GetValue
func TestMockEEnumLiteralGetValue(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := int(45)
	m := NewMockRun(t)
	o.EXPECT().GetValue().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetValue().Call.Return(func() int { return r }).Once()
	assert.Equal(t, r, o.GetValue())
	assert.Equal(t, r, o.GetValue())
}

// TestMockEEnumLiteralSetValue tests method SetValue
func TestMockEEnumLiteralSetValue(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	v := int(45)
	m := NewMockRun(t, v)
	o.EXPECT().SetValue(v).Return().Run(func(_p0 int) { m.Run(_p0) }).Once()
	o.SetValue(v)
}
