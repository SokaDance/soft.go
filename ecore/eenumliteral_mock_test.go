// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEEnumLiteral() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEEnumLiteralRun struct {
	mock.Mock
}

func (m *mockEEnumLiteralRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEEnumLiteralRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEEnumLiteralRun creates a new instance of mockEEnumLiteralRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEEnumLiteralRun(t mockConstructorTestingTmockEEnumLiteralRun, args ...any) *mockEEnumLiteralRun {
	mock := &mockEEnumLiteralRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEEnumLiteralGetEEnum tests method GetEEnum
func TestMockEEnumLiteralGetEEnum(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := new(MockEEnum)
	m := newMockEEnumLiteralRun(t)
	o.EXPECT().GetEEnum().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEEnum().Once().Return(func() EEnum { return r })
	assert.Equal(t, r, o.GetEEnum())
	assert.Equal(t, r, o.GetEEnum())
}

// TestMockEEnumLiteralGetInstance tests method GetInstance
func TestMockEEnumLiteralGetInstance(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := any(nil)
	m := newMockEEnumLiteralRun(t)
	o.EXPECT().GetInstance().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetInstance().Once().Return(func() any { return r })
	assert.Equal(t, r, o.GetInstance())
	assert.Equal(t, r, o.GetInstance())
}

// TestMockEEnumLiteralSetInstance tests method SetInstance
func TestMockEEnumLiteralSetInstance(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := any(nil)
	o.On("SetInstance", v).Once()
	o.SetInstance(v)
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralGetLiteral tests method GetLiteral
func TestMockEEnumLiteralGetLiteral(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := string("Test String")
	m := newMockEEnumLiteralRun(t)
	o.EXPECT().GetLiteral().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetLiteral().Once().Return(func() string { return r })
	assert.Equal(t, r, o.GetLiteral())
	assert.Equal(t, r, o.GetLiteral())
}

// TestMockEEnumLiteralSetLiteral tests method SetLiteral
func TestMockEEnumLiteralSetLiteral(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := string("Test String")
	o.On("SetLiteral", v).Once()
	o.SetLiteral(v)
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralGetValue tests method GetValue
func TestMockEEnumLiteralGetValue(t *testing.T) {
	o := NewMockEEnumLiteral(t)
	r := int(45)
	m := newMockEEnumLiteralRun(t)
	o.EXPECT().GetValue().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetValue().Once().Return(func() int { return r })
	assert.Equal(t, r, o.GetValue())
	assert.Equal(t, r, o.GetValue())
}

// TestMockEEnumLiteralSetValue tests method SetValue
func TestMockEEnumLiteralSetValue(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := int(45)
	o.On("SetValue", v).Once()
	o.SetValue(v)
	o.AssertExpectations(t)
}
