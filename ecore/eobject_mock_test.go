// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEObject() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEObjectEAllContents tests method EAllContents
func TestMockEObjectEAllContents(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := EIterator(nil)
	o.EXPECT().EAllContents().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EAllContents().Call.Return(func() EIterator {
		return r
	}).Once()
	assert.Equal(t, r, o.EAllContents())
	assert.Equal(t, r, o.EAllContents())
}

// TestMockEObjectEClass tests method EClass
func TestMockEObjectEClass(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := NewMockEClass(t)
	o.EXPECT().EClass().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EClass().Call.Return(func() EClass {
		return r
	}).Once()
	assert.Equal(t, r, o.EClass())
	assert.Equal(t, r, o.EClass())
}

// TestMockEObjectEContainer tests method EContainer
func TestMockEObjectEContainer(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := NewMockEObjectInternal(t)
	o.EXPECT().EContainer().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EContainer().Call.Return(func() EObject {
		return r
	}).Once()
	assert.Equal(t, r, o.EContainer())
	assert.Equal(t, r, o.EContainer())
}

// TestMockEObjectEContainingFeature tests method EContainingFeature
func TestMockEObjectEContainingFeature(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := NewMockEStructuralFeature(t)
	o.EXPECT().EContainingFeature().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EContainingFeature().Call.Return(func() EStructuralFeature {
		return r
	}).Once()
	assert.Equal(t, r, o.EContainingFeature())
	assert.Equal(t, r, o.EContainingFeature())
}

// TestMockEObjectEContainmentFeature tests method EContainmentFeature
func TestMockEObjectEContainmentFeature(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := NewMockEReference(t)
	o.EXPECT().EContainmentFeature().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EContainmentFeature().Call.Return(func() EReference {
		return r
	}).Once()
	assert.Equal(t, r, o.EContainmentFeature())
	assert.Equal(t, r, o.EContainmentFeature())
}

// TestMockEObjectEContents tests method EContents
func TestMockEObjectEContents(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := EList(NewEmptyBasicEList())
	o.EXPECT().EContents().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EContents().Call.Return(func() EList {
		return r
	}).Once()
	assert.Equal(t, r, o.EContents())
	assert.Equal(t, r, o.EContents())
}

// TestMockEObjectECrossReferences tests method ECrossReferences
func TestMockEObjectECrossReferences(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := EList(NewEmptyBasicEList())
	o.EXPECT().ECrossReferences().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().ECrossReferences().Call.Return(func() EList {
		return r
	}).Once()
	assert.Equal(t, r, o.ECrossReferences())
	assert.Equal(t, r, o.ECrossReferences())
}

// TestMockEObjectEGet tests method EGet
func TestMockEObjectEGet(t *testing.T) {
	o := NewMockEObject(t)
	feature := NewMockEStructuralFeature(t)
	m := NewMockRun(t, feature)
	r := any(nil)
	o.EXPECT().EGet(feature).Return(r).Run(func(feature EStructuralFeature) { m.Run(feature) }).Once()
	o.EXPECT().EGet(feature).Call.Return(func() any {
		return r
	}).Once()
	assert.Equal(t, r, o.EGet(feature))
	assert.Equal(t, r, o.EGet(feature))
}

// TestMockEObjectEGetResolve tests method EGetResolve
func TestMockEObjectEGetResolve(t *testing.T) {
	o := NewMockEObject(t)
	feature := NewMockEStructuralFeature(t)
	resolve := bool(true)
	m := NewMockRun(t, feature, resolve)
	r := any(nil)
	o.EXPECT().EGetResolve(feature, resolve).Return(r).Run(func(feature EStructuralFeature, resolve bool) { m.Run(feature, resolve) }).Once()
	o.EXPECT().EGetResolve(feature, resolve).Call.Return(func() any {
		return r
	}).Once()
	assert.Equal(t, r, o.EGetResolve(feature, resolve))
	assert.Equal(t, r, o.EGetResolve(feature, resolve))
}

// TestMockEObjectEInvoke tests method EInvoke
func TestMockEObjectEInvoke(t *testing.T) {
	o := NewMockEObject(t)
	operation := NewMockEOperation(t)
	arguments := EList(NewEmptyBasicEList())
	m := NewMockRun(t, operation, arguments)
	r := any(nil)
	o.EXPECT().EInvoke(operation, arguments).Return(r).Run(func(operation EOperation, arguments EList) { m.Run(operation, arguments) }).Once()
	o.EXPECT().EInvoke(operation, arguments).Call.Return(func() any {
		return r
	}).Once()
	assert.Equal(t, r, o.EInvoke(operation, arguments))
	assert.Equal(t, r, o.EInvoke(operation, arguments))
}

// TestMockEObjectEIsProxy tests method EIsProxy
func TestMockEObjectEIsProxy(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := bool(true)
	o.EXPECT().EIsProxy().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EIsProxy().Call.Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.EIsProxy())
	assert.Equal(t, r, o.EIsProxy())
}

// TestMockEObjectEIsSet tests method EIsSet
func TestMockEObjectEIsSet(t *testing.T) {
	o := NewMockEObject(t)
	feature := NewMockEStructuralFeature(t)
	m := NewMockRun(t, feature)
	r := bool(true)
	o.EXPECT().EIsSet(feature).Return(r).Run(func(feature EStructuralFeature) { m.Run(feature) }).Once()
	o.EXPECT().EIsSet(feature).Call.Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.EIsSet(feature))
	assert.Equal(t, r, o.EIsSet(feature))
}

// TestMockEObjectEResource tests method EResource
func TestMockEObjectEResource(t *testing.T) {
	o := NewMockEObject(t)
	m := NewMockRun(t)
	r := EResource(nil)
	o.EXPECT().EResource().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().EResource().Call.Return(func() EResource {
		return r
	}).Once()
	assert.Equal(t, r, o.EResource())
	assert.Equal(t, r, o.EResource())
}

// TestMockEObjectESet tests method ESet
func TestMockEObjectESet(t *testing.T) {
	o := NewMockEObject(t)
	feature := NewMockEStructuralFeature(t)
	newValue := any(nil)
	m := NewMockRun(t, feature, newValue)
	o.EXPECT().ESet(feature, newValue).Return().Run(func(feature EStructuralFeature, newValue any) { m.Run(feature, newValue) }).Once()
	o.ESet(feature, newValue)
}

// TestMockEObjectEUnset tests method EUnset
func TestMockEObjectEUnset(t *testing.T) {
	o := NewMockEObject(t)
	feature := NewMockEStructuralFeature(t)
	m := NewMockRun(t, feature)
	o.EXPECT().EUnset(feature).Return().Run(func(feature EStructuralFeature) { m.Run(feature) }).Once()
	o.EUnset(feature)
}
