// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EEnumLiteralImpl is the implementation of the model object 'EEnumLiteral'
type EEnumLiteralImpl struct {
	ENamedElementImpl
	instance any
	literal  string
	value    int
}

// newEEnumLiteralImpl is the constructor of a EEnumLiteralImpl
func newEEnumLiteralImpl() *EEnumLiteralImpl {
	e := new(EEnumLiteralImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EEnumLiteralImpl) Initialize() {
	e.ENamedElementImpl.Initialize()
	e.instance = nil
	e.literal = ""
	e.value = 0

}

func (e *EEnumLiteralImpl) asEEnumLiteral() EEnumLiteral {
	return e.GetInterfaces().(EEnumLiteral)
}

func (e *EEnumLiteralImpl) EStaticClass() EClass {
	return GetPackage().GetEEnumLiteral()
}

func (e *EEnumLiteralImpl) EStaticFeatureCount() int {
	return EENUM_LITERAL_FEATURE_COUNT
}

// GetEEnum get the value of eEnum
func (e *EEnumLiteralImpl) GetEEnum() EEnum {
	if e.EContainerFeatureID() == EENUM_LITERAL__EENUM {
		return e.EContainer().(EEnum)
	}
	return nil
}

// GetInstance get the value of instance
func (e *EEnumLiteralImpl) GetInstance() any {
	return e.instance
}

// SetInstance set the value of instance
func (e *EEnumLiteralImpl) SetInstance(newInstance any) {
	oldInstance := e.instance
	e.instance = newInstance
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EENUM_LITERAL__INSTANCE, oldInstance, newInstance, NO_INDEX))
	}
}

// GetLiteral get the value of literal
func (e *EEnumLiteralImpl) GetLiteral() string {
	return e.literal
}

// SetLiteral set the value of literal
func (e *EEnumLiteralImpl) SetLiteral(newLiteral string) {
	oldLiteral := e.literal
	e.literal = newLiteral
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EENUM_LITERAL__LITERAL, oldLiteral, newLiteral, NO_INDEX))
	}
}

// GetValue get the value of value
func (e *EEnumLiteralImpl) GetValue() int {
	return e.value
}

// SetValue set the value of value
func (e *EEnumLiteralImpl) SetValue(newValue int) {
	oldValue := e.value
	e.value = newValue
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, EENUM_LITERAL__VALUE, oldValue, newValue, NO_INDEX))
	}
}

func (e *EEnumLiteralImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EENUM_LITERAL__EENUM:
		return e.asEEnumLiteral().GetEEnum()
	case EENUM_LITERAL__INSTANCE:
		return e.asEEnumLiteral().GetInstance()
	case EENUM_LITERAL__LITERAL:
		return e.asEEnumLiteral().GetLiteral()
	case EENUM_LITERAL__VALUE:
		return e.asEEnumLiteral().GetValue()
	default:
		return e.ENamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (e *EEnumLiteralImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EENUM_LITERAL__INSTANCE:
		e.asEEnumLiteral().SetInstance(newValue)
	case EENUM_LITERAL__LITERAL:
		e.asEEnumLiteral().SetLiteral(newValue.(string))
	case EENUM_LITERAL__VALUE:
		e.asEEnumLiteral().SetValue(newValue.(int))
	default:
		e.ENamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (e *EEnumLiteralImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EENUM_LITERAL__INSTANCE:
		e.asEEnumLiteral().SetInstance(nil)
	case EENUM_LITERAL__LITERAL:
		e.asEEnumLiteral().SetLiteral("")
	case EENUM_LITERAL__VALUE:
		e.asEEnumLiteral().SetValue(0)
	default:
		e.ENamedElementImpl.EUnsetFromID(featureID)
	}
}

func (e *EEnumLiteralImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EENUM_LITERAL__EENUM:
		return e.asEEnumLiteral().GetEEnum() != nil
	case EENUM_LITERAL__INSTANCE:
		return e.instance != nil
	case EENUM_LITERAL__LITERAL:
		return e.literal != ""
	case EENUM_LITERAL__VALUE:
		return e.value != 0
	default:
		return e.ENamedElementImpl.EIsSetFromID(featureID)
	}
}

func (e *EEnumLiteralImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EENUM_LITERAL__EENUM:
		msgs := notifications
		if e.EInternalContainer() != nil {
			msgs = e.EBasicRemoveFromContainer(msgs)
		}
		return e.EBasicSetContainer(otherEnd, EENUM_LITERAL__EENUM, msgs)
	default:
		return e.ENamedElementImpl.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (e *EEnumLiteralImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EENUM_LITERAL__EENUM:
		return e.EBasicSetContainer(nil, EENUM_LITERAL__EENUM, notifications)
	default:
		return e.ENamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
