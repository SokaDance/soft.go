// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockENotificationChain is an autogenerated mock type for the ENotificationChain type
type MockENotificationChain struct {
	mock.Mock
}

type MockENotificationChain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockENotificationChain) EXPECT() *MockENotificationChain_Expecter {
	return &MockENotificationChain_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *MockENotificationChain) Add(_a0 ENotification) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ENotification) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockENotificationChain_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockENotificationChain_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 ENotification
func (_e *MockENotificationChain_Expecter) Add(_a0 interface{}) *MockENotificationChain_Add_Call {
	return &MockENotificationChain_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *MockENotificationChain_Add_Call) Run(run func(_a0 ENotification)) *MockENotificationChain_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotification))
	})
	return _c
}

func (_c *MockENotificationChain_Add_Call) Return(_a0 bool) *MockENotificationChain_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Dispatch provides a mock function with given fields:
func (_m *MockENotificationChain) Dispatch() {
	_m.Called()
}

// MockENotificationChain_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type MockENotificationChain_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
func (_e *MockENotificationChain_Expecter) Dispatch() *MockENotificationChain_Dispatch_Call {
	return &MockENotificationChain_Dispatch_Call{Call: _e.mock.On("Dispatch")}
}

func (_c *MockENotificationChain_Dispatch_Call) Run(run func()) *MockENotificationChain_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockENotificationChain_Dispatch_Call) Return() *MockENotificationChain_Dispatch_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockENotificationChain interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockENotificationChain creates a new instance of MockENotificationChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockENotificationChain(t mockConstructorTestingTNewMockENotificationChain) *MockENotificationChain {
	mock := &MockENotificationChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
