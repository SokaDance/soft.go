// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EFactoryImpl is the implementation of the model object 'EFactory'
type EFactoryImpl struct {
	EModelElementExt
}

type eFactoryBasics interface {
	basicSetEPackage(EPackage, ENotificationChain) ENotificationChain
}

// newEFactoryImpl is the constructor of a EFactoryImpl
func newEFactoryImpl() *EFactoryImpl {
	e := new(EFactoryImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *EFactoryImpl) asEFactory() EFactory {
	return e.GetInterfaces().(EFactory)
}

func (e *EFactoryImpl) asBasics() eFactoryBasics {
	return e.GetInterfaces().(eFactoryBasics)
}

func (e *EFactoryImpl) EStaticClass() EClass {
	return GetPackage().GetEFactory()
}

func (e *EFactoryImpl) EStaticFeatureCount() int {
	return EFACTORY_FEATURE_COUNT
}

// ConvertToString default implementation
func (e *EFactoryImpl) ConvertToString(EDataType, any) string {
	panic("ConvertToString not implemented")
}

// Create default implementation
func (e *EFactoryImpl) Create(EClass) EObject {
	panic("Create not implemented")
}

// CreateFromString default implementation
func (e *EFactoryImpl) CreateFromString(EDataType, string) any {
	panic("CreateFromString not implemented")
}

// GetEPackage get the value of ePackage
func (e *EFactoryImpl) GetEPackage() EPackage {
	if e.EContainerFeatureID() == EFACTORY__EPACKAGE {
		return e.EContainer().(EPackage)
	}
	return nil
}

// SetEPackage set the value of ePackage
func (e *EFactoryImpl) SetEPackage(newEPackage EPackage) {
	if newEPackage != e.EInternalContainer() || (newEPackage != nil && e.EContainerFeatureID() != EFACTORY__EPACKAGE) {
		var notifications ENotificationChain
		if e.EInternalContainer() != nil {
			notifications = e.EBasicRemoveFromContainer(notifications)
		}
		if newEPackageInternal, _ := newEPackage.(EObjectInternal); newEPackageInternal != nil {
			notifications = newEPackageInternal.EInverseAdd(e.AsEObject(), EPACKAGE__EFACTORY_INSTANCE, notifications)
		}
		notifications = e.asBasics().basicSetEPackage(newEPackage, notifications)
		if notifications != nil {
			notifications.Dispatch()
		}
	} else if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e, SET, EFACTORY__EPACKAGE, newEPackage, newEPackage, NO_INDEX))
	}
}

func (e *EFactoryImpl) basicSetEPackage(newEPackage EPackage, msgs ENotificationChain) ENotificationChain {
	return e.EBasicSetContainer(newEPackage, EFACTORY__EPACKAGE, msgs)
}

func (e *EFactoryImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EFACTORY__EPACKAGE:
		return e.asEFactory().GetEPackage()
	default:
		return e.EModelElementExt.EGetFromID(featureID, resolve)
	}
}

func (e *EFactoryImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EFACTORY__EPACKAGE:
		newValueOrNil, _ := newValue.(EPackage)
		e.asEFactory().SetEPackage(newValueOrNil)
	default:
		e.EModelElementExt.ESetFromID(featureID, newValue)
	}
}

func (e *EFactoryImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EFACTORY__EPACKAGE:
		e.asEFactory().SetEPackage(nil)
	default:
		e.EModelElementExt.EUnsetFromID(featureID)
	}
}

func (e *EFactoryImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EFACTORY__EPACKAGE:
		return e.asEFactory().GetEPackage() != nil
	default:
		return e.EModelElementExt.EIsSetFromID(featureID)
	}
}

func (e *EFactoryImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case EFACTORY__CONVERT_TO_STRING_EDATATYPE_EJAVAOBJECT:
		return e.asEFactory().ConvertToString(arguments.Get(0).(EDataType), arguments.Get(1))
	case EFACTORY__CREATE_ECLASS:
		return e.asEFactory().Create(arguments.Get(0).(EClass))
	case EFACTORY__CREATE_FROM_STRING_EDATATYPE_ESTRING:
		return e.asEFactory().CreateFromString(arguments.Get(0).(EDataType), arguments.Get(1).(string))
	default:
		return e.EModelElementExt.EInvokeFromID(operationID, arguments)
	}
}

func (e *EFactoryImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EFACTORY__EPACKAGE:
		msgs := notifications
		if e.EInternalContainer() != nil {
			msgs = e.EBasicRemoveFromContainer(msgs)
		}
		return e.asBasics().basicSetEPackage(otherEnd.(EPackage), msgs)
	default:
		return e.EModelElementExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (e *EFactoryImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EFACTORY__EPACKAGE:
		return e.asBasics().basicSetEPackage(nil, notifications)
	default:
		return e.EModelElementExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
