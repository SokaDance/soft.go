// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EReferenceImpl is the implementation of the model object 'EReference'
type EReferenceImpl struct {
	EStructuralFeatureExt
	eKeys            EList
	eOpposite        EReference
	isContainment    bool
	isResolveProxies bool
}
type eReferenceInitializers interface {
	initEKeys() EList
}

type eReferenceBasics interface {
	basicGetEOpposite() EReference
	basicGetEReferenceType() EClass
}

// newEReferenceImpl is the constructor of a EReferenceImpl
func newEReferenceImpl() *EReferenceImpl {
	eReference := new(EReferenceImpl)
	eReference.SetInterfaces(eReference)
	eReference.Initialize()
	return eReference
}

func (eReference *EReferenceImpl) Initialize() {
	eReference.EStructuralFeatureExt.Initialize()
	eReference.isContainment = false
	eReference.isResolveProxies = true

}

func (eReference *EReferenceImpl) asEReference() EReference {
	return eReference.GetInterfaces().(EReference)
}

func (eReference *EReferenceImpl) asInitializers() eReferenceInitializers {
	return eReference.GetInterfaces().(eReferenceInitializers)
}

func (eReference *EReferenceImpl) asBasics() eReferenceBasics {
	return eReference.GetInterfaces().(eReferenceBasics)
}

func (eReference *EReferenceImpl) EStaticClass() EClass {
	return GetPackage().GetEReference()
}

func (eReference *EReferenceImpl) EStaticFeatureCount() int {
	return EREFERENCE_FEATURE_COUNT
}

// GetEKeys get the value of eKeys
func (eReference *EReferenceImpl) GetEKeys() EList {
	if eReference.eKeys == nil {
		eReference.eKeys = eReference.asInitializers().initEKeys()
	}
	return eReference.eKeys
}

// GetEOpposite get the value of eOpposite
func (eReference *EReferenceImpl) GetEOpposite() EReference {
	if eReference.eOpposite != nil && eReference.eOpposite.EIsProxy() {
		oldEOpposite := eReference.eOpposite
		newEOpposite := eReference.EResolveProxy(oldEOpposite).(EReference)
		eReference.eOpposite = newEOpposite
		if newEOpposite != oldEOpposite {
			if eReference.ENotificationRequired() {
				eReference.ENotify(NewNotificationByFeatureID(eReference, RESOLVE, EREFERENCE__EOPPOSITE, oldEOpposite, newEOpposite, NO_INDEX))
			}
		}
	}
	return eReference.eOpposite
}

func (eReference *EReferenceImpl) basicGetEOpposite() EReference {
	return eReference.eOpposite
}

// SetEOpposite set the value of eOpposite
func (eReference *EReferenceImpl) SetEOpposite(newEOpposite EReference) {
	oldEOpposite := eReference.eOpposite
	eReference.eOpposite = newEOpposite
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__EOPPOSITE, oldEOpposite, newEOpposite, NO_INDEX))
	}
}

// GetEReferenceType get the value of eReferenceType
func (eReference *EReferenceImpl) GetEReferenceType() EClass {
	panic("GetEReferenceType not implemented")
}

func (eReference *EReferenceImpl) basicGetEReferenceType() EClass {
	panic("GetEReferenceType not implemented")
}

// IsContainer get the value of isContainer
func (eReference *EReferenceImpl) IsContainer() bool {
	panic("IsContainer not implemented")
}

// IsContainment get the value of isContainment
func (eReference *EReferenceImpl) IsContainment() bool {
	return eReference.isContainment
}

// SetContainment set the value of isContainment
func (eReference *EReferenceImpl) SetContainment(newIsContainment bool) {
	oldIsContainment := eReference.isContainment
	eReference.isContainment = newIsContainment
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__CONTAINMENT, oldIsContainment, newIsContainment, NO_INDEX))
	}
}

// IsResolveProxies get the value of isResolveProxies
func (eReference *EReferenceImpl) IsResolveProxies() bool {
	return eReference.isResolveProxies
}

// SetResolveProxies set the value of isResolveProxies
func (eReference *EReferenceImpl) SetResolveProxies(newIsResolveProxies bool) {
	oldIsResolveProxies := eReference.isResolveProxies
	eReference.isResolveProxies = newIsResolveProxies
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__RESOLVE_PROXIES, oldIsResolveProxies, newIsResolveProxies, NO_INDEX))
	}
}

func (eReference *EReferenceImpl) initEKeys() EList {
	return NewBasicEObjectList(eReference.AsEObjectInternal(), EREFERENCE__EKEYS, -1, false, false, false, true, false)
}

func (eReference *EReferenceImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EREFERENCE__CONTAINER:
		return eReference.asEReference().IsContainer()
	case EREFERENCE__CONTAINMENT:
		return eReference.asEReference().IsContainment()
	case EREFERENCE__EKEYS:
		list := eReference.asEReference().GetEKeys()
		if !resolve {
			if objects, _ := list.(EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
	case EREFERENCE__EOPPOSITE:
		if resolve {
			return eReference.asEReference().GetEOpposite()
		}
		return eReference.asBasics().basicGetEOpposite()
	case EREFERENCE__EREFERENCE_TYPE:
		if resolve {
			return eReference.asEReference().GetEReferenceType()
		}
		return eReference.asBasics().basicGetEReferenceType()
	case EREFERENCE__RESOLVE_PROXIES:
		return eReference.asEReference().IsResolveProxies()
	default:
		return eReference.EStructuralFeatureExt.EGetFromID(featureID, resolve)
	}
}

func (eReference *EReferenceImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EREFERENCE__CONTAINMENT:
		eReference.asEReference().SetContainment(newValue.(bool))
	case EREFERENCE__EKEYS:
		list := eReference.asEReference().GetEKeys()
		list.Clear()
		list.AddAll(newValue.(EList))
	case EREFERENCE__EOPPOSITE:
		eReference.asEReference().SetEOpposite(newValue.(EReference))
	case EREFERENCE__RESOLVE_PROXIES:
		eReference.asEReference().SetResolveProxies(newValue.(bool))
	default:
		eReference.EStructuralFeatureExt.ESetFromID(featureID, newValue)
	}
}

func (eReference *EReferenceImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EREFERENCE__CONTAINMENT:
		eReference.asEReference().SetContainment(false)
	case EREFERENCE__EKEYS:
		eReference.asEReference().GetEKeys().Clear()
	case EREFERENCE__EOPPOSITE:
		eReference.asEReference().SetEOpposite(nil)
	case EREFERENCE__RESOLVE_PROXIES:
		eReference.asEReference().SetResolveProxies(true)
	default:
		eReference.EStructuralFeatureExt.EUnsetFromID(featureID)
	}
}

func (eReference *EReferenceImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EREFERENCE__CONTAINER:
		return eReference.asEReference().IsContainer() != false
	case EREFERENCE__CONTAINMENT:
		return eReference.isContainment != false
	case EREFERENCE__EKEYS:
		return eReference.eKeys != nil && eReference.eKeys.Size() != 0
	case EREFERENCE__EOPPOSITE:
		return eReference.eOpposite != nil
	case EREFERENCE__EREFERENCE_TYPE:
		return eReference.asEReference().GetEReferenceType() != nil
	case EREFERENCE__RESOLVE_PROXIES:
		return eReference.isResolveProxies != true
	default:
		return eReference.EStructuralFeatureExt.EIsSetFromID(featureID)
	}
}
