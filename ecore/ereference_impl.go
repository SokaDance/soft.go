// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// eReferenceImpl is the implementation of the model object 'EReference'
type eReferenceImpl struct {
	eStructuralFeatureExt
	eKeys            EList[EAttribute]
	eOpposite        EReference
	isContainment    bool
	isResolveProxies bool
}
type eReferenceImplInitializers interface {
	initEKeys() EList[EAttribute]
}

// newEReferenceImpl is the constructor of a eReferenceImpl
func newEReferenceImpl() *eReferenceImpl {
	eReference := new(eReferenceImpl)
	eReference.SetInterfaces(eReference)
	eReference.Initialize()
	return eReference
}

func (eReference *eReferenceImpl) Initialize() {
	eReference.eStructuralFeatureExt.Initialize()
	eReference.isContainment = false
	eReference.isResolveProxies = true

}

func (eReference *eReferenceImpl) asEReference() EReference {
	return eReference.GetInterfaces().(EReference)
}

func (eReference *eReferenceImpl) asInitializers() eReferenceImplInitializers {
	return eReference.AsEObject().(eReferenceImplInitializers)
}

func (eReference *eReferenceImpl) EStaticClass() EClass {
	return GetPackage().GetEReference()
}

func (eReference *eReferenceImpl) EStaticFeatureCount() int {
	return EREFERENCE_FEATURE_COUNT
}

// GetEKeys get the value of eKeys
func (eReference *eReferenceImpl) GetEKeys() EList[EAttribute] {
	if eReference.eKeys == nil {
		eReference.eKeys = eReference.asInitializers().initEKeys()
	}
	return eReference.eKeys
}

// GetEOpposite get the value of eOpposite
func (eReference *eReferenceImpl) GetEOpposite() EReference {
	if eReference.eOpposite != nil && eReference.eOpposite.EIsProxy() {
		oldEOpposite := eReference.eOpposite
		newEOpposite := eReference.EResolveProxy(oldEOpposite).(EReference)
		eReference.eOpposite = newEOpposite
		if newEOpposite != oldEOpposite {
			if eReference.ENotificationRequired() {
				eReference.ENotify(NewNotificationByFeatureID(eReference, RESOLVE, EREFERENCE__EOPPOSITE, oldEOpposite, newEOpposite, NO_INDEX))
			}
		}
	}
	return eReference.eOpposite
}

func (eReference *eReferenceImpl) basicGetEOpposite() EReference {
	return eReference.eOpposite
}

// SetEOpposite set the value of eOpposite
func (eReference *eReferenceImpl) SetEOpposite(newEOpposite EReference) {
	oldEOpposite := eReference.eOpposite
	eReference.eOpposite = newEOpposite
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__EOPPOSITE, oldEOpposite, newEOpposite, NO_INDEX))
	}
}

// GetEReferenceType get the value of eReferenceType
func (eReference *eReferenceImpl) GetEReferenceType() EClass {
	panic("GetEReferenceType not implemented")
}

func (eReference *eReferenceImpl) basicGetEReferenceType() EClass {
	panic("GetEReferenceType not implemented")
}

// IsContainer get the value of isContainer
func (eReference *eReferenceImpl) IsContainer() bool {
	panic("IsContainer not implemented")
}

// IsContainment get the value of isContainment
func (eReference *eReferenceImpl) IsContainment() bool {
	return eReference.isContainment
}

// SetContainment set the value of isContainment
func (eReference *eReferenceImpl) SetContainment(newIsContainment bool) {
	oldIsContainment := eReference.isContainment
	eReference.isContainment = newIsContainment
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__CONTAINMENT, oldIsContainment, newIsContainment, NO_INDEX))
	}
}

// IsResolveProxies get the value of isResolveProxies
func (eReference *eReferenceImpl) IsResolveProxies() bool {
	return eReference.isResolveProxies
}

// SetResolveProxies set the value of isResolveProxies
func (eReference *eReferenceImpl) SetResolveProxies(newIsResolveProxies bool) {
	oldIsResolveProxies := eReference.isResolveProxies
	eReference.isResolveProxies = newIsResolveProxies
	if eReference.ENotificationRequired() {
		eReference.ENotify(NewNotificationByFeatureID(eReference.AsEObject(), SET, EREFERENCE__RESOLVE_PROXIES, oldIsResolveProxies, newIsResolveProxies, NO_INDEX))
	}
}

func (eReference *eReferenceImpl) initEKeys() EList[EAttribute] {
	return NewBasicEObjectList[EAttribute](eReference.AsEObjectInternal(), EREFERENCE__EKEYS, -1, false, false, false, true, false)
}

func (eReference *eReferenceImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EREFERENCE__CONTAINER:
		return ToAny(eReference.asEReference().IsContainer())
	case EREFERENCE__CONTAINMENT:
		return ToAny(eReference.asEReference().IsContainment())
	case EREFERENCE__EKEYS:
		list := eReference.asEReference().GetEKeys().(EObjectList[EAttribute])
		if !resolve {
			list = list.GetUnResolvedList()
		}
		return ToAnyList[EAttribute](list)
	case EREFERENCE__EOPPOSITE:
		if resolve {
			return ToAny(eReference.asEReference().GetEOpposite())
		}
		return ToAny(eReference.basicGetEOpposite())
	case EREFERENCE__EREFERENCE_TYPE:
		if resolve {
			return ToAny(eReference.asEReference().GetEReferenceType())
		}
		return ToAny(eReference.basicGetEReferenceType())
	case EREFERENCE__RESOLVE_PROXIES:
		return ToAny(eReference.asEReference().IsResolveProxies())
	default:
		return eReference.eStructuralFeatureExt.EGetFromID(featureID, resolve)
	}
}

func (eReference *eReferenceImpl) ESetFromID(featureID int, value any) {
	switch featureID {
	case EREFERENCE__CONTAINMENT:
		newValue := FromAny[bool](value)
		eReference.asEReference().SetContainment(newValue)
	case EREFERENCE__EKEYS:
		newList := FromAnyList[EAttribute](value)
		l := eReference.asEReference().GetEKeys()
		l.Clear()
		l.AddAll(newList)
	case EREFERENCE__EOPPOSITE:
		newValue := FromAny[EReference](value)
		eReference.asEReference().SetEOpposite(newValue)
	case EREFERENCE__RESOLVE_PROXIES:
		newValue := FromAny[bool](value)
		eReference.asEReference().SetResolveProxies(newValue)
	default:
		eReference.eStructuralFeatureExt.ESetFromID(featureID, value)
	}
}

func (eReference *eReferenceImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EREFERENCE__CONTAINMENT:
		eReference.asEReference().SetContainment(false)
	case EREFERENCE__EKEYS:
		eReference.asEReference().GetEKeys().Clear()
	case EREFERENCE__EOPPOSITE:
		eReference.asEReference().SetEOpposite(nil)
	case EREFERENCE__RESOLVE_PROXIES:
		eReference.asEReference().SetResolveProxies(true)
	default:
		eReference.eStructuralFeatureExt.EUnsetFromID(featureID)
	}
}

func (eReference *eReferenceImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EREFERENCE__CONTAINER:
		return eReference.asEReference().IsContainer() != false
	case EREFERENCE__CONTAINMENT:
		return eReference.isContainment != false
	case EREFERENCE__EKEYS:
		return eReference.eKeys != nil && eReference.eKeys.Size() != 0
	case EREFERENCE__EOPPOSITE:
		return eReference.eOpposite != nil
	case EREFERENCE__EREFERENCE_TYPE:
		return eReference.GetEReferenceType() != nil
	case EREFERENCE__RESOLVE_PROXIES:
		return eReference.isResolveProxies != true
	default:
		return eReference.eStructuralFeatureExt.EIsSetFromID(featureID)
	}
}
