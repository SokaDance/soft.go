// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************
package ecore

import mock "github.com/stretchr/testify/mock"

// MockEMapEntry_Prototype is an autogenerated mock type for the EMapEntry type
type MockEMapEntry struct {
	mock.Mock
	MockEMapEntry_Prototype
}

type MockEMapEntry_Prototype struct {
	mock *mock.Mock
}

func (_mp *MockEMapEntry_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
}

type MockEMapEntry_Expecter struct {
	mock *mock.Mock
}

func (_me *MockEMapEntry_Expecter) SetMock(mock *mock.Mock) {
	_me.mock = mock
}

func (_m *MockEMapEntry_Prototype) EXPECT() *MockEMapEntry_Expecter {
	return &MockEMapEntry_Expecter{mock: _m.mock}
}

// GetKey provides a mock function with given fields:
func (_m *MockEMapEntry_Prototype) GetKey() interface{} {
	ret := _m.mock.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEMapEntry_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type MockEMapEntry_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
func (_e *MockEMapEntry_Expecter) GetKey() *MockEMapEntry_GetKey_Call {
	return &MockEMapEntry_GetKey_Call{Call: _e.mock.On("GetKey")}
}

func (_c *MockEMapEntry_GetKey_Call) Run(run func()) *MockEMapEntry_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEMapEntry_GetKey_Call) Return(_a0 interface{}) *MockEMapEntry_GetKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetValue provides a mock function with given fields:
func (_m *MockEMapEntry_Prototype) GetValue() interface{} {
	ret := _m.mock.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// MockEMapEntry_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockEMapEntry_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
func (_e *MockEMapEntry_Expecter) GetValue() *MockEMapEntry_GetValue_Call {
	return &MockEMapEntry_GetValue_Call{Call: _e.mock.On("GetValue")}
}

func (_c *MockEMapEntry_GetValue_Call) Run(run func()) *MockEMapEntry_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEMapEntry_GetValue_Call) Return(_a0 interface{}) *MockEMapEntry_GetValue_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetKey provides a mock function with given fields: _a0
func (_m *MockEMapEntry_Prototype) SetKey(_a0 interface{}) {
	_m.mock.Called(_a0)
}

// MockEMapEntry_SetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKey'
type MockEMapEntry_SetKey_Call struct {
	*mock.Call
}

// SetKey is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockEMapEntry_Expecter) SetKey(_a0 interface{}) *MockEMapEntry_SetKey_Call {
	return &MockEMapEntry_SetKey_Call{Call: _e.mock.On("SetKey", _a0)}
}

func (_c *MockEMapEntry_SetKey_Call) Run(run func(_a0 interface{})) *MockEMapEntry_SetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEMapEntry_SetKey_Call) Return() *MockEMapEntry_SetKey_Call {
	_c.Call.Return()
	return _c
}

// SetValue provides a mock function with given fields: _a0
func (_m *MockEMapEntry_Prototype) SetValue(_a0 interface{}) {
	_m.mock.Called(_a0)
}

// MockEMapEntry_SetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValue'
type MockEMapEntry_SetValue_Call struct {
	*mock.Call
}

// SetValue is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockEMapEntry_Expecter) SetValue(_a0 interface{}) *MockEMapEntry_SetValue_Call {
	return &MockEMapEntry_SetValue_Call{Call: _e.mock.On("SetValue", _a0)}
}

func (_c *MockEMapEntry_SetValue_Call) Run(run func(_a0 interface{})) *MockEMapEntry_SetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0])
	})
	return _c
}

func (_c *MockEMapEntry_SetValue_Call) Return() *MockEMapEntry_SetValue_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEMapEntry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEMapEntry creates a new instance of MockEMapEntry_Prototype. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEMapEntry(t mockConstructorTestingTNewMockEMapEntry) *MockEMapEntry {
	mock := &MockEMapEntry{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
