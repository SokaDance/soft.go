// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// EModelElementImpl is the implementation of the model object 'EModelElement'
type EModelElementImpl struct {
	CompactEObjectContainer
	eAnnotations EList
}
type eModelElementInitializers interface {
	initEAnnotations() EList
}

// newEModelElementImpl is the constructor of a EModelElementImpl
func newEModelElementImpl() *EModelElementImpl {
	eModelElement := new(EModelElementImpl)
	eModelElement.SetInterfaces(eModelElement)
	eModelElement.Initialize()
	return eModelElement
}

func (eModelElement *EModelElementImpl) Initialize() {
	eModelElement.CompactEObjectContainer.Initialize()

}

func (eModelElement *EModelElementImpl) asEModelElement() EModelElement {
	return eModelElement.GetInterfaces().(EModelElement)
}

func (eModelElement *EModelElementImpl) asInitializers() eModelElementInitializers {
	return eModelElement.GetInterfaces().(eModelElementInitializers)
}

func (eModelElement *EModelElementImpl) EStaticClass() EClass {
	return GetPackage().GetEModelElement()
}

func (eModelElement *EModelElementImpl) EStaticFeatureCount() int {
	return EMODEL_ELEMENT_FEATURE_COUNT
}

// GetEAnnotation default implementation
func (eModelElement *EModelElementImpl) GetEAnnotation(string) EAnnotation {
	panic("GetEAnnotation not implemented")
}

// GetEAnnotations get the value of eAnnotations
func (eModelElement *EModelElementImpl) GetEAnnotations() EList {
	if eModelElement.eAnnotations == nil {
		eModelElement.eAnnotations = eModelElement.asInitializers().initEAnnotations()
	}
	return eModelElement.eAnnotations
}

func (eModelElement *EModelElementImpl) initEAnnotations() EList {
	return NewBasicEObjectList(eModelElement.AsEObjectInternal(), EMODEL_ELEMENT__EANNOTATIONS, EANNOTATION__EMODEL_ELEMENT, true, true, true, false, false)
}

func (eModelElement *EModelElementImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		return eModelElement.asEModelElement().GetEAnnotations()
	default:
		return eModelElement.CompactEObjectContainer.EGetFromID(featureID, resolve)
	}
}

func (eModelElement *EModelElementImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		list := eModelElement.asEModelElement().GetEAnnotations()
		list.Clear()
		list.AddAll(newValue.(EList))
	default:
		eModelElement.CompactEObjectContainer.ESetFromID(featureID, newValue)
	}
}

func (eModelElement *EModelElementImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		eModelElement.asEModelElement().GetEAnnotations().Clear()
	default:
		eModelElement.CompactEObjectContainer.EUnsetFromID(featureID)
	}
}

func (eModelElement *EModelElementImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		return eModelElement.eAnnotations != nil && eModelElement.eAnnotations.Size() != 0
	default:
		return eModelElement.CompactEObjectContainer.EIsSetFromID(featureID)
	}
}

func (eModelElement *EModelElementImpl) EInvokeFromID(operationID int, arguments EList) any {
	switch operationID {
	case EMODEL_ELEMENT__GET_EANNOTATION_ESTRING:
		return eModelElement.asEModelElement().GetEAnnotation(arguments.Get(0).(string))
	default:
		return eModelElement.CompactEObjectContainer.EInvokeFromID(operationID, arguments)
	}
}

func (eModelElement *EModelElementImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		list := eModelElement.GetEAnnotations().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	default:
		return eModelElement.CompactEObjectContainer.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eModelElement *EModelElementImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		list := eModelElement.GetEAnnotations().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return eModelElement.CompactEObjectContainer.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
