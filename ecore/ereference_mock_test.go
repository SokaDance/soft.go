// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEReference() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEReferenceRun struct {
	mock.Mock
}

func (m *mockEReferenceRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEReferenceRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEReferenceRun creates a new instance of mockEReferenceRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEReferenceRun(t mockConstructorTestingTmockEReferenceRun, args ...any) *mockEReferenceRun {
	mock := &mockEReferenceRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEReferenceIsContainer tests method IsContainer
func TestMockEReferenceIsContainer(t *testing.T) {
	o := NewMockEReference(t)
	r := bool(true)
	m := newMockEReferenceRun(t)
	o.EXPECT().IsContainer().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsContainer().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsContainer())
	assert.Equal(t, r, o.IsContainer())
}

// TestMockEReferenceIsContainment tests method IsContainment
func TestMockEReferenceIsContainment(t *testing.T) {
	o := NewMockEReference(t)
	r := bool(true)
	m := newMockEReferenceRun(t)
	o.EXPECT().IsContainment().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsContainment().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsContainment())
	assert.Equal(t, r, o.IsContainment())
}

// TestMockEReferenceSetContainment tests method SetContainment
func TestMockEReferenceSetContainment(t *testing.T) {
	o := &MockEReference{}
	v := bool(true)
	o.On("SetContainment", v).Once()
	o.SetContainment(v)
	o.AssertExpectations(t)
}

// TestMockEReferenceGetEKeys tests method GetEKeys
func TestMockEReferenceGetEKeys(t *testing.T) {
	o := &MockEReference{}
	l := &MockEList{}
	m := newMockEReferenceRun(t)
	o.EXPECT().GetEKeys().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEKeys().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEKeys())
	assert.Equal(t, l, o.GetEKeys())
}

// TestMockEReferenceGetEOpposite tests method GetEOpposite
func TestMockEReferenceGetEOpposite(t *testing.T) {
	o := NewMockEReference(t)
	r := new(MockEReference)
	m := newMockEReferenceRun(t)
	o.EXPECT().GetEOpposite().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEOpposite().Once().Return(func() EReference { return r })
	assert.Equal(t, r, o.GetEOpposite())
	assert.Equal(t, r, o.GetEOpposite())
}

// TestMockEReferenceSetEOpposite tests method SetEOpposite
func TestMockEReferenceSetEOpposite(t *testing.T) {
	o := &MockEReference{}
	v := new(MockEReference)
	o.On("SetEOpposite", v).Once()
	o.SetEOpposite(v)
	o.AssertExpectations(t)
}

// TestMockEReferenceGetEReferenceType tests method GetEReferenceType
func TestMockEReferenceGetEReferenceType(t *testing.T) {
	o := NewMockEReference(t)
	r := new(MockEClass)
	m := newMockEReferenceRun(t)
	o.EXPECT().GetEReferenceType().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEReferenceType().Once().Return(func() EClass { return r })
	assert.Equal(t, r, o.GetEReferenceType())
	assert.Equal(t, r, o.GetEReferenceType())
}

// TestMockEReferenceIsResolveProxies tests method IsResolveProxies
func TestMockEReferenceIsResolveProxies(t *testing.T) {
	o := NewMockEReference(t)
	r := bool(true)
	m := newMockEReferenceRun(t)
	o.EXPECT().IsResolveProxies().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsResolveProxies().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsResolveProxies())
	assert.Equal(t, r, o.IsResolveProxies())
}

// TestMockEReferenceSetResolveProxies tests method SetResolveProxies
func TestMockEReferenceSetResolveProxies(t *testing.T) {
	o := &MockEReference{}
	v := bool(true)
	o.On("SetResolveProxies", v).Once()
	o.SetResolveProxies(v)
	o.AssertExpectations(t)
}
