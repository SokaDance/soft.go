// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// eTypeParameterImpl is the implementation of the model object 'ETypeParameter'
type eTypeParameterImpl struct {
	eNamedElementImpl
	eBounds EList[EGenericType]
}
type eTypeParameterImplInitializers interface {
	initEBounds() EList[EGenericType]
}

// newETypeParameterImpl is the constructor of a eTypeParameterImpl
func newETypeParameterImpl() *eTypeParameterImpl {
	eTypeParameter := new(eTypeParameterImpl)
	eTypeParameter.SetInterfaces(eTypeParameter)
	eTypeParameter.Initialize()
	return eTypeParameter
}

func (eTypeParameter *eTypeParameterImpl) Initialize() {
	eTypeParameter.eNamedElementImpl.Initialize()

}

func (eTypeParameter *eTypeParameterImpl) asETypeParameter() ETypeParameter {
	return eTypeParameter.GetInterfaces().(ETypeParameter)
}

func (eTypeParameter *eTypeParameterImpl) asInitializers() eTypeParameterImplInitializers {
	return eTypeParameter.AsEObject().(eTypeParameterImplInitializers)
}

func (eTypeParameter *eTypeParameterImpl) EStaticClass() EClass {
	return GetPackage().GetETypeParameter()
}

func (eTypeParameter *eTypeParameterImpl) EStaticFeatureCount() int {
	return ETYPE_PARAMETER_FEATURE_COUNT
}

// GetEBounds get the value of eBounds
func (eTypeParameter *eTypeParameterImpl) GetEBounds() EList[EGenericType] {
	if eTypeParameter.eBounds == nil {
		eTypeParameter.eBounds = eTypeParameter.asInitializers().initEBounds()
	}
	return eTypeParameter.eBounds
}

func (eTypeParameter *eTypeParameterImpl) initEBounds() EList[EGenericType] {
	return NewBasicEObjectList[EGenericType](eTypeParameter.AsEObjectInternal(), ETYPE_PARAMETER__EBOUNDS, -1, true, true, false, false, false)
}

func (eTypeParameter *eTypeParameterImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		return ToAnyList(eTypeParameter.asETypeParameter().GetEBounds())
	default:
		return eTypeParameter.eNamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (eTypeParameter *eTypeParameterImpl) ESetFromID(featureID int, value any) {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		newList := FromAnyList[EGenericType](value)
		l := eTypeParameter.asETypeParameter().GetEBounds()
		l.Clear()
		l.AddAll(newList)
	default:
		eTypeParameter.eNamedElementImpl.ESetFromID(featureID, value)
	}
}

func (eTypeParameter *eTypeParameterImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		eTypeParameter.asETypeParameter().GetEBounds().Clear()
	default:
		eTypeParameter.eNamedElementImpl.EUnsetFromID(featureID)
	}
}

func (eTypeParameter *eTypeParameterImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		return eTypeParameter.eBounds != nil && eTypeParameter.eBounds.Size() != 0
	default:
		return eTypeParameter.eNamedElementImpl.EIsSetFromID(featureID)
	}
}

func (eTypeParameter *eTypeParameterImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		list := eTypeParameter.GetEBounds().(ENotifyingList[EGenericType])
		end := otherEnd.(EGenericType)
		return list.RemoveWithNotification(end, notifications)
	default:
		return eTypeParameter.eNamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
