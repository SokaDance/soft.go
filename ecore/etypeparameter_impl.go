// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// ETypeParameterImpl is the implementation of the model object 'ETypeParameter'
type ETypeParameterImpl struct {
	ENamedElementImpl
	eBounds EList
}
type eTypeParameterInitializers interface {
	initEBounds() EList
}

// newETypeParameterImpl is the constructor of a ETypeParameterImpl
func newETypeParameterImpl() *ETypeParameterImpl {
	e := new(ETypeParameterImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *ETypeParameterImpl) Initialize() {
	e.ENamedElementImpl.Initialize()

}

func (e *ETypeParameterImpl) asETypeParameter() ETypeParameter {
	return e.GetInterfaces().(ETypeParameter)
}

func (e *ETypeParameterImpl) asInitializers() eTypeParameterInitializers {
	return e.GetInterfaces().(eTypeParameterInitializers)
}

func (e *ETypeParameterImpl) EStaticClass() EClass {
	return GetPackage().GetETypeParameter()
}

func (e *ETypeParameterImpl) EStaticFeatureCount() int {
	return ETYPE_PARAMETER_FEATURE_COUNT
}

// GetEBounds get the value of eBounds
func (e *ETypeParameterImpl) GetEBounds() EList {
	if e.eBounds == nil {
		e.eBounds = e.asInitializers().initEBounds()
	}
	return e.eBounds
}

func (e *ETypeParameterImpl) initEBounds() EList {
	return NewBasicEObjectList(e.AsEObjectInternal(), ETYPE_PARAMETER__EBOUNDS, -1, true, true, false, false, false)
}

func (e *ETypeParameterImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		return e.asETypeParameter().GetEBounds()
	default:
		return e.ENamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (e *ETypeParameterImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		list := e.asETypeParameter().GetEBounds()
		list.Clear()
		list.AddAll(newValue.(EList))
	default:
		e.ENamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (e *ETypeParameterImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		e.asETypeParameter().GetEBounds().Clear()
	default:
		e.ENamedElementImpl.EUnsetFromID(featureID)
	}
}

func (e *ETypeParameterImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		return e.eBounds != nil && e.eBounds.Size() != 0
	default:
		return e.ENamedElementImpl.EIsSetFromID(featureID)
	}
}

func (e *ETypeParameterImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ETYPE_PARAMETER__EBOUNDS:
		list := e.GetEBounds().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return e.ENamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
