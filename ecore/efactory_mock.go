// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/mock"
)

type MockEFactory struct {
	MockEModelElement
}

type MockEFactory_Expecter struct {
	MockEModelElement_Expecter
}

func (eFactory *MockEFactory) EXPECT() *MockEFactory_Expecter {
	e := &MockEFactory_Expecter{}
	e.Mock = &eFactory.Mock
	return e
}

// GetEPackage get the value of ePackage
func (eFactory *MockEFactory) GetEPackage() EPackage {
	ret := eFactory.Called()

	var r EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EPackage)
		}
	}

	return r
}

type MockEFactory_GetEPackage_Call struct {
	*mock.Call
}

func (e *MockEFactory_Expecter) GetEPackage() *MockEFactory_GetEPackage_Call {
	return &MockEFactory_GetEPackage_Call{Call: e.Mock.On("GetEPackage")}
}

func (c *MockEFactory_GetEPackage_Call) Run(run func()) *MockEFactory_GetEPackage_Call {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *MockEFactory_GetEPackage_Call) Return(ePackage EPackage) *MockEFactory_GetEPackage_Call {
	c.Call.Return(ePackage)
	return c
}

// SetEPackage provides mock implementation for setting the value of ePackage
func (eFactory *MockEFactory) SetEPackage(newEPackage EPackage) {
	eFactory.Called(newEPackage)
}

type MockEFactory_SetEPackage_Call struct {
	*mock.Call
}

func (e *MockEFactory_Expecter) SetEPackage(newEPackage EPackage) *MockEFactory_SetEPackage_Call {
	return &MockEFactory_SetEPackage_Call{Call: e.Mock.On("SetEPackage", newEPackage)}
}

func (c *MockEFactory_SetEPackage_Call) Run(run func(newEPackage EPackage)) *MockEFactory_SetEPackage_Call {
	c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EPackage))
	})
	return c
}

func (c *MockEFactory_SetEPackage_Call) Return() *MockEFactory_SetEPackage_Call {
	c.Call.Return()
	return c
}

// ConvertToString provides mock implementation
func (eFactory *MockEFactory) ConvertToString(eDataType EDataType, instanceValue any) string {
	ret := eFactory.Called(eDataType, instanceValue)

	var r string
	if rf, ok := ret.Get(0).(func() string); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(string)
		}
	}

	return r
}

// Create provides mock implementation
func (eFactory *MockEFactory) Create(eClass EClass) EObject {
	ret := eFactory.Called(eClass)

	var r EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EObject)
		}
	}

	return r
}

// CreateFromString provides mock implementation
func (eFactory *MockEFactory) CreateFromString(eDataType EDataType, literalValue string) any {
	ret := eFactory.Called(eDataType, literalValue)

	var r any
	if rf, ok := ret.Get(0).(func() any); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(any)
		}
	}

	return r
}

type mockConstructorTestingTNewMockEFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEFactory creates a new instance of MockEFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEFactory(t mockConstructorTestingTNewMockEFactory) *MockEFactory {
	mock := &MockEFactory{}
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
