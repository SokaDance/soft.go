// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEStringToStringMapEntry() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEStringToStringMapEntryGetTypedKey tests method GetTypedKey
func TestMockEStringToStringMapEntryGetTypedKey(t *testing.T) {
	o := NewMockEStringToStringMapEntry(t)
	r := string("Test String")
	m := NewMockRun(t)
	o.EXPECT().GetTypedKey().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetTypedKey().Call.Return(func() string { return r }).Once()
	assert.Equal(t, r, o.GetTypedKey())
	assert.Equal(t, r, o.GetTypedKey())
}

// TestMockEStringToStringMapEntrySetTypedKey tests method SetTypedKey
func TestMockEStringToStringMapEntrySetTypedKey(t *testing.T) {
	o := NewMockEStringToStringMapEntry(t)
	v := string("Test String")
	m := NewMockRun(t, v)
	o.EXPECT().SetTypedKey(v).Return().Run(func(_p0 string) { m.Run(_p0) }).Once()
	o.SetTypedKey(v)
}

// TestMockEStringToStringMapEntryGetTypedValue tests method GetTypedValue
func TestMockEStringToStringMapEntryGetTypedValue(t *testing.T) {
	o := NewMockEStringToStringMapEntry(t)
	r := string("Test String")
	m := NewMockRun(t)
	o.EXPECT().GetTypedValue().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().GetTypedValue().Call.Return(func() string { return r }).Once()
	assert.Equal(t, r, o.GetTypedValue())
	assert.Equal(t, r, o.GetTypedValue())
}

// TestMockEStringToStringMapEntrySetTypedValue tests method SetTypedValue
func TestMockEStringToStringMapEntrySetTypedValue(t *testing.T) {
	o := NewMockEStringToStringMapEntry(t)
	v := string("Test String")
	m := NewMockRun(t, v)
	o.EXPECT().SetTypedValue(v).Return().Run(func(_p0 string) { m.Run(_p0) }).Once()
	o.SetTypedValue(v)
}
