// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEStoreEObject is an autogenerated mock type for the EStoreEObject type
type MockEStoreEObject struct {
	mock.Mock
}

type MockEStoreEObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEStoreEObject) EXPECT() *MockEStoreEObject_Expecter {
	return &MockEStoreEObject_Expecter{mock: &_m.Mock}
}

// EAdapters provides a mock function with given fields:
func (_m *MockEStoreEObject) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// MockEStoreEObject_EAdapters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EAdapters'
type MockEStoreEObject_EAdapters_Call struct {
	*mock.Call
}

// EAdapters is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EAdapters() *MockEStoreEObject_EAdapters_Call {
	return &MockEStoreEObject_EAdapters_Call{Call: _e.mock.On("EAdapters")}
}

func (_c *MockEStoreEObject_EAdapters_Call) Run(run func()) *MockEStoreEObject_EAdapters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EAdapters_Call) Return(_a0 EList) *MockEStoreEObject_EAdapters_Call {
	_c.Call.Return(_a0)
	return _c
}

// EAllContents provides a mock function with given fields:
func (_m *MockEStoreEObject) EAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// MockEStoreEObject_EAllContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EAllContents'
type MockEStoreEObject_EAllContents_Call struct {
	*mock.Call
}

// EAllContents is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EAllContents() *MockEStoreEObject_EAllContents_Call {
	return &MockEStoreEObject_EAllContents_Call{Call: _e.mock.On("EAllContents")}
}

func (_c *MockEStoreEObject_EAllContents_Call) Run(run func()) *MockEStoreEObject_EAllContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EAllContents_Call) Return(_a0 EIterator) *MockEStoreEObject_EAllContents_Call {
	_c.Call.Return(_a0)
	return _c
}

// EClass provides a mock function with given fields:
func (_m *MockEStoreEObject) EClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// MockEStoreEObject_EClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EClass'
type MockEStoreEObject_EClass_Call struct {
	*mock.Call
}

// EClass is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EClass() *MockEStoreEObject_EClass_Call {
	return &MockEStoreEObject_EClass_Call{Call: _e.mock.On("EClass")}
}

func (_c *MockEStoreEObject_EClass_Call) Run(run func()) *MockEStoreEObject_EClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EClass_Call) Return(_a0 EClass) *MockEStoreEObject_EClass_Call {
	_c.Call.Return(_a0)
	return _c
}

// EContainer provides a mock function with given fields:
func (_m *MockEStoreEObject) EContainer() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// MockEStoreEObject_EContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EContainer'
type MockEStoreEObject_EContainer_Call struct {
	*mock.Call
}

// EContainer is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EContainer() *MockEStoreEObject_EContainer_Call {
	return &MockEStoreEObject_EContainer_Call{Call: _e.mock.On("EContainer")}
}

func (_c *MockEStoreEObject_EContainer_Call) Run(run func()) *MockEStoreEObject_EContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EContainer_Call) Return(_a0 EObject) *MockEStoreEObject_EContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

// EContainingFeature provides a mock function with given fields:
func (_m *MockEStoreEObject) EContainingFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// MockEStoreEObject_EContainingFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EContainingFeature'
type MockEStoreEObject_EContainingFeature_Call struct {
	*mock.Call
}

// EContainingFeature is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EContainingFeature() *MockEStoreEObject_EContainingFeature_Call {
	return &MockEStoreEObject_EContainingFeature_Call{Call: _e.mock.On("EContainingFeature")}
}

func (_c *MockEStoreEObject_EContainingFeature_Call) Run(run func()) *MockEStoreEObject_EContainingFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EContainingFeature_Call) Return(_a0 EStructuralFeature) *MockEStoreEObject_EContainingFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

// EContainmentFeature provides a mock function with given fields:
func (_m *MockEStoreEObject) EContainmentFeature() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// MockEStoreEObject_EContainmentFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EContainmentFeature'
type MockEStoreEObject_EContainmentFeature_Call struct {
	*mock.Call
}

// EContainmentFeature is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EContainmentFeature() *MockEStoreEObject_EContainmentFeature_Call {
	return &MockEStoreEObject_EContainmentFeature_Call{Call: _e.mock.On("EContainmentFeature")}
}

func (_c *MockEStoreEObject_EContainmentFeature_Call) Run(run func()) *MockEStoreEObject_EContainmentFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EContainmentFeature_Call) Return(_a0 EReference) *MockEStoreEObject_EContainmentFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

// EContents provides a mock function with given fields:
func (_m *MockEStoreEObject) EContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// MockEStoreEObject_EContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EContents'
type MockEStoreEObject_EContents_Call struct {
	*mock.Call
}

// EContents is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EContents() *MockEStoreEObject_EContents_Call {
	return &MockEStoreEObject_EContents_Call{Call: _e.mock.On("EContents")}
}

func (_c *MockEStoreEObject_EContents_Call) Run(run func()) *MockEStoreEObject_EContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EContents_Call) Return(_a0 EList) *MockEStoreEObject_EContents_Call {
	_c.Call.Return(_a0)
	return _c
}

// ECrossReferences provides a mock function with given fields:
func (_m *MockEStoreEObject) ECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// MockEStoreEObject_ECrossReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ECrossReferences'
type MockEStoreEObject_ECrossReferences_Call struct {
	*mock.Call
}

// ECrossReferences is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) ECrossReferences() *MockEStoreEObject_ECrossReferences_Call {
	return &MockEStoreEObject_ECrossReferences_Call{Call: _e.mock.On("ECrossReferences")}
}

func (_c *MockEStoreEObject_ECrossReferences_Call) Run(run func()) *MockEStoreEObject_ECrossReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_ECrossReferences_Call) Return(_a0 EList) *MockEStoreEObject_ECrossReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

// EDeliver provides a mock function with given fields:
func (_m *MockEStoreEObject) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEStoreEObject_EDeliver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EDeliver'
type MockEStoreEObject_EDeliver_Call struct {
	*mock.Call
}

// EDeliver is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EDeliver() *MockEStoreEObject_EDeliver_Call {
	return &MockEStoreEObject_EDeliver_Call{Call: _e.mock.On("EDeliver")}
}

func (_c *MockEStoreEObject_EDeliver_Call) Run(run func()) *MockEStoreEObject_EDeliver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EDeliver_Call) Return(_a0 bool) *MockEStoreEObject_EDeliver_Call {
	_c.Call.Return(_a0)
	return _c
}

// EGet provides a mock function with given fields: _a0
func (_m *MockEStoreEObject) EGet(_a0 EStructuralFeature) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEStoreEObject_EGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EGet'
type MockEStoreEObject_EGet_Call struct {
	*mock.Call
}

// EGet is a helper method to define mock.On call
//   - _a0 EStructuralFeature
func (_e *MockEStoreEObject_Expecter) EGet(_a0 interface{}) *MockEStoreEObject_EGet_Call {
	return &MockEStoreEObject_EGet_Call{Call: _e.mock.On("EGet", _a0)}
}

func (_c *MockEStoreEObject_EGet_Call) Run(run func(_a0 EStructuralFeature)) *MockEStoreEObject_EGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EStructuralFeature))
	})
	return _c
}

func (_c *MockEStoreEObject_EGet_Call) Return(_a0 interface{}) *MockEStoreEObject_EGet_Call {
	_c.Call.Return(_a0)
	return _c
}

// EGetResolve provides a mock function with given fields: _a0, _a1
func (_m *MockEStoreEObject) EGetResolve(_a0 EStructuralFeature, _a1 bool) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature, bool) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEStoreEObject_EGetResolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EGetResolve'
type MockEStoreEObject_EGetResolve_Call struct {
	*mock.Call
}

// EGetResolve is a helper method to define mock.On call
//   - _a0 EStructuralFeature
//   - _a1 bool
func (_e *MockEStoreEObject_Expecter) EGetResolve(_a0 interface{}, _a1 interface{}) *MockEStoreEObject_EGetResolve_Call {
	return &MockEStoreEObject_EGetResolve_Call{Call: _e.mock.On("EGetResolve", _a0, _a1)}
}

func (_c *MockEStoreEObject_EGetResolve_Call) Run(run func(_a0 EStructuralFeature, _a1 bool)) *MockEStoreEObject_EGetResolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EStructuralFeature), args[1].(bool))
	})
	return _c
}

func (_c *MockEStoreEObject_EGetResolve_Call) Return(_a0 interface{}) *MockEStoreEObject_EGetResolve_Call {
	_c.Call.Return(_a0)
	return _c
}

// EInvoke provides a mock function with given fields: _a0, _a1
func (_m *MockEStoreEObject) EInvoke(_a0 EOperation, _a1 EList) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EOperation, EList) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEStoreEObject_EInvoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EInvoke'
type MockEStoreEObject_EInvoke_Call struct {
	*mock.Call
}

// EInvoke is a helper method to define mock.On call
//   - _a0 EOperation
//   - _a1 EList
func (_e *MockEStoreEObject_Expecter) EInvoke(_a0 interface{}, _a1 interface{}) *MockEStoreEObject_EInvoke_Call {
	return &MockEStoreEObject_EInvoke_Call{Call: _e.mock.On("EInvoke", _a0, _a1)}
}

func (_c *MockEStoreEObject_EInvoke_Call) Run(run func(_a0 EOperation, _a1 EList)) *MockEStoreEObject_EInvoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EOperation), args[1].(EList))
	})
	return _c
}

func (_c *MockEStoreEObject_EInvoke_Call) Return(_a0 interface{}) *MockEStoreEObject_EInvoke_Call {
	_c.Call.Return(_a0)
	return _c
}

// EIsProxy provides a mock function with given fields:
func (_m *MockEStoreEObject) EIsProxy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEStoreEObject_EIsProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EIsProxy'
type MockEStoreEObject_EIsProxy_Call struct {
	*mock.Call
}

// EIsProxy is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EIsProxy() *MockEStoreEObject_EIsProxy_Call {
	return &MockEStoreEObject_EIsProxy_Call{Call: _e.mock.On("EIsProxy")}
}

func (_c *MockEStoreEObject_EIsProxy_Call) Run(run func()) *MockEStoreEObject_EIsProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EIsProxy_Call) Return(_a0 bool) *MockEStoreEObject_EIsProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

// EIsSet provides a mock function with given fields: _a0
func (_m *MockEStoreEObject) EIsSet(_a0 EStructuralFeature) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EStructuralFeature) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEStoreEObject_EIsSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EIsSet'
type MockEStoreEObject_EIsSet_Call struct {
	*mock.Call
}

// EIsSet is a helper method to define mock.On call
//   - _a0 EStructuralFeature
func (_e *MockEStoreEObject_Expecter) EIsSet(_a0 interface{}) *MockEStoreEObject_EIsSet_Call {
	return &MockEStoreEObject_EIsSet_Call{Call: _e.mock.On("EIsSet", _a0)}
}

func (_c *MockEStoreEObject_EIsSet_Call) Run(run func(_a0 EStructuralFeature)) *MockEStoreEObject_EIsSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EStructuralFeature))
	})
	return _c
}

func (_c *MockEStoreEObject_EIsSet_Call) Return(_a0 bool) *MockEStoreEObject_EIsSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEStoreEObject) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// MockEStoreEObject_ENotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ENotify'
type MockEStoreEObject_ENotify_Call struct {
	*mock.Call
}

// ENotify is a helper method to define mock.On call
//   - _a0 ENotification
func (_e *MockEStoreEObject_Expecter) ENotify(_a0 interface{}) *MockEStoreEObject_ENotify_Call {
	return &MockEStoreEObject_ENotify_Call{Call: _e.mock.On("ENotify", _a0)}
}

func (_c *MockEStoreEObject_ENotify_Call) Run(run func(_a0 ENotification)) *MockEStoreEObject_ENotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ENotification))
	})
	return _c
}

func (_c *MockEStoreEObject_ENotify_Call) Return() *MockEStoreEObject_ENotify_Call {
	_c.Call.Return()
	return _c
}

// EResource provides a mock function with given fields:
func (_m *MockEStoreEObject) EResource() EResource {
	ret := _m.Called()

	var r0 EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResource)
		}
	}

	return r0
}

// MockEStoreEObject_EResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EResource'
type MockEStoreEObject_EResource_Call struct {
	*mock.Call
}

// EResource is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EResource() *MockEStoreEObject_EResource_Call {
	return &MockEStoreEObject_EResource_Call{Call: _e.mock.On("EResource")}
}

func (_c *MockEStoreEObject_EResource_Call) Run(run func()) *MockEStoreEObject_EResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EResource_Call) Return(_a0 EResource) *MockEStoreEObject_EResource_Call {
	_c.Call.Return(_a0)
	return _c
}

// ESet provides a mock function with given fields: _a0, _a1
func (_m *MockEStoreEObject) ESet(_a0 EStructuralFeature, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// MockEStoreEObject_ESet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ESet'
type MockEStoreEObject_ESet_Call struct {
	*mock.Call
}

// ESet is a helper method to define mock.On call
//   - _a0 EStructuralFeature
//   - _a1 interface{}
func (_e *MockEStoreEObject_Expecter) ESet(_a0 interface{}, _a1 interface{}) *MockEStoreEObject_ESet_Call {
	return &MockEStoreEObject_ESet_Call{Call: _e.mock.On("ESet", _a0, _a1)}
}

func (_c *MockEStoreEObject_ESet_Call) Run(run func(_a0 EStructuralFeature, _a1 interface{})) *MockEStoreEObject_ESet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EStructuralFeature), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEStoreEObject_ESet_Call) Return() *MockEStoreEObject_ESet_Call {
	_c.Call.Return()
	return _c
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEStoreEObject) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// MockEStoreEObject_ESetDeliver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ESetDeliver'
type MockEStoreEObject_ESetDeliver_Call struct {
	*mock.Call
}

// ESetDeliver is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockEStoreEObject_Expecter) ESetDeliver(_a0 interface{}) *MockEStoreEObject_ESetDeliver_Call {
	return &MockEStoreEObject_ESetDeliver_Call{Call: _e.mock.On("ESetDeliver", _a0)}
}

func (_c *MockEStoreEObject_ESetDeliver_Call) Run(run func(_a0 bool)) *MockEStoreEObject_ESetDeliver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockEStoreEObject_ESetDeliver_Call) Return() *MockEStoreEObject_ESetDeliver_Call {
	_c.Call.Return()
	return _c
}

// EStore provides a mock function with given fields:
func (_m *MockEStoreEObject) EStore() EStore {
	ret := _m.Called()

	var r0 EStore
	if rf, ok := ret.Get(0).(func() EStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStore)
		}
	}

	return r0
}

// MockEStoreEObject_EStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EStore'
type MockEStoreEObject_EStore_Call struct {
	*mock.Call
}

// EStore is a helper method to define mock.On call
func (_e *MockEStoreEObject_Expecter) EStore() *MockEStoreEObject_EStore_Call {
	return &MockEStoreEObject_EStore_Call{Call: _e.mock.On("EStore")}
}

func (_c *MockEStoreEObject_EStore_Call) Run(run func()) *MockEStoreEObject_EStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EStore_Call) Return(_a0 EStore) *MockEStoreEObject_EStore_Call {
	_c.Call.Return(_a0)
	return _c
}

// EUnset provides a mock function with given fields: _a0
func (_m *MockEStoreEObject) EUnset(_a0 EStructuralFeature) {
	_m.Called(_a0)
}

// MockEStoreEObject_EUnset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EUnset'
type MockEStoreEObject_EUnset_Call struct {
	*mock.Call
}

// EUnset is a helper method to define mock.On call
//   - _a0 EStructuralFeature
func (_e *MockEStoreEObject_Expecter) EUnset(_a0 interface{}) *MockEStoreEObject_EUnset_Call {
	return &MockEStoreEObject_EUnset_Call{Call: _e.mock.On("EUnset", _a0)}
}

func (_c *MockEStoreEObject_EUnset_Call) Run(run func(_a0 EStructuralFeature)) *MockEStoreEObject_EUnset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EStructuralFeature))
	})
	return _c
}

func (_c *MockEStoreEObject_EUnset_Call) Return() *MockEStoreEObject_EUnset_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEStoreEObject interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEStoreEObject creates a new instance of MockEStoreEObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEStoreEObject(t mockConstructorTestingTNewMockEStoreEObject) *MockEStoreEObject {
	mock := &MockEStoreEObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
