// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEStoreEObject_Prototype is an autogenerated mock type for the EStoreEObject type
type MockEStoreEObject struct {
	mock.Mock
	MockEStoreEObject_Prototype
}

type MockEStoreEObject_Prototype struct {
	mock *mock.Mock
	MockEObject_Prototype
	MockEStoreEObject_Declared_Prototype
}

func (_mp *MockEStoreEObject_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
	_mp.MockEObject_Prototype.SetMock(mock)
	_mp.MockEStoreEObject_Declared_Prototype.SetMock(mock)
}

type MockEStoreEObject_Expecter struct {
	MockEObject_Expecter
	MockEStoreEObject_Declared_Expecter
}

func (_me *MockEStoreEObject_Expecter) SetMock(mock *mock.Mock) {
	_me.MockEObject_Expecter.SetMock(mock)
	_me.MockEStoreEObject_Declared_Expecter.SetMock(mock)
}

func (_m *MockEStoreEObject_Prototype) EXPECT() *MockEStoreEObject_Expecter {
	expecter := &MockEStoreEObject_Expecter{}
	expecter.SetMock(_m.mock)
	return expecter
}

type MockEStoreEObject_Declared_Prototype struct {
	mock *mock.Mock
}

func (_mdp *MockEStoreEObject_Declared_Prototype) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

type MockEStoreEObject_Declared_Expecter struct {
	mock *mock.Mock
}

func (_mde *MockEStoreEObject_Declared_Expecter) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}

// EStore provides a mock function with given fields:
func (_m *MockEStoreEObject_Declared_Prototype) EStore() EStore {
	ret := _m.mock.Called()

	var r0 EStore
	if rf, ok := ret.Get(0).(func() EStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStore)
		}
	}

	return r0
}

// MockEStoreEObject_EStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EStore'
type MockEStoreEObject_EStore_Call struct {
	*mock.Call
}

// EStore is a helper method to define mock.On call
func (_e *MockEStoreEObject_Declared_Expecter) EStore() *MockEStoreEObject_EStore_Call {
	return &MockEStoreEObject_EStore_Call{Call: _e.mock.On("EStore")}
}

func (_c *MockEStoreEObject_EStore_Call) Run(run func()) *MockEStoreEObject_EStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEStoreEObject_EStore_Call) Return(_a0 EStore) *MockEStoreEObject_EStore_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEStoreEObject interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEStoreEObject creates a new instance of MockEStoreEObject_Prototype. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEStoreEObject(t mockConstructorTestingTNewMockEStoreEObject) *MockEStoreEObject {
	mock := &MockEStoreEObject{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
