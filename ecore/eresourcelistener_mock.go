// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEResourceListener is an autogenerated mock type for the EResourceListener type
type MockEResourceListener struct {
	mock.Mock
}

type MockEResourceListener_Expecter struct {
	*mock.Mock
}

func (_m *MockEResourceListener) EXPECT() *MockEResourceListener_Expecter {
	return &MockEResourceListener_Expecter{Mock: &_m.Mock}
}

// Attached provides a mock function with given fields: object
func (_m *MockEResourceListener) Attached(object EObject) {
	_m.Called(object)
}

// MockEResourceListener_Attached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attached'
type MockEResourceListener_Attached_Call struct {
	*mock.Call
}

// Attached is a helper method to define mock.On call
//   - object EObject
func (_e *MockEResourceListener_Expecter) Attached(object interface{}) *MockEResourceListener_Attached_Call {
	return &MockEResourceListener_Attached_Call{Call: _e.Mock.On("Attached", object)}
}

func (_c *MockEResourceListener_Attached_Call) Run(run func(object EObject)) *MockEResourceListener_Attached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEResourceListener_Attached_Call) Return() *MockEResourceListener_Attached_Call {
	_c.Call.Return()
	return _c
}

// Detached provides a mock function with given fields: object
func (_m *MockEResourceListener) Detached(object EObject) {
	_m.Called(object)
}

// MockEResourceListener_Detached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Detached'
type MockEResourceListener_Detached_Call struct {
	*mock.Call
}

// Detached is a helper method to define mock.On call
//   - object EObject
func (_e *MockEResourceListener_Expecter) Detached(object interface{}) *MockEResourceListener_Detached_Call {
	return &MockEResourceListener_Detached_Call{Call: _e.Mock.On("Detached", object)}
}

func (_c *MockEResourceListener_Detached_Call) Run(run func(object EObject)) *MockEResourceListener_Detached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EObject))
	})
	return _c
}

func (_c *MockEResourceListener_Detached_Call) Return() *MockEResourceListener_Detached_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEResourceListener interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEResourceListener creates a new instance of MockEResourceListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEResourceListener(t mockConstructorTestingTNewMockEResourceListener) *MockEResourceListener {
	mock := &MockEResourceListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
