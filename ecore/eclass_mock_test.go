// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardMockEClass() {
	_ = assert.Equal
	_ = testing.Coverage
}

type mockEClassRun struct {
	mock.Mock
}

func (m *mockEClassRun) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingTmockEClassRun interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEClassRun creates a new instance of mockEClassRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEClassRun(t mockConstructorTestingTmockEClassRun, args ...any) *mockEClassRun {
	mock := &mockEClassRun{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

// TestMockEClassIsAbstract tests method IsAbstract
func TestMockEClassIsAbstract(t *testing.T) {
	o := NewMockEClass(t)
	r := bool(true)
	m := newMockEClassRun(t)
	o.EXPECT().IsAbstract().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsAbstract().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsAbstract())
	assert.Equal(t, r, o.IsAbstract())
}

// TestMockEClassSetAbstract tests method SetAbstract
func TestMockEClassSetAbstract(t *testing.T) {
	o := &MockEClass{}
	v := bool(true)
	o.On("SetAbstract", v).Once()
	o.SetAbstract(v)
	o.AssertExpectations(t)
}

// TestMockEClassGetEAllAttributes tests method GetEAllAttributes
func TestMockEClassGetEAllAttributes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllAttributes().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllAttributes().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllAttributes())
	assert.Equal(t, l, o.GetEAllAttributes())
}

// TestMockEClassGetEAllContainments tests method GetEAllContainments
func TestMockEClassGetEAllContainments(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllContainments().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllContainments().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllContainments())
	assert.Equal(t, l, o.GetEAllContainments())
}

// TestMockEClassGetEAllOperations tests method GetEAllOperations
func TestMockEClassGetEAllOperations(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllOperations().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllOperations().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllOperations())
	assert.Equal(t, l, o.GetEAllOperations())
}

// TestMockEClassGetEAllReferences tests method GetEAllReferences
func TestMockEClassGetEAllReferences(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllReferences().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllReferences().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllReferences())
	assert.Equal(t, l, o.GetEAllReferences())
}

// TestMockEClassGetEAllStructuralFeatures tests method GetEAllStructuralFeatures
func TestMockEClassGetEAllStructuralFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllStructuralFeatures().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllStructuralFeatures().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllStructuralFeatures())
	assert.Equal(t, l, o.GetEAllStructuralFeatures())
}

// TestMockEClassGetEAllSuperTypes tests method GetEAllSuperTypes
func TestMockEClassGetEAllSuperTypes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAllSuperTypes().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAllSuperTypes().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAllSuperTypes())
	assert.Equal(t, l, o.GetEAllSuperTypes())
}

// TestMockEClassGetEAttributes tests method GetEAttributes
func TestMockEClassGetEAttributes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEAttributes().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEAttributes().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEAttributes())
	assert.Equal(t, l, o.GetEAttributes())
}

// TestMockEClassGetEContainmentFeatures tests method GetEContainmentFeatures
func TestMockEClassGetEContainmentFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEContainmentFeatures().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEContainmentFeatures().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEContainmentFeatures())
	assert.Equal(t, l, o.GetEContainmentFeatures())
}

// TestMockEClassGetECrossReferenceFeatures tests method GetECrossReferenceFeatures
func TestMockEClassGetECrossReferenceFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetECrossReferenceFeatures().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetECrossReferenceFeatures().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetECrossReferenceFeatures())
	assert.Equal(t, l, o.GetECrossReferenceFeatures())
}

// TestMockEClassGetEIDAttribute tests method GetEIDAttribute
func TestMockEClassGetEIDAttribute(t *testing.T) {
	o := NewMockEClass(t)
	r := new(MockEAttribute)
	m := newMockEClassRun(t)
	o.EXPECT().GetEIDAttribute().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().GetEIDAttribute().Once().Return(func() EAttribute { return r })
	assert.Equal(t, r, o.GetEIDAttribute())
	assert.Equal(t, r, o.GetEIDAttribute())
}

// TestMockEClassGetEOperations tests method GetEOperations
func TestMockEClassGetEOperations(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEOperations().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEOperations().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEOperations())
	assert.Equal(t, l, o.GetEOperations())
}

// TestMockEClassGetEReferences tests method GetEReferences
func TestMockEClassGetEReferences(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEReferences().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEReferences().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEReferences())
	assert.Equal(t, l, o.GetEReferences())
}

// TestMockEClassGetEStructuralFeatures tests method GetEStructuralFeatures
func TestMockEClassGetEStructuralFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetEStructuralFeatures().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetEStructuralFeatures().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetEStructuralFeatures())
	assert.Equal(t, l, o.GetEStructuralFeatures())
}

// TestMockEClassGetESuperTypes tests method GetESuperTypes
func TestMockEClassGetESuperTypes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	m := newMockEClassRun(t)
	o.EXPECT().GetESuperTypes().Run(func() { m.Run() }).Return(l).Once()
	o.EXPECT().GetESuperTypes().Once().Return(func() EList { return l })
	assert.Equal(t, l, o.GetESuperTypes())
	assert.Equal(t, l, o.GetESuperTypes())
}

// TestMockEClassIsInterface tests method IsInterface
func TestMockEClassIsInterface(t *testing.T) {
	o := NewMockEClass(t)
	r := bool(true)
	m := newMockEClassRun(t)
	o.EXPECT().IsInterface().Run(func() { m.Run() }).Return(r).Once()
	o.EXPECT().IsInterface().Once().Return(func() bool { return r })
	assert.Equal(t, r, o.IsInterface())
	assert.Equal(t, r, o.IsInterface())
}

// TestMockEClassSetInterface tests method SetInterface
func TestMockEClassSetInterface(t *testing.T) {
	o := &MockEClass{}
	v := bool(true)
	o.On("SetInterface", v).Once()
	o.SetInterface(v)
	o.AssertExpectations(t)
}

// TestMockEClassGetEOperation tests method GetEOperation
func TestMockEClassGetEOperation(t *testing.T) {
	o := &MockEClass{}
	operationID := int(45)
	r := new(MockEOperation)
	o.On("GetEOperation", operationID).Return(r).Once()
	o.On("GetEOperation", operationID).Return(func() EOperation {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEOperation(operationID))
	assert.Equal(t, r, o.GetEOperation(operationID))
	o.AssertExpectations(t)
}

// TestMockEClassGetEStructuralFeature tests method GetEStructuralFeature
func TestMockEClassGetEStructuralFeature(t *testing.T) {
	o := &MockEClass{}
	featureID := int(45)
	r := new(MockEStructuralFeature)
	o.On("GetEStructuralFeature", featureID).Return(r).Once()
	o.On("GetEStructuralFeature", featureID).Return(func() EStructuralFeature {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEStructuralFeature(featureID))
	assert.Equal(t, r, o.GetEStructuralFeature(featureID))
	o.AssertExpectations(t)
}

// TestMockEClassGetEStructuralFeatureFromName tests method GetEStructuralFeatureFromName
func TestMockEClassGetEStructuralFeatureFromName(t *testing.T) {
	o := &MockEClass{}
	featureName := string("Test String")
	r := new(MockEStructuralFeature)
	o.On("GetEStructuralFeatureFromName", featureName).Return(r).Once()
	o.On("GetEStructuralFeatureFromName", featureName).Return(func() EStructuralFeature {
		return r
	}).Once()
	assert.Equal(t, r, o.GetEStructuralFeatureFromName(featureName))
	assert.Equal(t, r, o.GetEStructuralFeatureFromName(featureName))
	o.AssertExpectations(t)
}

// TestMockEClassGetFeatureCount tests method GetFeatureCount
func TestMockEClassGetFeatureCount(t *testing.T) {
	o := &MockEClass{}
	r := int(45)
	o.On("GetFeatureCount").Return(r).Once()
	o.On("GetFeatureCount").Return(func() int {
		return r
	}).Once()
	assert.Equal(t, r, o.GetFeatureCount())
	assert.Equal(t, r, o.GetFeatureCount())
	o.AssertExpectations(t)
}

// TestMockEClassGetFeatureID tests method GetFeatureID
func TestMockEClassGetFeatureID(t *testing.T) {
	o := &MockEClass{}
	feature := new(MockEStructuralFeature)
	r := int(45)
	o.On("GetFeatureID", feature).Return(r).Once()
	o.On("GetFeatureID", feature).Return(func() int {
		return r
	}).Once()
	assert.Equal(t, r, o.GetFeatureID(feature))
	assert.Equal(t, r, o.GetFeatureID(feature))
	o.AssertExpectations(t)
}

// TestMockEClassGetFeatureType tests method GetFeatureType
func TestMockEClassGetFeatureType(t *testing.T) {
	o := &MockEClass{}
	feature := new(MockEStructuralFeature)
	r := new(MockEClassifier)
	o.On("GetFeatureType", feature).Return(r).Once()
	o.On("GetFeatureType", feature).Return(func() EClassifier {
		return r
	}).Once()
	assert.Equal(t, r, o.GetFeatureType(feature))
	assert.Equal(t, r, o.GetFeatureType(feature))
	o.AssertExpectations(t)
}

// TestMockEClassGetOperationCount tests method GetOperationCount
func TestMockEClassGetOperationCount(t *testing.T) {
	o := &MockEClass{}
	r := int(45)
	o.On("GetOperationCount").Return(r).Once()
	o.On("GetOperationCount").Return(func() int {
		return r
	}).Once()
	assert.Equal(t, r, o.GetOperationCount())
	assert.Equal(t, r, o.GetOperationCount())
	o.AssertExpectations(t)
}

// TestMockEClassGetOperationID tests method GetOperationID
func TestMockEClassGetOperationID(t *testing.T) {
	o := &MockEClass{}
	operation := new(MockEOperation)
	r := int(45)
	o.On("GetOperationID", operation).Return(r).Once()
	o.On("GetOperationID", operation).Return(func() int {
		return r
	}).Once()
	assert.Equal(t, r, o.GetOperationID(operation))
	assert.Equal(t, r, o.GetOperationID(operation))
	o.AssertExpectations(t)
}

// TestMockEClassGetOverride tests method GetOverride
func TestMockEClassGetOverride(t *testing.T) {
	o := &MockEClass{}
	operation := new(MockEOperation)
	r := new(MockEOperation)
	o.On("GetOverride", operation).Return(r).Once()
	o.On("GetOverride", operation).Return(func() EOperation {
		return r
	}).Once()
	assert.Equal(t, r, o.GetOverride(operation))
	assert.Equal(t, r, o.GetOverride(operation))
	o.AssertExpectations(t)
}

// TestMockEClassIsSuperTypeOf tests method IsSuperTypeOf
func TestMockEClassIsSuperTypeOf(t *testing.T) {
	o := &MockEClass{}
	someClass := new(MockEClass)
	r := bool(true)
	o.On("IsSuperTypeOf", someClass).Return(r).Once()
	o.On("IsSuperTypeOf", someClass).Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.IsSuperTypeOf(someClass))
	assert.Equal(t, r, o.IsSuperTypeOf(someClass))
	o.AssertExpectations(t)
}
