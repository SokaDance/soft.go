// Code generated by mockery v2.16.0. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEDecoder is an autogenerated mock type for the EDecoder type
type MockEDecoder struct {
	mock.Mock
}

type MockEDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEDecoder) EXPECT() *MockEDecoder_Expecter {
	return &MockEDecoder_Expecter{mock: &_m.Mock}
}

// DecodeResource provides a mock function with given fields:
func (_m *MockEDecoder) DecodeResource() {
	_m.Called()
}

// MockEDecoder_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeResource'
type MockEDecoder_Decode_Call struct {
	*mock.Call
}

// DecodeResource is a helper method to define mock.On call
func (_e *MockEDecoder_Expecter) DecodeResource() *MockEDecoder_Decode_Call {
	return &MockEDecoder_Decode_Call{Call: _e.mock.On("DecodeResource")}
}

func (_c *MockEDecoder_Decode_Call) Run(run func()) *MockEDecoder_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDecoder_Decode_Call) Return() *MockEDecoder_Decode_Call {
	_c.Call.Return()
	return _c
}

// DecodeObject provides a mock function with given fields:
func (_m *MockEDecoder) DecodeObject() (EObject, error) {
	ret := _m.Called()

	var r0 EObject
	var r1 error
	if rf, ok := ret.Get(0).(func() (EObject, error)); ok {
		r0, r1 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEDecoder_DecodeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeObject'
type MockEDecoder_DecodeObject_Call struct {
	*mock.Call
}

// DecodeObject is a helper method to define mock.On call
func (_e *MockEDecoder_Expecter) DecodeObject() *MockEDecoder_DecodeObject_Call {
	return &MockEDecoder_DecodeObject_Call{Call: _e.mock.On("DecodeObject")}
}

func (_c *MockEDecoder_DecodeObject_Call) Run(run func()) *MockEDecoder_DecodeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEDecoder_DecodeObject_Call) Return(_a0 EObject, _a1 error) *MockEDecoder_DecodeObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockEDecoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEDecoder creates a new instance of MockEDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEDecoder(t mockConstructorTestingTNewMockEDecoder) *MockEDecoder {
	mock := &MockEDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
