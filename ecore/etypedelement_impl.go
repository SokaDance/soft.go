// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// ETypedElementImpl is the implementation of the model object 'ETypedElement'
type ETypedElementImpl struct {
	ENamedElementImpl
	eType      EClassifier
	isOrdered  bool
	isUnique   bool
	lowerBound int
	upperBound int
}

type eTypedElementBasics interface {
	basicGetEType() EClassifier
}

// newETypedElementImpl is the constructor of a ETypedElementImpl
func newETypedElementImpl() *ETypedElementImpl {
	e := new(ETypedElementImpl)
	e.SetInterfaces(e)
	e.Initialize()
	return e
}

func (e *ETypedElementImpl) Initialize() {
	e.ENamedElementImpl.Initialize()
	e.isOrdered = true
	e.isUnique = true
	e.lowerBound = 0
	e.upperBound = 1

}

func (e *ETypedElementImpl) asETypedElement() ETypedElement {
	return e.GetInterfaces().(ETypedElement)
}

func (e *ETypedElementImpl) asBasics() eTypedElementBasics {
	return e.GetInterfaces().(eTypedElementBasics)
}

func (e *ETypedElementImpl) EStaticClass() EClass {
	return GetPackage().GetETypedElement()
}

func (e *ETypedElementImpl) EStaticFeatureCount() int {
	return ETYPED_ELEMENT_FEATURE_COUNT
}

// GetEType get the value of eType
func (e *ETypedElementImpl) GetEType() EClassifier {
	if e.eType != nil && e.eType.EIsProxy() {
		oldEType := e.eType
		newEType := e.EResolveProxy(oldEType).(EClassifier)
		e.eType = newEType
		if newEType != oldEType {
			if e.ENotificationRequired() {
				e.ENotify(NewNotificationByFeatureID(e, RESOLVE, ETYPED_ELEMENT__ETYPE, oldEType, newEType, NO_INDEX))
			}
		}
	}
	return e.eType
}

func (e *ETypedElementImpl) basicGetEType() EClassifier {
	return e.eType
}

// SetEType set the value of eType
func (e *ETypedElementImpl) SetEType(newEType EClassifier) {
	oldEType := e.eType
	e.eType = newEType
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ETYPED_ELEMENT__ETYPE, oldEType, newEType, NO_INDEX))
	}
}

// UnsetEType unset the value of eType
func (e *ETypedElementImpl) UnsetEType() {
	oldEType := e.eType
	e.eType = nil
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), UNSET, ETYPED_ELEMENT__ETYPE, oldEType, nil, NO_INDEX))
	}
}

// IsMany get the value of isMany
func (e *ETypedElementImpl) IsMany() bool {
	panic("IsMany not implemented")
}

// IsOrdered get the value of isOrdered
func (e *ETypedElementImpl) IsOrdered() bool {
	return e.isOrdered
}

// SetOrdered set the value of isOrdered
func (e *ETypedElementImpl) SetOrdered(newIsOrdered bool) {
	oldIsOrdered := e.isOrdered
	e.isOrdered = newIsOrdered
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ETYPED_ELEMENT__ORDERED, oldIsOrdered, newIsOrdered, NO_INDEX))
	}
}

// IsRequired get the value of isRequired
func (e *ETypedElementImpl) IsRequired() bool {
	panic("IsRequired not implemented")
}

// IsUnique get the value of isUnique
func (e *ETypedElementImpl) IsUnique() bool {
	return e.isUnique
}

// SetUnique set the value of isUnique
func (e *ETypedElementImpl) SetUnique(newIsUnique bool) {
	oldIsUnique := e.isUnique
	e.isUnique = newIsUnique
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ETYPED_ELEMENT__UNIQUE, oldIsUnique, newIsUnique, NO_INDEX))
	}
}

// GetLowerBound get the value of lowerBound
func (e *ETypedElementImpl) GetLowerBound() int {
	return e.lowerBound
}

// SetLowerBound set the value of lowerBound
func (e *ETypedElementImpl) SetLowerBound(newLowerBound int) {
	oldLowerBound := e.lowerBound
	e.lowerBound = newLowerBound
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ETYPED_ELEMENT__LOWER_BOUND, oldLowerBound, newLowerBound, NO_INDEX))
	}
}

// GetUpperBound get the value of upperBound
func (e *ETypedElementImpl) GetUpperBound() int {
	return e.upperBound
}

// SetUpperBound set the value of upperBound
func (e *ETypedElementImpl) SetUpperBound(newUpperBound int) {
	oldUpperBound := e.upperBound
	e.upperBound = newUpperBound
	if e.ENotificationRequired() {
		e.ENotify(NewNotificationByFeatureID(e.AsEObject(), SET, ETYPED_ELEMENT__UPPER_BOUND, oldUpperBound, newUpperBound, NO_INDEX))
	}
}

func (e *ETypedElementImpl) EGetFromID(featureID int, resolve bool) any {
	switch featureID {
	case ETYPED_ELEMENT__ETYPE:
		if resolve {
			return e.asETypedElement().GetEType()
		}
		return e.asBasics().basicGetEType()
	case ETYPED_ELEMENT__LOWER_BOUND:
		return e.asETypedElement().GetLowerBound()
	case ETYPED_ELEMENT__MANY:
		return e.asETypedElement().IsMany()
	case ETYPED_ELEMENT__ORDERED:
		return e.asETypedElement().IsOrdered()
	case ETYPED_ELEMENT__REQUIRED:
		return e.asETypedElement().IsRequired()
	case ETYPED_ELEMENT__UNIQUE:
		return e.asETypedElement().IsUnique()
	case ETYPED_ELEMENT__UPPER_BOUND:
		return e.asETypedElement().GetUpperBound()
	default:
		return e.ENamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (e *ETypedElementImpl) ESetFromID(featureID int, newValue any) {
	switch featureID {
	case ETYPED_ELEMENT__ETYPE:
		newValueOrNil, _ := newValue.(EClassifier)
		e.asETypedElement().SetEType(newValueOrNil)
	case ETYPED_ELEMENT__LOWER_BOUND:
		e.asETypedElement().SetLowerBound(newValue.(int))
	case ETYPED_ELEMENT__ORDERED:
		e.asETypedElement().SetOrdered(newValue.(bool))
	case ETYPED_ELEMENT__UNIQUE:
		e.asETypedElement().SetUnique(newValue.(bool))
	case ETYPED_ELEMENT__UPPER_BOUND:
		e.asETypedElement().SetUpperBound(newValue.(int))
	default:
		e.ENamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (e *ETypedElementImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ETYPED_ELEMENT__ETYPE:
		e.asETypedElement().UnsetEType()
	case ETYPED_ELEMENT__LOWER_BOUND:
		e.asETypedElement().SetLowerBound(0)
	case ETYPED_ELEMENT__ORDERED:
		e.asETypedElement().SetOrdered(true)
	case ETYPED_ELEMENT__UNIQUE:
		e.asETypedElement().SetUnique(true)
	case ETYPED_ELEMENT__UPPER_BOUND:
		e.asETypedElement().SetUpperBound(1)
	default:
		e.ENamedElementImpl.EUnsetFromID(featureID)
	}
}

func (e *ETypedElementImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ETYPED_ELEMENT__ETYPE:
		return e.eType != nil
	case ETYPED_ELEMENT__LOWER_BOUND:
		return e.lowerBound != 0
	case ETYPED_ELEMENT__MANY:
		return e.asETypedElement().IsMany() != false
	case ETYPED_ELEMENT__ORDERED:
		return e.isOrdered != true
	case ETYPED_ELEMENT__REQUIRED:
		return e.asETypedElement().IsRequired() != false
	case ETYPED_ELEMENT__UNIQUE:
		return e.isUnique != true
	case ETYPED_ELEMENT__UPPER_BOUND:
		return e.upperBound != 1
	default:
		return e.ENamedElementImpl.EIsSetFromID(featureID)
	}
}
