// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package tournament

import (
	"github.com/masagroup/soft.go/ecore"
)

// tournamentPackageImpl is the TournamentPackage implementation
type tournamentPackageImpl struct {
	ecore.EPackageExt
	group        ecore.EClass
	match        ecore.EClass
	namedElement ecore.EClass
	team         ecore.EClass
	tournament   ecore.EClass

	matchKind ecore.EEnum
}

func newTournamentPackageImpl() *tournamentPackageImpl {
	p := new(tournamentPackageImpl)
	p.SetInterfaces(p)
	p.Initialize(GetFactory(), ecore.GetFactory())
	return p
}

func (p *tournamentPackageImpl) Initialize(packageFactory TournamentFactory, ecoreFactory ecore.EcoreFactory) {
	p.EPackageExt.Initialize()
	p.SetName(NAME)
	p.SetNsPrefix(NS_PREFIX)
	p.SetNsURI(NS_URI)
	p.SetEFactoryInstance(packageFactory)
	p.createPackageContents(ecoreFactory)
	p.initializePackageContents(ecoreFactory)
	p.CreateResource()
}

// GetGroup returns the meta object corresponding to
func (p *tournamentPackageImpl) GetGroup() ecore.EClass {
	return p.group
}

// GetGroup_Teams returns the meta object corresponding to
func (p *tournamentPackageImpl) GetGroup_Teams() ecore.EReference {
	return p.group.GetEStructuralFeatures().Get(0).(ecore.EReference)
}

// GetMatch returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch() ecore.EClass {
	return p.match
}

// GetMatch_Date returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_Date() ecore.EAttribute {
	return p.match.GetEStructuralFeatures().Get(3).(ecore.EAttribute)
}

// GetMatch_Kind returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_Kind() ecore.EAttribute {
	return p.match.GetEStructuralFeatures().Get(5).(ecore.EAttribute)
}

// GetMatch_Location returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_Location() ecore.EAttribute {
	return p.match.GetEStructuralFeatures().Get(4).(ecore.EAttribute)
}

// GetMatch_Result returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_Result() ecore.EAttribute {
	return p.match.GetEStructuralFeatures().Get(6).(ecore.EAttribute)
}

// GetMatch_Group returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_Group() ecore.EReference {
	return p.match.GetEStructuralFeatures().Get(0).(ecore.EReference)
}

// GetMatch_GuestTeam returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_GuestTeam() ecore.EReference {
	return p.match.GetEStructuralFeatures().Get(2).(ecore.EReference)
}

// GetMatch_HomeTeam returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatch_HomeTeam() ecore.EReference {
	return p.match.GetEStructuralFeatures().Get(1).(ecore.EReference)
}

// GetNamedElement returns the meta object corresponding to
func (p *tournamentPackageImpl) GetNamedElement() ecore.EClass {
	return p.namedElement
}

// GetNamedElement_Name returns the meta object corresponding to
func (p *tournamentPackageImpl) GetNamedElement_Name() ecore.EAttribute {
	return p.namedElement.GetEStructuralFeatures().Get(0).(ecore.EAttribute)
}

// GetTeam returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTeam() ecore.EClass {
	return p.team
}

// GetTeam_Group returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTeam_Group() ecore.EReference {
	return p.team.GetEStructuralFeatures().Get(0).(ecore.EReference)
}

// GetTournament returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTournament() ecore.EClass {
	return p.tournament
}

// GetTournament_Groups returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTournament_Groups() ecore.EReference {
	return p.tournament.GetEStructuralFeatures().Get(0).(ecore.EReference)
}

// GetTournament_Matches returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTournament_Matches() ecore.EReference {
	return p.tournament.GetEStructuralFeatures().Get(2).(ecore.EReference)
}

// GetTournament_Teams returns the meta object corresponding to
func (p *tournamentPackageImpl) GetTournament_Teams() ecore.EReference {
	return p.tournament.GetEStructuralFeatures().Get(1).(ecore.EReference)
}

// GetMatchKind returns the meta object corresponding to
func (p *tournamentPackageImpl) GetMatchKind() ecore.EEnum {
	return p.matchKind
}

func (p *tournamentPackageImpl) createPackageContents(ecoreFactory ecore.EcoreFactory) {

	p.group = ecoreFactory.CreateEClassFromContainerAndClassID(p, GROUP)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.group, GROUP__TEAMS)

	p.match = ecoreFactory.CreateEClassFromContainerAndClassID(p, MATCH)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.match, MATCH__GROUP)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.match, MATCH__HOME_TEAM)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.match, MATCH__GUEST_TEAM)
	ecoreFactory.CreateEAttributeFromContainerAndClassID(p.match, MATCH__DATE)
	ecoreFactory.CreateEAttributeFromContainerAndClassID(p.match, MATCH__LOCATION)
	ecoreFactory.CreateEAttributeFromContainerAndClassID(p.match, MATCH__KIND)
	ecoreFactory.CreateEAttributeFromContainerAndClassID(p.match, MATCH__RESULT)

	p.namedElement = ecoreFactory.CreateEClassFromContainerAndClassID(p, NAMED_ELEMENT)
	ecoreFactory.CreateEAttributeFromContainerAndClassID(p.namedElement, NAMED_ELEMENT__NAME)

	p.team = ecoreFactory.CreateEClassFromContainerAndClassID(p, TEAM)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.team, TEAM__GROUP)

	p.tournament = ecoreFactory.CreateEClassFromContainerAndClassID(p, TOURNAMENT)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.tournament, TOURNAMENT__GROUPS)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.tournament, TOURNAMENT__TEAMS)
	ecoreFactory.CreateEReferenceFromContainerAndClassID(p.tournament, TOURNAMENT__MATCHES)

	p.matchKind = ecoreFactory.CreateEEnumFromContainerAndClassID(p, MATCH_KIND)

}

func (p *tournamentPackageImpl) initializePackageContents(ecoreFactory ecore.EcoreFactory) {

	p.group.GetESuperTypes().Add(p.GetNamedElement())
	p.team.GetESuperTypes().Add(p.GetNamedElement())
	p.tournament.GetESuperTypes().Add(p.GetNamedElement())

	p.InitEClass(p.group, "Group", "tournament/tournament.Group", false, false)
	p.InitEReference(p.GetGroup_Teams(), p.GetTeam(), p.GetTeam_Group(), "teams", "", 1, -1, false, false, true, false, true, false, true, false, true)

	p.InitEClass(p.match, "Match", "tournament/tournament.Match", false, false)
	p.InitEAttribute(p.GetMatch_Date(), ecore.GetPackage().GetEDate(), "date", "", 1, 1, false, false, true, false, true, false, true, false)
	p.InitEAttribute(p.GetMatch_Location(), ecore.GetPackage().GetEString(), "location", "", 0, 1, false, false, true, false, true, false, true, false)
	p.InitEAttribute(p.GetMatch_Kind(), p.GetMatchKind(), "kind", "", 1, 1, false, false, true, false, true, false, true, false)
	p.InitEAttribute(p.GetMatch_Result(), ecore.GetPackage().GetEString(), "result", "", 0, 1, false, false, true, false, true, false, true, false)
	p.InitEReference(p.GetMatch_Group(), p.GetGroup(), nil, "group", "", 1, 1, false, false, true, false, true, false, true, false, true)
	p.InitEReference(p.GetMatch_HomeTeam(), p.GetTeam(), nil, "homeTeam", "", 1, 1, false, false, true, false, true, false, true, false, true)
	p.InitEReference(p.GetMatch_GuestTeam(), p.GetTeam(), nil, "guestTeam", "", 1, 1, false, false, true, false, true, false, true, false, true)

	p.InitEClass(p.namedElement, "NamedElement", "tournament/tournament.NamedElement", true, false)
	p.InitEAttribute(p.GetNamedElement_Name(), ecore.GetPackage().GetEString(), "name", "", 1, 1, false, false, true, false, true, false, true, false)

	p.InitEClass(p.team, "Team", "tournament/tournament.Team", false, false)
	p.InitEReference(p.GetTeam_Group(), p.GetGroup(), p.GetGroup_Teams(), "group", "", 1, 1, false, false, true, false, true, false, true, false, true)

	p.InitEClass(p.tournament, "Tournament", "tournament/tournament.Tournament", false, false)
	p.InitEReference(p.GetTournament_Groups(), p.GetGroup(), nil, "groups", "", 1, -1, false, false, true, true, true, false, true, false, true)
	p.InitEReference(p.GetTournament_Teams(), p.GetTeam(), nil, "teams", "", 1, -1, false, false, true, true, true, false, true, false, true)
	p.InitEReference(p.GetTournament_Matches(), p.GetMatch(), nil, "matches", "", 1, -1, false, false, true, true, true, false, true, false, true)

	p.InitEEnum(p.GetMatchKind(), "MatchKind", "int32")
	p.AddEEnumLiteral(p.GetMatchKind(), "RoundOf32", "RoundOf32", 0, ROUND_OF32)
	p.AddEEnumLiteral(p.GetMatchKind(), "RoundOf16", "RoundOf16", 1, ROUND_OF16)
	p.AddEEnumLiteral(p.GetMatchKind(), "QuarterFinal", "QuarterFinal", 2, QUARTER_FINAL)
	p.AddEEnumLiteral(p.GetMatchKind(), "SemiFinal", "SemiFinal", 3, SEMI_FINAL)
	p.AddEEnumLiteral(p.GetMatchKind(), "Final", "Final", 4, FINAL)

}
