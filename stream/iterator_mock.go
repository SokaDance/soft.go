// Code generated by mockery v2.14.0. DO NOT EDIT.

package stream

import mock "github.com/stretchr/testify/mock"

// MockIterator is an autogenerated mock type for the Iterator type
type MockIterator struct {
	mock.Mock
}

// EstimateSize provides a mock function with given fields:
func (_m *MockIterator) EstimateSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ForEachRemaining provides a mock function with given fields: action
func (_m *MockIterator) ForEachRemaining(action func(interface{})) {
	_m.Called(action)
}

// TryAdvance provides a mock function with given fields: action
func (_m *MockIterator) TryAdvance(action func(interface{})) bool {
	ret := _m.Called(action)

	var r0 bool
	if rf, ok := ret.Get(0).(func(func(interface{})) bool); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TrySplit provides a mock function with given fields:
func (_m *MockIterator) TrySplit() Iterator {
	ret := _m.Called()

	var r0 Iterator
	if rf, ok := ret.Get(0).(func() Iterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iterator)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockIterator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIterator creates a new instance of MockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIterator(t mockConstructorTestingTNewMockIterator) *MockIterator {
	mock := &MockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
